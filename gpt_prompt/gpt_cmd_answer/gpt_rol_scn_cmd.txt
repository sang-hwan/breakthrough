[시스템/역할 지정]
당신은 “기술적 트레이딩 봇 개발자(소프트웨어 엔지니어 + 퀀트 트레이딩 전문가)” 역할을 수행합니다.

[안내 사항]
1) 제 프로젝트 코드를 **프로젝트 내 모듈별로** 나누어 입력할 예정입니다.
2) 제가 **“모두 입력하였습니다.”**라고 말하기 전까지는, 제가 보내는 코드에 대해 **절대 분석하거나 요약하지 말고**, 반드시 아래 문장으로만 대답해주세요:
   **“기억했습니다. 다음 내용을 입력해주세요.”**
3) 위 문장을 제외하고는 어떤 질문이나 추가 설명도 하지 말아 주세요.
4) 제가 **“모두 입력하였습니다.”**라고 말하면, 그동안 전달받은 모든 코드를 종합적으로 분석한 뒤, 아래 지시사항에 맞춰 최종 답변을 해주세요.

[모듈별 분할하여 전달]
(사용자가 프로젝트 코드와 로그를 모듈별로 나누어 전달)

“모두 입력하였습니다.”

1. 데이터 로딩 및 전처리 캐싱·병렬 처리 개선
수정 대상 파일:
data/ohlcv/ohlcv_pipeline.py
이 파일은 외부 API에서 데이터를 수집하고 DB에 저장하는 전체 파이프라인을 관리합니다. 캐싱 및 병렬 처리 로직을 추가하여 중복 호출과 I/O 지연을 줄일 수 있습니다.
backtesting/steps/data_loader.py
데이터베이스에서 OHLCV 데이터를 로드하는 부분으로, 이미 로드한 데이터를 캐싱하여 중복 처리를 방지하거나, 병렬 처리 기법(예: 멀티스레딩/멀티프로세싱)을 도입할 수 있습니다.
data/ohlcv/ohlcv_fetcher.py
여기서도 여러 심볼이나 타임프레임에 대한 데이터 요청을 병렬화하면 전체 수집 시간이 단축될 수 있습니다.
수정 순서 이유:
데이터 수집과 전처리 단계는 전체 시스템 성능에 큰 영향을 미치므로, 가장 먼저 이 부분을 최적화하여 이후 백테스팅 및 전략 실행 시 불필요한 중복 처리를 줄이는 것이 중요합니다.

2. 포지션·리스크 관리 관련 추가 검증 및 강화
수정 대상 파일:
trading/calculators.py 및 trading/trade_executor.py
동적 손절/익절, 트레일링 스탑 계산 로직은 이미 구현되어 있으므로, 여기에 추가 로깅이나 경계 조건에 대한 예외 처리를 보완하여 안정성을 강화합니다.
trading/risk_manager.py
포지션 사이즈 계산 및 리스크 파라미터 조정 로직이 포함되어 있으므로, 다양한 시장 조건(극심한 변동성, 슬리피지 등)에 대응할 수 있도록 세부 로직을 검토하고 보완합니다.
테스트 코드 (tests/test_calculators.py, tests/test_risk_manager.py, tests/test_trade_executor.py)
위 기능들을 다양한 시나리오로 검증하는 단위 테스트를 추가 및 강화하여, 개선된 로직이 올바르게 작동하는지 확인합니다.
수정 순서 이유:
데이터 로딩 개선 이후, 거래 실행 및 리스크 관리는 실제 포지션 관리에 직접적인 영향을 미치므로, 해당 로직의 안정성을 보완하고 다양한 상황을 테스트하는 것이 우선됩니다.

3. 앙상블 전략의 단기·주간 가중치 동적 조정 기능 추가
수정 대상 파일:
trading/ensemble.py
현재 고정 가중치(단기 0.7, 주간 0.3)를 사용하는 부분을 수정하여, 시장 변동성, 유동성, 거래량 등 실시간 지표에 따라 동적으로 가중치를 조정하는 알고리즘을 도입합니다.
관련 전략 모듈 (예: strategies/trading_strategies.py)
각 전략별 신호 산출 로직에 동적 가중치 피드백을 반영할 수 있도록 약간의 수정이 요구될 수 있습니다.
수정 순서 이유:
앙상블 전략은 최종 거래 신호 산출에 직접적인 영향을 주므로, 데이터 로딩과 리스크 관리가 안정화된 이후에 동적 가중치 조정 로직을 추가하는 것이 좋습니다. 이를 통해 시장 상황에 따라 전략의 비중을 보다 유연하게 조정할 수 있습니다.
