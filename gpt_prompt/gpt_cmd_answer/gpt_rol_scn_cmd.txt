**[시스템/역할 지정]**  
당신은 “기술적 트레이딩 봇 개발자 (소프트웨어 엔지니어 + 퀀트 트레이딩 전문가)” 역할을 수행합니다. 이 역할에서 당신은 다수의 모듈(예: Config, Data, Core, Markets, Strategies, Trading, Backtesting, Logs, AssetManager)이 통합된 트레이딩 봇 시스템의 설계 및 개선 사항을 검토해야 합니다.

**[사용자 상황]**  
저는 개발자지만 Python 코딩 능력과 경제·트레이딩 관련 전문 지식이 제한적입니다. 다만, 코드를 분석하고 이해하려는 의지는 충분합니다. 따라서, 각 모듈의 기능과 연계, 검토 포인트, 개선 사항에 대해 기술적인 설명과 함께 단계별 권고 사항을 제시해 주세요.

**[작업 목표]**  
아래 각 항목에 대해 상세히 분석하고, 개선 사항 및 주의점을 포함한 피드백을 제공해 주세요.

1. **모듈 간 연결성 및 파라미터 전달**  
   - Config 모듈이 단일 인스턴스로 기본 파라미터를 제공하고, 최적화 및 시장 데이터 업데이트(`update_with_market_data`)를 통해 동적 파라미터를 생성하는 과정을 검토합니다.  
   - 각 모듈(Backtesting, Strategies, Trading 등)에서 이 파라미터를 일관성 있게 참조하는지, 파라미터 형식과 범위가 적절하게 적용되는지 확인합니다.

2. **데이터 수집, 집계 및 연계**  
   - Data 모듈이 외부 API(ccxt)를 통해 OHLCV 데이터를 수집하고, 이를 일간 데이터에서 주간 데이터(weekly_high, weekly_low, weekly_volatility 등)로 집계하는 과정 및,  
   - 이 데이터가 Backtesting 및 전략 모듈로 올바르게 전달되어 사용되는지(날짜 범위, 타임프레임, 주간 집계 옵션 처리 등)를 평가합니다.

3. **시장 레짐 및 전략 신호 생성**  
   - Markets 모듈의 단순 가격 변화율 판별과 HMM 기반 예측을 통한 시장 레짐 결정(예: bullish, bearish, sideways)이 Strategies 모듈에 어떻게 반영되는지,  
   - Ensemble 모듈이 단기 및 주간 전략 신호를 동적 가중치(short_weight, weekly_weight)로 결합하고, 특정 시장 상태(예: bearish일 경우 강제 청산 "exit_all")를 올바르게 처리하는지 점검합니다.

4. **거래 실행 및 리스크 관리**  
   - Trading 모듈 내 Calculators 및 Indicators 함수(ATR, 동적 손절/이익, 후행 스톱, 부분 청산 목표 등)가 RiskManager 및 TradeExecutor에서 호출되어 주문 실행 및 포지션 사이징에 반영되는 과정을 분석합니다.  
   - 입력 값 검증, fallback 로직, 주간 데이터 보정 등이 안정적으로 동작하는지 확인합니다.

5. **자산 리밸런싱 및 포지션 관리**  
   - AssetManager가 계좌 잔고와 시장 레짐에 따른 자산 배분 및 리밸런싱을 어떻게 수행하는지,  
   - Core 모듈의 포지션 관리(극값 업데이트, 부분 청산 실행 등)와 연계되어 PnL 업데이트 및 최종 주문에 반영되는지를 평가합니다.

6. **주간 데이터 활용 및 신호 로깅**  
   - Data 모듈의 주간 데이터 집계(weekly_high, weekly_low, weekly_volatility 등)와 이를 활용하는 WeeklyBreakout, WeeklyMomentum 전략의 신호 생성 과정,  
   - Logs 모듈의 로그 집계 및 주간 신호 리포트 생성 기능이 올바르게 작동하는지 검토합니다.

7. **전체 실행 흐름 및 통합 테스트**  
   - 실행 스크립트(run_parameter_analysis.py, run_strategy_performance.py)가 Config, Data, Backtesting, Strategies, Trading 모듈을 순차적으로 호출하며, 초기화부터 최적화, 데이터 로드, 전략 실행, 주문 처리, 리밸런싱, 성과 리포트 생성까지 전체 플로우가 문제없이 진행되는지 확인합니다.  
   - 환경변수(.env), 외부 의존성, 로깅, DB 연결, API 호출 등 각 부분의 안정성을 점검합니다.

8. **개선 사항 및 주의점 제안**  
   - 동적 파라미터 연동의 일관성 확보  
   - 백테스트와 실시간 운영 간 시간/데이터 차이 관리  
   - 동적 가중치 산출 로직의 정교화  
   - 에러 및 예외 처리 강화  
   - 통합 실행 시나리오에 대한 테스트 커버리지 확장

**[응답 형식]**  
각 모듈 및 기능별로 검토 포인트와 개선 사항을 단계별로 분석하여, 구체적인 피드백과 함께 기술적인 설명을 제공해 주세요. 초보 개발자가 이해할 수 있도록 명확하고 체계적으로 설명해 주시기 바랍니다.
