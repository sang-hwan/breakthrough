**프로젝트 구조 및 요약**
ProjectRoot/
├── .env                               # 환경 변수: DB 접속 정보, 로깅 설정 등.
├── requirements.txt                   # 프로젝트에 필요한 Python 패키지 목록.
├── run_drop_db_tables.py              # DB 내 모든 테이블을 삭제하는 실행 스크립트.
├── run_parameter_analysis.py          # 핵심 파라미터 민감도 분석 및 최종 리포트 생성 스크립트.
├── run_strategy_performance.py        # 전략 성과 백테스트 실행 및 최종 리포트 생성 스크립트.
├── run_update_ohlcv_data.py           # 거래소에서 OHLCV 데이터를 업데이트하여 DB에 저장하는 스크립트.
│
├── backtesting/                       
│   ├── backtester.py                # 백테스트 전체 흐름을 관리하는 Backtester 클래스.
│   ├── performance.py               # 백테스트 결과를 기반으로 성과 지표를 계산하는 함수들.
│   └── steps/
│       ├── data_loader.py           # DB에서 OHLCV 데이터를 불러오고 전처리하는 모듈 (캐시, 인덱스 검증 등 포함).
│       ├── hmm_manager.py           # HMM 모델 기반 시장 레짐 업데이트 및 로깅 처리.
│       ├── indicator_applier.py     # SMA, RSI, MACD 등의 기술 인디케이터 적용 모듈.
│       └── order_manager.py         # 주문 신호 생성 및 실행(진입/청산, 리밸런싱 등)을 관리하는 모듈.
│
├── config/
│   └── config_manager.py            # pydantic 기반 기본 및 동적 트레이딩 파라미터 관리, 업데이트, 병합.
│
├── core/
│   ├── account.py                   # 거래 계좌 관리: 잔액, 포지션 추가/제거, 거래 후 업데이트.
│   └── position.py                  # 개별 포지션 및 실행 기록을 관리하는 Position 클래스.
│
├── data/
│   ├── db/
│   │   ├── db_config.py             # DB 접속 설정을 환경 변수에서 로드.
│   │   └── db_manager.py            # DB 테이블 생성, 데이터 삽입(ON CONFLICT 처리), 조회 등.
│   └── ohlcv/
│       ├── ohlcv_aggregator.py      # OHLCV 데이터를 주간 단위로 집계하고 인디케이터 계산.
│       ├── ohlcv_fetcher.py         # ccxt를 사용해 거래소에서 OHLCV 데이터를 가져오는 모듈 (캐싱 포함).
│       └── ohlcv_pipeline.py        # 멀티스레딩으로 여러 심볼/타임프레임의 데이터를 수집 후 DB에 저장.
│
├── logs/
│   ├── aggregating_handler.py       # 로그 발생 건수를 모듈/함수별로 집계하는 커스텀 핸들러.
│   ├── final_report.py              # 백테스트 최종 성과 및 파라미터 민감도 리포트 생성 모듈.
│   ├── logger_config.py             # 파일, 콘솔, 큐 기반 로깅 설정 및 핸들러(라인 롤링 포함) 구성.
│   ├── logging_util.py              # 상태 변화 기반 로그 기록 및 로그 파일 관리 유틸리티.
│   └── state_change_manager.py      # 이전 상태와의 비교를 통해 변화가 있는 경우에만 로그 이벤트를 허용.
│
├── markets/
│   ├── regime_filter.py             # 가격 데이터 기반 단순 시장 레짐 및 극값(주간 고/저) 신호 판단.
│   └── regime_model.py              # HMM을 사용하여 시장 레짐을 예측하고 상태를 매핑하는 모듈.
│
├── strategies/
│   ├── base_strategy.py             # 모든 트레이딩 전략의 기본 클래스.
│   ├── optimizer.py                 # optuna를 사용하여 동적 파라미터를 최적화하는 모듈.
│   ├── param_analysis.py            # 파라미터 민감도 분석을 수행하고 결과를 집계하는 모듈.
│   └── trading_strategies.py        # 여러 트레이딩 전략(진입/청산, 추세, 돌파, 역추세 등) 및 앙상블 로직.
│
├── trading/
│   ├── asset_manager.py             # 계좌 내 자산(현물, 스테이블 코인) 리밸런싱을 관리.
│   ├── calculators.py               # ATR, 동적 스톱로스/테이크프로핏, 부분 청산 목표 등 계산 함수들.
│   ├── trade_executor.py            # 계산된 리스크와 목표를 바탕으로 실제 주문 실행 처리.
│   ├── ensemble.py                  # 여러 전략의 신호를 종합해 최종 거래 신호를 도출하는 앙상블 모듈.
│   ├── indicators.py                # SMA, MACD, RSI, Bollinger Bands 등 기술 인디케이터 계산 함수들.
│   └── risk_manager.py              # 포지션 사이징, 리스크 파라미터 계산, 스케일인/아웃 전략 관리.
│
└── tests/                          
    ├── conftest.py                  # pytest 설정 및 로그 파일 관리를 위한 fixture.
    ├── test_aggregating_handler.py  # AggregatingHandler의 동작 및 집계 기능 테스트.
    ├── test_asset_manager.py        # AssetManager의 리밸런싱 기능 테스트.
    ├── test_backtester_integration.py  # 백테스터 통합 테스트 (더미 데이터 기반).
    ├── test_base_strategy.py        # BaseStrategy 및 DummyStrategy 테스트.
    ├── test_calculators.py          # ATR, 동적 스톱/테이크, 부분 청산 목표 계산 함수 테스트.
    ├── test_config_manager.py       # ConfigManager의 기본값, 업데이트, 병합 기능 테스트.
    ├── test_core_account.py         # Account 클래스의 기능(잔액 업데이트, 포지션 관리) 테스트.
    ├── test_core_position.py        # Position 클래스의 실행 추가, 부분 청산 등 테스트.
    ├── test_data_validation.py      # 데이터 로더의 DataFrame 검증 및 오류 처리 테스트.
    ├── test_ensemble.py             # 앙상블 신호 도출 및 최종 신호 계산 테스트.
    ├── test_exception_logging.py    # 계산 함수에서 예외 발생 시 로그 기록 테스트.
    ├── test_indicators.py           # 기술 인디케이터 계산 함수(SMA, MACD, RSI, Bollinger Bands) 테스트.
    ├── test_ohlcv_aggregator.py      # 주간 OHLCV 데이터 집계 및 인디케이터 계산 테스트.
    ├── test_ohlcv_variability.py     # 데이터 전처리 시 변동성 경고 메시지 발생 여부 테스트.
    ├── test_optimizer.py            # 동적 파라미터 최적화(optimizer) 테스트.
    ├── test_param_analysis.py       # 파라미터 민감도 분석 모듈 테스트.
    ├── test_performance_report.py   # 최종 성과 리포트 생성 결과 테스트.
    ├── test_regime_filter.py        # 시장 레짐 판단 및 필터링 함수 테스트.
    ├── test_regime_model.py         # HMM 기반 시장 레짐 모델의 학습/예측 테스트.
    ├── test_risk_manager.py         # RiskManager의 포지션 사이징 및 리스크 계산 테스트.
    ├── test_strategies.py           # 다양한 트레이딩 전략 구현 테스트.
    ├── test_trade_executor.py       # TradeExecutor의 주문 실행 및 계산 함수 테스트.
    └── test_weekly_strategies.py    # 주간 전략(돌파, 모멘텀) 신호 도출 로직 테스트.

**성능이 개선될때까지 아래 사항 반복**
1. 민간도 분석을 통한 핵심 파라미터 추출
2. 핵심 파라미터 최적화(+과적합 방지)
3. 최적화된 파라미터로 백테스트
4. 성능 개선 피드백