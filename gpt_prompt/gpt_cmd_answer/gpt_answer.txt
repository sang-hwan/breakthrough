project/
├── .env                               # 환경변수 파일 (DB 접속 정보, 로깅 설정 등)
├── requirements.txt                   # 프로젝트 의존성 패키지 목록
├── run_parameter_analysis.py          # 파라미터 민감도 분석 실행 스크립트 (Optuna 사용)
├── run_strategy_performance.py        # 최적화 파라미터 기반 백테스트 및 성과 리포트 실행 스크립트
├── backtesting/
│   ├── steps/
│   │   ├── data_loader.py             # 데이터 로드 및 캐시 관리
│   │   ├── hmm_manager.py             # HMM 기반 시장 레짐 업데이트
│   │   ├── indicator_applier.py       # 기술적 인디케이터 적용
│   │   └── order_manager.py           # 주문 처리 및 포지션 관리
│   ├── backtester.py                  # 백테스트 엔진 통합
│   └── performance.py                 # 백테스트 성과 계산 및 리포트 생성
├── config/
│   └── config_manager.py              # 기본 설정 파라미터 관리 및 업데이트
├── core/
│   ├── account.py                     # 계좌 잔고 및 포지션 관리
│   └── position.py                    # 개별 포지션 및 실행 내역 관리
├── data/
│   ├── db/
│   │   ├── db_config.py               # DB 접속 정보 설정 (.env 기반)
│   │   └── db_manager.py              # DB 테이블 생성, 데이터 삽입/조회
│   └── ohlcv/
│       ├── ohlcv_aggregator.py        # 일간 데이터를 주간 데이터로 집계 및 인디케이터 계산
│       ├── ohlcv_fetcher.py           # ccxt를 이용한 OHLCV 데이터 수집 (과거/최신)
│       └── ohlcv_pipeline.py          # 멀티스레딩을 통한 데이터 수집 및 DB 저장 파이프라인
├── logs/
│   ├── aggregating_handler.py         # 로그 집계 및 요약 출력 핸들러
│   ├── final_report.py                # 최종 성과 및 민감도 리포트 생성
│   ├── logger_config.py               # 전체 로깅 설정 (파일 회전, 콘솔, 큐 등)
│   └── logging_util.py                # 이벤트 로깅 및 로그 파일 관리 유틸리티
├── markets/
│   ├── regime_filter.py               # 가격 데이터 기반 시장 레짐 결정 및 필터링
│   └── regime_model.py                # HMM 기반 시장 레짐 모델 (학습, 예측, 재학습)
├── strategies/
│   ├── base_strategy.py               # 전략 기본 인터페이스 (신호 생성 메서드)
│   ├── optimizer.py                   # Optuna 기반 파라미터 최적화
│   ├── param_analysis.py              # 파라미터 민감도 분석 및 백테스트 실행
│   └── trading_strategies.py          # 개별 및 Ensemble 트레이딩 전략 구현
├── trading/
│   ├── asset_manager.py               # 계좌 자산 리밸런싱 관리 (현물/스테이블코인)
│   ├── calculators.py                 # ATR, 동적 손절/이익, 후행 스톱, 부분 청산 목표 계산
│   ├── ensemble.py                    # 여러 전략 신호 종합하여 최종 신호 생성 (앙상블)
│   ├── indicators.py                  # 기술적 인디케이터 계산 (SMA, MACD, RSI, Bollinger Bands)
│   ├── risk_manager.py                # 리스크 관리, 포지션 사이징, 분할 할당, 파라미터 조정
│   └── trade_executor.py              # 거래 실행 관련 계산 함수 호출 및 로깅 처리
└── tests/                             # 단위 및 통합 테스트 파일들
    ├── conftest.py                    # 테스트 전 로그 파일 삭제 및 로거 초기화
    ├── test_aggregating_handler.py    # AggregatingHandler 로그 집계 테스트
    ├── test_asset_manager.py          # AssetManager 리밸런싱 기능 테스트
    ├── test_backtester_integration.py # Backtester 통합 테스트 (더미 데이터 사용)
    ├── test_base_strategy.py          # BaseStrategy 및 더미 전략 테스트
    ├── test_calculators.py            # ATR, 동적 손절/이익, 후행 스톱 등 계산 함수 테스트
    ├── test_config_manager.py         # ConfigManager 기본/업데이트 기능 테스트
    ├── test_core_account.py           # Account 클래스 기능 테스트
    ├── test_core_position.py          # Position 클래스 기능 테스트
    ├── test_data_validation.py        # 데이터 로드 및 날짜 범위 유효성 테스트
    ├── test_ensemble.py               # Ensemble 신호 생성 테스트
    ├── test_exception_logging.py      # 계산 함수 예외 및 로깅 테스트
    ├── test_indicators.py             # SMA, MACD, RSI, Bollinger Bands 인디케이터 테스트
    ├── test_ohlcv_aggregator.py       # OHLCV 집계 및 주간 인디케이터 계산 테스트
    ├── test_ohlcv_variability.py      # OHLCV 데이터의 가격 변동성이 충분한지 여부를 테스트
    ├── test_optimizer.py              # 파라미터 최적화 (Optuna) 테스트
    ├── test_param_analysis.py         # 파라미터 민감도 분석 백테스트 테스트
    ├── test_performance_report.py     # 최종 성과 리포트 출력 테스트
    ├── test_regime_filter.py          # 시장 레짐 결정 및 필터링 테스트
    ├── test_regime_model.py           # HMM 기반 시장 레짐 모델 학습/예측 테스트
    ├── test_risk_manager.py           # RiskManager 기능 테스트 (포지션 사이징, 파라미터 조정)
    ├── test_strategies.py             # 개별 및 Ensemble 전략 신호 생성 테스트
    ├── test_trade_executor.py         # TradeExecutor 계산 및 거래 실행 관련 테스트
    └── test_weekly_strategies.py      # 주간 전략 (돌파, 모멘텀) 테스트



아래는 모듈별 수정(검토) 우선순위와 그 이유입니다.

1. **config/config_manager.py**  
   - **이유:**  
     - 프로젝트 전반의 기본 설정과 파라미터 업데이트가 여기서 관리됩니다.  
     - 다른 모듈(전략, 리스크, 백테스트 등)이 이 설정을 참조하므로, 로직 오류나 중복이 있으면 전파되기 쉽습니다.

2. **core/account.py & core/position.py**  
   - **이유:**  
     - 계좌 및 포지션 관리는 거래의 기본이 되는 핵심 도메인입니다.  
     - 다른 모듈(예: AssetManager, TradeExecutor 등)과의 상호작용에 직접 영향을 주므로, 로직 문제나 중복 구현을 먼저 확인해야 합니다.

3. **data/db/db_config.py & data/db/db_manager.py**  
   - **이유:**  
     - DB 접속, 테이블 생성, 데이터 삽입/조회 로직은 데이터 저장 및 로딩의 기초이므로, 여기서 문제가 발생하면 전체 데이터 플로우에 영향을 미칩니다.

4. **data/ohlcv/ohlcv_fetcher.py, ohlcv_aggregator.py, ohlcv_pipeline.py**  
   - **이유:**  
     - 데이터 수집 및 전처리 모듈로, 백테스트와 실거래의 기초 데이터가 여기서 처리됩니다.  
     - 중복되는 데이터 처리 로직이나 충돌 가능성을 먼저 점검해야 합니다.

5. **backtesting/steps/data_loader.py**  
   - **이유:**  
     - 데이터 로드, 캐시, 전처리 기능이 핵심 백테스트 데이터의 정확성을 좌우합니다.  
     - Ohlcv 모듈과의 중복이나 충돌 가능성이 있는 부분을 확인합니다.

6. **backtesting/steps/hmm_manager.py & markets/regime_model.py**  
   - **이유:**  
     - HMM 기반 시장 레짐 예측 로직이 두 모듈에 분산되어 있을 수 있으므로, 로직상의 중복 여부와 수정/재학습 조건의 일관성을 함께 검토해야 합니다.

7. **backtesting/steps/indicator_applier.py & trading/indicators.py**  
   - **이유:**  
     - 기술적 인디케이터(SMA, MACD, RSI, Bollinger Bands) 계산 기능이 여러 곳에 분산되어 있습니다.  
     - 중복 구현이나 모듈 간 충돌이 없는지, 그리고 수정 시 일관성을 유지할 수 있도록 먼저 확인합니다.

8. **backtesting/steps/order_manager.py**  
   - **이유:**  
     - 주문 처리 및 포지션 업데이트 로직은 백테스트의 핵심 흐름을 구성하므로, 다른 주문 관련 모듈(예: TradeExecutor, core/position.py)과의 중복/충돌 여부를 중점적으로 점검합니다.

9. **backtesting/backtester.py**  
   - **이유:**  
     - 전체 백테스트 엔진으로, 앞서 검토한 모듈들을 통합하고 있으므로 수정된 부분이 잘 반영되는지, 모듈 간 통합에 문제가 없는지 확인해야 합니다.

10. **backtesting/performance.py**  
    - **이유:**  
      - 백테스트 성과 계산 및 리포트 생성 모듈로, 로그 리포트와 중복되는 기능(예: logs/final_report.py)과의 충돌 여부를 확인합니다.

11. **logs/** (logger_config.py, aggregating_handler.py, logging_util.py, final_report.py)  
    - **이유:**  
      - 프로젝트 전체 로깅 체계와 요약 리포트 기능은 모든 모듈에 영향을 주므로, 로직의 정확성 및 중복/충돌 여부를 철저하게 검토해야 합니다.

12. **markets/regime_filter.py**  
    - **이유:**  
      - 단순 가격 변화율 기반의 시장 레짐 필터링 기능이므로, HMM 기반 모델과의 역할 분담 및 중복이 없는지 확인합니다.

13. **strategies/** (base_strategy.py, trading_strategies.py, optimizer.py, param_analysis.py)  
    - **이유:**  
      - 전략 인터페이스 및 개별 전략, 그리고 파라미터 최적화/민감도 분석 로직이 구현되어 있습니다.  
      - 전략 신호 생성과 관련된 로직이 다른 인디케이터나 리스크 관리 모듈과 중복되지 않는지, 그리고 모듈 간 충돌이 없는지 점검해야 합니다.

14. **trading/** (indicators.py, calculators.py, risk_manager.py, trade_executor.py, asset_manager.py, ensemble.py)  
    - **이유:**  
      - 거래 실행, 리스크 관리, 신호 통합 등 실제 거래 관련 로직의 집합입니다.  
      - 특히, 계산 함수 및 리스크 파라미터 조정 로직이 여러 곳(예: backtesting, strategies)과 연계되므로 중복 및 충돌 여부를 집중 검토해야 합니다.

15. **실행 스크립트 (run_parameter_analysis.py, run_strategy_performance.py)**  
    - **이유:**  
      - 전체 모듈을 통합하는 엔트리 포인트로, 앞서 수정한 모든 모듈이 올바르게 연동되는지, 전체 실행 플로우에 문제는 없는지 최종적으로 검토합니다.

16. **tests/**  
    - **이유:**  
      - 단위 및 통합 테스트 케이스를 통해 각 모듈의 수정 사항과 통합 결과가 올바른지 확인합니다.  
      - 테스트 케이스를 통해 중복이나 충돌으로 인한 문제를 조기에 발견할 수 있습니다.
