project-root/
├── .env                                  # 환경변수 파일 (DB 및 로깅 설정)
├── requirements.txt                      # 필요한 패키지 목록 (pandas, numpy, SQLAlchemy, 등)
├── run_parameter_analysis.py             # 파라미터 민감도 분석 실행 스크립트
├── run_strategy_performance.py           # Walk-Forward 방식의 전략 성과 평가 실행 스크립트
├── backtesting/                          # 백테스팅 관련 모듈
│   ├── backtester.py                     # 백테스팅 엔진의 핵심 클래스 (전체 흐름 관리)
│   ├── performance.py                    # 백테스트 성과 (ROI, PnL 등) 계산 및 리포트 생성
│   └── steps/                            # 백테스팅 단계별 스크립트
│       ├── data_loader.py                # OHLCV 데이터 로드 및 캐시 처리
│       ├── hmm_manager.py                # HMM 모델을 통한 시장 레짐 업데이트 관리
│       ├── indicator_applier.py          # SMA, RSI, MACD 등 인디케이터 적용
│       └── order_manager.py              # 주문 실행 및 포지션 관리 로직
├── config/                               # 설정 및 환경 구성 관련 모듈
│   └── config_manager.py                 # 기본 파라미터 관리, 동적 업데이트 및 최적화 병합 기능
├── core/                                 # 거래 핵심 기능 모듈
│   ├── account.py                        # 계좌 및 잔고, 자산 전환 관리
│   └── position.py                       # 포지션 및 실행 내역, 부분 청산 관리
├── data/                                 # 데이터 수집, 저장 및 처리 관련 모듈
│   ├── db/                               # 데이터베이스 관련 모듈
│   │   ├── db_config.py                  # DB 연결 정보 (.env 기반)
│   │   └── db_manager.py                 # DB 테이블 생성, 데이터 삽입/조회 (ON CONFLICT 처리)
│   └── ohlcv/                            # OHLCV 데이터 관련 모듈
│       ├── ohlcv_aggregator.py           # 일별 데이터를 주간 데이터로 집계 및 인디케이터 계산
│       ├── ohlcv_fetcher.py              # ccxt를 이용한 거래소 OHLCV 데이터 수집
│       └── ohlcv_pipeline.py             # 멀티스레딩/캐시를 활용한 데이터 수집 및 DB 저장 파이프라인
├── logs/                                 # 로깅 및 리포트 관련 모듈
│   ├── logger_config.py                  # 로깅 설정 (파일/콘솔/집계 핸들러 구성)
│   ├── aggregating_handler.py            # 로그 집계 및 요약 출력 핸들러
│   ├── final_report.py                   # 최종 성과 및 파라미터 민감도 리포트 생성
│   └── logging_util.py                   # 로그 이벤트 기록 및 로그 파일 관리 유틸리티
├── markets/                              # 시장 레짐 관련 모듈
│   ├── regime_filter.py                  # 단순 가격 변화율 기반 시장 레짐 결정/필터링
│   └── regime_model.py                   # HMM 기반 정교한 시장 레짐 예측 및 재학습 로직
├── strategies/                           # 트레이딩 전략 관련 모듈
│   ├── base_strategy.py                  # 모든 전략이 상속할 기본 인터페이스 정의
│   ├── trading_strategies.py             # 개별 전략 (Select, TrendFollowing, Breakout 등) 및 앙상블 전략
│   ├── optimizer.py                      # Optuna 기반 동적 파라미터 최적화 로직
│   └── param_analysis.py                 # 파라미터 민감도 분석 및 성과 평가 기능
├── trading/                              # 거래 실행 및 리스크 관리 관련 모듈
│   ├── asset_manager.py                  # 자산 배분 및 리밸런싱 관리 (시장 레짐 기반)
│   ├── calculators.py                    # ATR, 동적 스탑/테이크, 트레일링 스탑 등 수치 계산
│   ├── ensemble.py                       # 여러 전략 신호를 결합하여 최종 거래 신호 산출 (앙상블)
│   ├── indicators.py                     # SMA, MACD, RSI, Bollinger Bands 등 기술적 인디케이터 계산
│   ├── risk_manager.py                   # 포지션 사이즈, 리스크 파라미터, 스케일인, 트레일링 스탑 관리
│   └── trade_executor.py                 # 계산 함수 래핑을 통한 주문 실행 로직 구현
└── tests/                                # 테스트 코드 (단위 및 통합 테스트)
    ├── conftest.py                       # 테스트 전 로그 초기화 및 설정
    ├── test_aggregating_handler.py       # AggregatingHandler 로그 집계 기능 테스트
    ├── test_asset_manager.py             # AssetManager 리밸런싱 기능 테스트
    ├── test_base_strategy.py             # BaseStrategy 및 더미 전략 테스트
    ├── test_calculators.py               # ATR, 스탑/테이크, 트레일링 스탑 등 계산기 테스트
    ├── test_config_manager.py            # ConfigManager 설정, 업데이트, 병합 기능 테스트
    ├── test_core_account.py              # Account 클래스 및 잔고 업데이트 테스트
    ├── test_core_position.py             # Position 클래스 실행 내역 및 부분 청산 테스트
    ├── test_ensemble.py                  # 앙상블 전략 신호 산출 기능 테스트
    ├── test_indicators.py                # 기술적 인디케이터 (SMA, MACD, RSI, Bollinger Bands) 테스트
    ├── test_ohlcv_aggregator.py          # OHLCV 주간 집계 및 인디케이터 계산 테스트
    ├── test_optimizer.py                 # 동적 파라미터 최적화 (optimizer) 기능 테스트
    ├── test_param_analysis.py            # 파라미터 민감도 분석 기능 테스트
    ├── test_performance_report.py        # 최종 성과 리포트 출력 기능 테스트
    ├── test_regime_filter.py             # 시장 레짐 필터 기능 테스트
    ├── test_regime_model.py              # HMM 기반 시장 레짐 모델 학습 및 예측 테스트
    ├── test_risk_manager.py              # 포지션 사이즈 및 리스크 파라미터 계산 테스트
    ├── test_strategies.py                # 다양한 트레이딩 전략 신호 기능 테스트
    ├── test_trade_executor.py            # 주문 실행 및 계산 함수 래핑 테스트
    └── test_weekly_strategies.py         # 주간 전략 (Breakout, Momentum) 기능 테스트
