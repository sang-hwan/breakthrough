project/
├── .env                               # 환경변수 파일 (DB 접속 정보, 로깅 설정 등)
├── requirements.txt                   # 프로젝트 의존성 패키지 목록
├── run_parameter_analysis.py          # 파라미터 민감도 분석 실행 스크립트 (Optuna 사용)
├── run_strategy_performance.py        # 최적화 파라미터 기반 백테스트 및 성과 리포트 실행 스크립트
├── backtesting/
│   ├── steps/
│   │   ├── data_loader.py             # 데이터 로드 및 캐시 관리
│   │   ├── hmm_manager.py             # HMM 기반 시장 레짐 업데이트
│   │   ├── indicator_applier.py       # 기술적 인디케이터 적용
│   │   └── order_manager.py           # 주문 처리 및 포지션 관리
│   ├── backtester.py                  # 백테스트 엔진 통합
│   └── performance.py                 # 백테스트 성과 계산 및 리포트 생성
├── config/
│   └── config_manager.py              # 기본 설정 파라미터 관리 및 업데이트
├── core/
│   ├── account.py                     # 계좌 잔고 및 포지션 관리
│   └── position.py                    # 개별 포지션 및 실행 내역 관리
├── data/
│   ├── db/
│   │   ├── db_config.py               # DB 접속 정보 설정 (.env 기반)
│   │   └── db_manager.py              # DB 테이블 생성, 데이터 삽입/조회
│   └── ohlcv/
│       ├── ohlcv_aggregator.py        # 일간 데이터를 주간 데이터로 집계 및 인디케이터 계산
│       ├── ohlcv_fetcher.py           # ccxt를 이용한 OHLCV 데이터 수집 (과거/최신)
│       └── ohlcv_pipeline.py          # 멀티스레딩을 통한 데이터 수집 및 DB 저장 파이프라인
├── logs/
│   ├── aggregating_handler.py         # 로그 집계 및 요약 출력 핸들러
│   ├── final_report.py                # 최종 성과 및 민감도 리포트 생성
│   ├── logger_config.py               # 전체 로깅 설정 (파일 회전, 콘솔, 큐 등)
│   └── logging_util.py                # 이벤트 로깅 및 로그 파일 관리 유틸리티
├── markets/
│   ├── regime_filter.py               # 가격 데이터 기반 시장 레짐 결정 및 필터링
│   └── regime_model.py                # HMM 기반 시장 레짐 모델 (학습, 예측, 재학습)
├── strategies/
│   ├── base_strategy.py               # 전략 기본 인터페이스 (신호 생성 메서드)
│   ├── optimizer.py                   # Optuna 기반 파라미터 최적화
│   ├── param_analysis.py              # 파라미터 민감도 분석 및 백테스트 실행
│   └── trading_strategies.py          # 개별 및 Ensemble 트레이딩 전략 구현
├── trading/
│   ├── asset_manager.py               # 계좌 자산 리밸런싱 관리 (현물/스테이블코인)
│   ├── calculators.py                 # ATR, 동적 손절/이익, 후행 스톱, 부분 청산 목표 계산
│   ├── ensemble.py                    # 여러 전략 신호 종합하여 최종 신호 생성 (앙상블)
│   ├── indicators.py                  # 기술적 인디케이터 계산 (SMA, MACD, RSI, Bollinger Bands)
│   ├── risk_manager.py                # 리스크 관리, 포지션 사이징, 분할 할당, 파라미터 조정
│   └── trade_executor.py              # 거래 실행 관련 계산 함수 호출 및 로깅 처리
└── tests/                             # 단위 및 통합 테스트 파일들
    ├── conftest.py                    # 테스트 전 로그 파일 삭제 및 로거 초기화
    ├── test_aggregating_handler.py    # AggregatingHandler 로그 집계 테스트
    ├── test_asset_manager.py          # AssetManager 리밸런싱 기능 테스트
    ├── test_backtester_integration.py # Backtester 통합 테스트 (더미 데이터 사용)
    ├── test_base_strategy.py          # BaseStrategy 및 더미 전략 테스트
    ├── test_calculators.py            # ATR, 동적 손절/이익, 후행 스톱 등 계산 함수 테스트
    ├── test_config_manager.py         # ConfigManager 기본/업데이트 기능 테스트
    ├── test_core_account.py           # Account 클래스 기능 테스트
    ├── test_core_position.py          # Position 클래스 기능 테스트
    ├── test_data_validation.py        # 데이터 로드 및 날짜 범위 유효성 테스트
    ├── test_ensemble.py               # Ensemble 신호 생성 테스트
    ├── test_exception_logging.py      # 계산 함수 예외 및 로깅 테스트
    ├── test_indicators.py             # SMA, MACD, RSI, Bollinger Bands 인디케이터 테스트
    ├── test_ohlcv_aggregator.py       # OHLCV 집계 및 주간 인디케이터 계산 테스트
    ├── test_ohlcv_variability.py      # OHLCV 데이터의 가격 변동성이 충분한지 여부를 테스트
    ├── test_optimizer.py              # 파라미터 최적화 (Optuna) 테스트
    ├── test_param_analysis.py         # 파라미터 민감도 분석 백테스트 테스트
    ├── test_performance_report.py     # 최종 성과 리포트 출력 테스트
    ├── test_regime_filter.py          # 시장 레짐 결정 및 필터링 테스트
    ├── test_regime_model.py           # HMM 기반 시장 레짐 모델 학습/예측 테스트
    ├── test_risk_manager.py           # RiskManager 기능 테스트 (포지션 사이징, 파라미터 조정)
    ├── test_strategies.py             # 개별 및 Ensemble 전략 신호 생성 테스트
    ├── test_trade_executor.py         # TradeExecutor 계산 및 거래 실행 관련 테스트
    └── test_weekly_strategies.py      # 주간 전략 (돌파, 모멘텀) 테스트
