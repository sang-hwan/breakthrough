[프로젝트 파일 목록]
**project_root**
- .env
- requirements.txt
- run_parameter_analysis.py
- run_strategy_performance.py

**backtesting**
- backtesting/backtester.py
- backtesting/performance.py

**data_collection**
- data_collection/db_config.py
- data_collection/db_manager.py
- data_collection/ohlcv_aggregator.py
- data_collection/ohlcv_fetcher.py
- data_collection/ohlcv_pipeline.py

**logs**
- logs/aggregating_handler.py
- logs/final_report.py
- logs/logger_config.py
- logs/logging_util.py

**markets_analysis**
- markets_analysis/hmm_model.py
- markets_analysis/regime_filter.py

**strategy_tuning**
- strategy_tuning/dynamic_param_manager.py
- strategy_tuning/optimizer.py
- strategy_tuning/parameter_analysis.py

**tests**
- tests/conftest.py
- tests/test_auto_optimization_trigger.py
- tests/test_handle_weekly_end.py
- tests/test_logging_summary.py
- tests/test_ohlcv_aggregator.py
- tests/test_performance_report.py
- tests/test_weekly_strategies.py

**trading**
- trading/account.py
- trading/asset_manager.py
- trading/ensemble_manager.py
- trading/indicators.py
- trading/positions.py
- trading/risk_manager.py
- trading/strategies.py
- trading/trade_manager.py



[로그 개선]
1. 파일별 집계 모듈 (예: file_aggregation.py)
   - 각 파일에 대한 로그 발생 건수를 누적 및 관리
   - 파일별 임계치 설정과 요약 로직을 처리하는 클래스/함수 포함

2. 함수별 집계 모듈 (예: function_aggregation.py)
   - 각 파일 내 함수의 호출 빈도 및 로그 정보 관리
   - 함수별 임계치나 요약 정책을 독립적으로 처리하는 클래스/함수 포함

3. 요약 및 집계 조정 모듈 (예: summary_aggregator.py)
   - 집계된 데이터를 분석하여 최종 요약 메시지를 생성
   - “파일별 총 n회 호출, 주요 함수별 m회 호출” 등 종합 리포트 생성 기능 포함

1. 모듈 분리
   - 파일별 집계를 담당하는 모듈(file_aggregation.py)
   - 함수별 집계를 담당하는 모듈(function_aggregation.py)
   - 전체 요약 및 집계를 담당하는 모듈(summary_aggregator.py)
   - logger_config.py에서는 위 모듈들을 import하여 설정만 담당

2. 로그 파일 분리
   - 일반 로그는 project.log 등에 기록
   - 파일별, 함수별 집계 결과를 각각 별도 파일(예: aggregated_file.log, aggregated_function.log)에 기록
   - 전체 요약 정보를 별도 파일(예: aggregated_summary.log)에 기록하여 집계 내용을 정리

3. 환경변수 활용
   - AGG_THRESHOLD_FILE, AGG_THRESHOLD_FUNCTION 등 임계치 관련 환경변수를 사용
   - .env 파일 또는 시스템 환경변수를 통해 유연하게 조정 가능

4. 모듈별 설정 및 확장성
   - setup_logger() 함수를 통해 모듈 이름에 따라 집계 핸들러를 동적으로 추가
   - 모듈별 로거에 임계치 등을 적용하여 특정 모듈만 별도로 집계 가능
   - 향후 집계 방식 변경이나 새로운 로깅 요구사항이 생겨도 각 모듈을 독립적으로 수정 가능

5. 유지보수성 및 가독성 향상
   - 파일별, 함수별 집계 로직을 분리하여 코드 복잡도를 낮춤
   - logger_config.py는 설정 등록만 담당하여 로깅 관련 책임을 명확히 분리
   - 문제 발생 시 집계 기능, 일반 로그 기능을 각각 쉽게 디버깅 가능



[프로젝트 리팩토링 계획]
**모듈별 책임 분리 및 인터페이스 개선**
1) **모듈 경계 재정의**  
   - 데이터 수집, 백테스팅, 리스크 관리, 거래 실행, 전략, 로그 관리 등 각 모듈이 단일 책임 원칙(SRP)에 부합하도록 인터페이스를 재정의해 주세요.  
   - 예: 백테스터의 경우 데이터 전처리, 인디케이터 적용, 포지션 관리를 담당하는 메서드를 분리하고, 각 메서드의 입력/출력 인터페이스를 명확히 해 주세요.
2) **공통 인터페이스 추출**  
   - 중복되는 로직(로깅, 에러 처리, 데이터 포맷 변환 등)은 별도의 유틸리티 모듈로 추출해 주세요.  
   - 모듈들이 의존하는 인터페이스(예: TradingStrategies, RiskManager)를 추상화하고, 확장 가능하게 리팩토링해 주세요.

**로깅 및 에러 핸들링 중앙화**
1) **로깅 설정 통합**  
   - logs/logger_config.py 등의 중앙 로깅 설정을 유지하면서, 각 모듈에서 로거를 간결하게 불러올 수 있도록 유틸리티 함수를 재검토해 주세요.  
   - AggregatingHandler(특수 로깅 핸들러)가 일관되게 동작하도록 로깅 설정을 재정의해 주세요.
2) **일관된 에러 처리**  
   - 모듈별로 발생할 수 있는 예외를 통합적으로 처리할 수 있도록 커스텀 예외 클래스를 도입하거나, 로깅과 함께 예외를 일정한 방식으로 전파해 주세요.  
   - 테스트를 통해 예외 처리 로직이 올바르게 동작하는지 검증해 주세요.

**중복 코드 및 복잡도 감소**
1) **중복 로직 제거**  
   - 예: calculate_partial_exit_targets 등의 함수를 공통 모듈로 통합하고, risk_manager와 trade_manager 등에서 중복되는 기능을 제거해 주세요.  
   - 여러 전략에서 반복되는 신호 판별 로직(candle pattern, SMA/RSI, Bollinger Bands 등)을 공통 헬퍼 함수로 추출해 주세요.
2) **메서드 단일 책임 원칙 준수**  
   - 한 메서드가 너무 많은 기능을 수행하고 있다면, 기능별로 분리해 가독성을 높여 주세요.  
   - 예: 백테스트 루프 내의 조건 분기나 로그 기록을 별도 메서드로 떼어내 주세요.

**테스트 코드 정비 및 커버리지 강화**
1) **테스트 케이스 리팩토링**  
   - conftest.py 및 각 모듈의 테스트가 실제 인터페이스와 기대 결과를 정확히 검사하고 있는지 확인하고, 부족한 시나리오를 추가해 주세요.  
   - 리스크 파라미터, 전략 신호, 로깅 요약, 주간/단기 전략 등 다양한 시나리오를 테스트해 주세요.

**성능 및 확장성 검토**
1) **백테스트 성능 최적화**  
   - 대용량 데이터 처리 시 불필요한 반복 계산이나 메모리 사용을 최소화해 주세요.  
   - 벡터화 연산 등으로 데이터프레임 조작을 최적화해 주세요.
2) **모듈 확장성 고려**  
   - 새로운 전략, 리스크 관리, 시장 분석 모듈을 추가하기 쉽게 인터페이스를 유연하게 설계해 주세요.  
   - 플러그인 방식 또는 설정 파일을 통해 다양한 전략을 동적으로 선택할 수 있는 구조를 검토해 주세요.

**최종 검토 및 배포 준비**
1) **최종 테스트**  
   - 모든 테스트 케이스가 성공하는지 확인하고, 주요 기능(데이터 수집, 백테스트, 전략 신호, 리스크 관리, 자산 배분 등)을 실제 데이터로 시뮬레이션해 주세요.



[프로젝트 내 주석 수정 조건]
1) 통일된 주석 스타일 채택
   - 전체 코드에서 동일한 주석 방식과 어조를 유지

2) 모듈(docstring)
   - 파일 최상단에 모듈의 역할 및 개요를 설명
   - 다른 개발자가 빠르게 이해할 수 있도록 간단히 요약

3) 클래스/함수/메서드 docstring
   - 목적, 인자, 반환값, 예외 사항 등을 명시
   - “이 함수(또는 클래스)는 무엇을 하는가?”에 대한 답을 가장 먼저 기술

4) 인라인 주석
   - 코드의 주요 흐름이나 복잡한 알고리즘을 짧고 일관되게 설명
   - 코드 라인 옆에 간결하게 달아, 읽는 이가 로직을 빠르게 이해하도록 돕기

5) 쉬운 용어 사용
   - Python 초보자도 이해할 수 있도록 기술 용어나 줄임말을 최소화
   - 파이썬 문법·함수 설명 시 간단한 예시나 비유를 함께 제시

6) 트레이딩 관련 용어 설명
   - risk_per_trade, take_profit, stop_loss 등은 초보자를 위해 간단히 정의
   - 전문 용어 대신 실제 예시나 간단 문장으로 개념 전달

7) 전략 로직 개념화
   - 주간 전략, 모멘텀 분석, HMM 모델 학습 등은 “이 로직이 무엇을 목표로 하는가?”를 먼저 명시
   - 동작 원리를 평이한 용어로 부연 설명

8) 데이터 처리 과정 상세화
   - OHLCV 집계, 주간 캔들 생성 등 단계별 처리 방식을 순서대로 설명
   - “왜 이 방식으로 처리하는가?”를 간략히 언급

9) 목적 중심의 주석
   - “이 함수(또는 로직)는 무엇을 위해 존재하는가?”를 상단에 적고
   - 복잡한 부분마다 “왜 이러한 방법을 택했는가?”를 설명

10) 일관된 포맷 및 문체 유지
    - docstring 형식(예: “입력: …”, “반환: …”, “예외: …”)을 파일 전체에 동일하게 적용
    - 코드 블록과 주석 사이 간격, 들여쓰기 규칙 등을 한 가지 스타일로 통일

11) 외부 문서·링크 제공
    - 추가 설명이 필요한 부분에는 공식 문서나 관련 자료의 URL을 주석에 기재
    - 협업 중이라면 공유 가능한 레퍼런스나 스펙 문서 링크 추가



[README.md 파일 작성 조건]
1) 프로젝트 개요와 목적
   - 프로젝트가 해결하고자 하는 문제와 주요 기능(데이터 수집, 백테스트, 파라미터 최적화, 실시간 거래 등)에 대한 간단한 설명
   - 주간 데이터 집계, 주간 전략, 강화된 리스크 관리 기능 소개

2) 설치 및 환경 설정 안내
   - 필수 의존성 목록(예: Python 버전, 라이브러리)과 설치 방법
   - .env 파일 등 환경 변수 설정 방법 및 예시
   - 데이터베이스 설정 및 연결 방식 안내

3) 프로젝트 구조 설명
   - 주요 폴더(data_collection, trading, backtesting, strategy_tuning, logs, tests 등)와 각 폴더의 역할
   - 모듈 간 상호작용 방식(백테스터 → 데이터 로드 → 인디케이터 계산 → 포지션 관리 → 리스크 관리 흐름 등)

4) 사용법 및 실행 방법
   - 데이터 수집, 백테스트, 파라미터 최적화, 실시간 거래 등의 실행 스크립트(run_strategy_performance.py, run_parameter_analysis.py 등) 활용 방법
   - 명령어 예시 및 실행 시 예상 출력(최종 성과 리포트, 최적화 결과 등)

5) 테스트 및 검증 안내
   - 유닛 테스트 실행 방법(pytest 등)과 테스트 커버리지 소개
   - 신규 유닛 테스트 케이스 예시(주간 데이터 집계, 주간 전략, 주간 종료 시 포지션 청산 등)

6) 설정 가능한 파라미터 및 커스터마이징
   - 동적 파라미터 관리, 주간 전략 파라미터(weekly_breakout_threshold, weekly_momentum_threshold 등) 설정 방법
   - 로그 설정(예: AggregatingHandler 임계치, 로깅 레벨) 및 사용자 정의 방법

7) 문제 해결 및 FAQ
   - 실행 중 발생 가능 문제와 해결책
   - 참고할 수 있는 문서나 커뮤니티 링크

8) 라이선스 및 기여 방법
   - 프로젝트 라이선스 정보
   - 기여 가이드라인(코드 컨벤션, 풀 리퀘스트 절차 등)

9) 시각적 자료 활용
   - 프로젝트 아키텍처 다이어그램, 데이터 흐름도, 전략 로직 플로우 차트 등을 통해 전체 구조와 로직 이해를 돕기
