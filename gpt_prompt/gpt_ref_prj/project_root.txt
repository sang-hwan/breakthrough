**.env**
# Database 설정
DB_USER=postgres
DB_PASSWORD=1234
DB_HOST=localhost
DB_PORT=5432
DB_NAME=my_trading_db

# 로깅 관련 설정
ENVIRONMENT=development
LOG_LEVEL=INFO
LOG_DETAIL_LEVEL=DEBUG

---

**requirements.txt**
pandas
numpy
SQLAlchemy
psycopg2-binary
optuna
ta
ccxt
hmmlearn
python-dotenv
pytest

---

# run_parameter_analysis.py
import argparse
import logging
import numpy as np
from logs.logger_config import setup_logger, initialize_root_logger
from logs.logging_util import LoggingUtil
from strategies.param_analysis import run_sensitivity_analysis
from logs.final_report import generate_parameter_sensitivity_report

def parse_args():
    parser = argparse.ArgumentParser(
        description="Run parameter sensitivity analysis for trading strategies."
    )
    parser.add_argument("--param_names", type=str, 
                        default="profit_ratio,atr_multiplier,risk_per_trade,scale_in_threshold,weekly_breakout_threshold,weekly_momentum_threshold",
                        help="Comma-separated list of parameter names to analyze.")
    parser.add_argument("--param_steps", type=int, default=3, 
                        help="Number of steps for each parameter (default: 3)")
    parser.add_argument("--assets", type=str, default="BTC/USDT", 
                        help="Comma-separated list of assets (default: BTC/USDT)")
    parser.add_argument("--short_tf", type=str, default="4h", 
                        help="Short time frame (default: 4h)")
    parser.add_argument("--long_tf", type=str, default="1d", 
                        help="Long time frame (default: 1d)")
    parser.add_argument("--start_date", type=str, default="2018-06-01", 
                        help="Start date for data")
    parser.add_argument("--end_date", type=str, default="2020-12-31", 
                        help="End date for data")
    parser.add_argument("--periods", type=str, default="", 
                        help="Optional multiple periods in format start1:end1;start2:end2, etc.")
    return parser.parse_args()

def parse_assets(asset_str):
    return [asset.strip() for asset in asset_str.split(",") if asset.strip()]

def parse_periods(periods_str, default_start, default_end):
    if not periods_str:
        return [(default_start, default_end)]
    period_list = []
    for pair in periods_str.split(";"):
        if pair:
            try:
                s, e = pair.split(":")
                period_list.append((s.strip(), e.strip()))
            except Exception as e:
                logging.getLogger(__name__).error(f"Error parsing period pair '{pair}': {e}", exc_info=True)
    return period_list if period_list else [(default_start, default_end)]

def run_parameter_analysis():
    # 기존 로그 파일 삭제 및 루트 로거 초기화
    LoggingUtil.clear_log_files()
    initialize_root_logger()

    args = parse_args()
    logger = setup_logger(__name__)
    logger.debug("Starting parameter sensitivity analysis.")

    assets = parse_assets(args.assets)
    periods = parse_periods(args.periods, args.start_date, args.end_date)

    from config.config_manager import ConfigManager
    cm = ConfigManager()
    defaults = cm.get_defaults()
    param_names = [p.strip() for p in args.param_names.split(",") if p.strip()]
    param_settings = {}
    for pname in param_names:
        if pname not in defaults:
            logger.warning(f"Parameter {pname} not found in default parameters. Skipping.")
            continue
        try:
            default_val = float(defaults[pname])
        except Exception:
            logger.warning(f"Parameter {pname} is not numeric. Skipping.")
            continue
        start_val = default_val * 0.9
        end_val = default_val * 1.1
        param_settings[pname] = np.linspace(start_val, end_val, args.param_steps)
        logger.info(f"Analyzing {pname} over range {start_val:.4f} to {end_val:.4f}")

    results_all = run_sensitivity_analysis(
        param_settings, assets, args.short_tf, args.long_tf, args.start_date, args.end_date, periods
    )
    report_title = "Multi-Parameter Analysis: " + ", ".join([str(k) for k in results_all.keys()])
    generate_parameter_sensitivity_report(report_title, results_all)

if __name__ == "__main__":
    run_parameter_analysis()

---

# run_strategy_performance.py
from logs.logger_config import setup_logger, initialize_root_logger
from logs.logging_util import LoggingUtil
from strategies.optimizer import DynamicParameterOptimizer
from backtesting.backtester import Backtester
from backtesting.performance import compute_performance
from logs.final_report import generate_final_report
from config.config_manager import ConfigManager

def run_strategy_performance():
    # 기존 로그 파일 삭제 및 루트 로거 초기화
    LoggingUtil.clear_log_files()
    initialize_root_logger()

    logger = setup_logger(__name__)
    logger.debug("Starting full project test.")

    # 파라미터 최적화 (Walk-Forward 방식)
    logger.debug("Starting Walk-Forward parameter optimization.")
    optimizer = DynamicParameterOptimizer(n_trials=10)
    best_trial = optimizer.optimize()

    # 기본 파라미터와 최적화된 파라미터 병합
    config_manager = ConfigManager()
    best_params = config_manager.merge_optimized(best_trial.params)
    logger.debug(f"Optimal parameters determined: {best_params}")

    # 각 심볼별 백테스트 실행
    start_date = "2018-06-01"
    end_date = "2025-02-01"
    timeframes = {"short_tf": "4h", "long_tf": "1d"}
    symbols = ["BTC/USDT", "ETH/USDT", "XRP/USDT"]

    for symbol in symbols:
        symbol_key = symbol.replace("/", "").lower()
        backtester = Backtester(symbol=symbol, account_size=10000)
        try:
            backtester.load_data(
                short_table_format=f"ohlcv_{symbol_key}_{{timeframe}}",
                long_table_format=f"ohlcv_{symbol_key}_{{timeframe}}",
                short_tf=timeframes["short_tf"],
                long_tf=timeframes["long_tf"],
                start_date=start_date,
                end_date=end_date,
                use_weekly=True
            )
        except Exception as e:
            logger.error(f"Data load failed for {symbol}: {e}")
            continue

        try:
            trades, _ = backtester.run_backtest(dynamic_params=best_params)
            logger.debug(f"Backtest complete for {symbol}: {len(trades)} trades executed.")
        except Exception as e:
            logger.error(f"Backtest error for {symbol}: {e}")
            continue

        if trades:
            performance_data = compute_performance(trades, weekly_data=backtester.df_weekly)
            generate_final_report(performance_data, symbol=symbol)
        else:
            logger.debug(f"No trades executed for {symbol}.")

    logger.debug("Project test complete.")

if __name__ == "__main__":
    run_strategy_performance()
