# strategies/base_strategy.py
from logs.logger_config import setup_logger

class BaseStrategy:
    def __init__(self):
        self.logger = setup_logger(self.__class__.__name__)
    
    def get_signal(self, data, current_time, **kwargs):
        raise NotImplementedError("Subclasses must implement get_signal()")

---

# strategies/optimizer.py
import optuna
from logs.logger_config import setup_logger
from backtesting.backtester import Backtester
from config.config_manager import ConfigManager

logger = setup_logger(__name__)

class DynamicParameterOptimizer:
    def __init__(self, n_trials=10):
        self.n_trials = n_trials
        self.study = None
        self.config_manager = ConfigManager()

    def objective(self, trial):
        try:
            base_params = self.config_manager.get_defaults()
            suggested_params = {
                "hmm_confidence_threshold": trial.suggest_float("hmm_confidence_threshold", 0.7, 0.95),
                "liquidity_info": trial.suggest_categorical("liquidity_info", ["high", "low"]),
                "atr_multiplier": trial.suggest_float("atr_multiplier", 1.5, 3.0),
                "profit_ratio": trial.suggest_float("profit_ratio", 0.05, 0.15),
                "risk_per_trade": trial.suggest_float("risk_per_trade", 0.005, 0.02),
                "scale_in_threshold": trial.suggest_float("scale_in_threshold", 0.01, 0.03),
                "partial_exit_ratio": trial.suggest_float("partial_exit_ratio", 0.4, 0.6),
                "partial_profit_ratio": trial.suggest_float("partial_profit_ratio", 0.02, 0.04),
                "final_profit_ratio": trial.suggest_float("final_profit_ratio", 0.05, 0.1),
                "weekly_breakout_threshold": trial.suggest_float("weekly_breakout_threshold", 0.005, 0.02),
                "weekly_momentum_threshold": trial.suggest_float("weekly_momentum_threshold", 0.3, 0.7)
            }
            dynamic_params = {**base_params, **suggested_params}

            assets = ["BTC/USDT", "ETH/USDT", "XRP/USDT"]
            splits = [{
                "train_start": "2018-06-01",
                "train_end": "2020-12-31",
                "test_start": "2021-01-01",
                "test_end": "2023-12-31"
            }]
            holdout = {"holdout_start": "2024-01-01", "holdout_end": "2025-02-01"}

            total_score, num_evaluations = 0.0, 0
            for split in splits:
                for asset in assets:
                    symbol_key = asset.replace("/", "").lower()

                    # Training backtest
                    bt_train = Backtester(symbol=asset, account_size=10000)
                    bt_train.load_data(
                        short_table_format=f"ohlcv_{symbol_key}_{{timeframe}}",
                        long_table_format=f"ohlcv_{symbol_key}_{{timeframe}}",
                        short_tf="4h", long_tf="1d",
                        start_date=split["train_start"], end_date=split["train_end"]
                    )
                    try:
                        trades_train, _ = bt_train.run_backtest(dynamic_params)
                    except Exception:
                        return 1e6
                    roi_train = sum(trade["pnl"] for trade in trades_train) / 10000 * 100

                    # Test backtest
                    bt_test = Backtester(symbol=asset, account_size=10000)
                    bt_test.load_data(
                        short_table_format=f"ohlcv_{symbol_key}_{{timeframe}}",
                        long_table_format=f"ohlcv_{symbol_key}_{{timeframe}}",
                        short_tf="4h", long_tf="1d",
                        start_date=split["test_start"], end_date=split["test_end"]
                    )
                    try:
                        trades_test, _ = bt_test.run_backtest(dynamic_params)
                    except Exception:
                        return 1e6
                    roi_test = sum(trade["pnl"] for trade in trades_test) / 10000 * 100

                    # Holdout backtest
                    bt_holdout = Backtester(symbol=asset, account_size=10000)
                    bt_holdout.load_data(
                        short_table_format=f"ohlcv_{symbol_key}_{{timeframe}}",
                        long_table_format=f"ohlcv_{symbol_key}_{{timeframe}}",
                        short_tf="4h", long_tf="1d",
                        start_date=holdout["holdout_start"], end_date=holdout["holdout_end"]
                    )
                    try:
                        trades_holdout, _ = bt_holdout.run_backtest(dynamic_params)
                    except Exception:
                        return 1e6
                    roi_holdout = sum(trade["pnl"] for trade in trades_holdout) / 10000 * 100

                    overfit_penalty = abs(roi_train - roi_test)
                    holdout_penalty = 0 if roi_holdout >= 2.0 else (2.0 - roi_holdout) * 10
                    score = -roi_test + overfit_penalty + holdout_penalty
                    total_score += score
                    num_evaluations += 1

            avg_score = total_score / num_evaluations if num_evaluations else total_score
            reg_penalty = 0.1 * sum(
                (dynamic_params.get(key, base_params.get(key, 1.0)) - base_params.get(key, 1.0)) ** 2
                for key in ["atr_multiplier", "profit_ratio", "risk_per_trade", "scale_in_threshold",
                            "weekly_breakout_threshold", "weekly_momentum_threshold"]
            )
            return avg_score + reg_penalty

        except Exception:
            return 1e6

    def optimize(self):
        sampler = optuna.samplers.TPESampler(seed=42)
        self.study = optuna.create_study(direction="minimize", sampler=sampler)
        self.study.optimize(self.objective, n_trials=self.n_trials)
        best_trial = self.study.best_trial
        logger.debug(f"Best trial: {best_trial.number}, Value: {best_trial.value:.2f}")
        logger.debug(f"Best parameters: {best_trial.params}")
        return best_trial

---

# strategies/param_analysis.py
import numpy as np
from itertools import product
import random
from logs.logger_config import setup_logger
from backtesting.backtester import Backtester
from config.config_manager import ConfigManager

logger = setup_logger(__name__)

def run_sensitivity_analysis(param_settings,
                             assets=["BTC/USDT"],
                             short_tf="4h", long_tf="1d",
                             start_date="2018-06-01", end_date="2020-12-31",
                             periods=None,
                             base_dynamic_params=None,
                             max_combinations=20):
    if periods is None:
        periods = [(start_date, end_date)]
    if base_dynamic_params is None:
        base_dynamic_params = ConfigManager().get_defaults()

    logger.debug(f"Starting sensitivity analysis over assets {assets}")
    results = {}
    param_names = list(param_settings.keys())
    combinations = list(product(*(param_settings[name] for name in param_names)))
    if len(combinations) > max_combinations:
        combinations = random.sample(combinations, max_combinations)

    for combo in combinations:
        dynamic_params = base_dynamic_params.copy()
        combo_key = tuple(sorted(zip(param_names, combo)))
        run_metrics = []
        for asset in assets:
            for s_date, e_date in periods:
                try:
                    bt = Backtester(symbol=asset, account_size=10000)
                    symbol_key = asset.replace("/", "").lower()
                    bt.load_data(
                        short_table_format=f"ohlcv_{symbol_key}_{{timeframe}}",
                        long_table_format=f"ohlcv_{symbol_key}_{{timeframe}}",
                        short_tf=short_tf, long_tf=long_tf,
                        start_date=s_date, end_date=e_date
                    )
                    for name, val in combo_key:
                        dynamic_params[name] = val
                    trades, _ = bt.run_backtest(dynamic_params=dynamic_params)
                    from backtesting.performance import compute_performance
                    perf = compute_performance(trades)
                    run_metrics.append(perf)
                except Exception:
                    continue
        if run_metrics:
            aggregated = {}
            for key in ["roi", "sharpe_ratio", "max_drawdown", "trade_count", "cumulative_return", "total_pnl"]:
                values = [run.get(key, 0) for run in run_metrics]
                aggregated[key] = {
                    "mean": np.mean(values),
                    "std": np.std(values),
                    "min": np.min(values),
                    "max": np.max(values)
                }
            results[combo_key] = aggregated
        else:
            results[combo_key] = None
    return results

---

# strategies/trading_strategies.py
from logs.logger_config import setup_logger
from strategies.base_strategy import BaseStrategy
from markets.regime_filter import determine_weekly_extreme_signal

class SelectStrategy(BaseStrategy):
    def __init__(self):
        super().__init__()
        self.previous_signal = None

    def _get_candle_pattern_signal(self, row):
        open_price = row.get('open')
        close_price = row.get('close')
        if open_price is None or close_price is None:
            return None
        return "bullish" if close_price > open_price * 1.005 else ("bearish" if close_price < open_price * 0.99 else None)

    def _get_sma_rsi_signal(self, row, previous_sma):
        sma = row.get('sma')
        rsi = row.get('rsi')
        return "enter_long" if sma is not None and previous_sma is not None and sma > previous_sma and rsi is not None and rsi < 35 else "hold"

    def _get_bb_signal(self, row):
        bb_lband = row.get('bb_lband')
        close_price = row.get('close', 0)
        return "enter_long" if bb_lband is not None and close_price <= bb_lband * 1.002 else "hold"

    def get_signal(self, data, current_time, **kwargs):
        try:
            current_row = data.loc[current_time]
        except Exception:
            return "hold"
        signals = [
            "enter_long" if self._get_candle_pattern_signal(current_row) == "bullish" else "hold",
            self._get_sma_rsi_signal(
                current_row,
                data.loc[:current_time].iloc[-2].get('sma') if len(data.loc[:current_time]) > 1 else current_row.get('sma')
            ),
            self._get_bb_signal(current_row)
        ]
        final_signal = "enter_long" if "enter_long" in signals else "hold"
        if self.previous_signal != final_signal:
            self.logger.debug(f"SelectStrategy signal changed to {final_signal} at {current_time}")
            self.previous_signal = final_signal
        return final_signal

class TrendFollowingStrategy(BaseStrategy):
    def __init__(self):
        super().__init__()
        self.previous_signal = None

    def get_signal(self, data, current_time, **kwargs):
        try:
            row = data.loc[current_time]
        except Exception:
            return "hold"
        final_signal = "enter_long" if row.get('sma') is not None and row.get('close') > row.get('sma') else "hold"
        if self.previous_signal != final_signal:
            self.logger.debug(f"TrendFollowingStrategy signal changed to {final_signal} at {current_time}")
            self.previous_signal = final_signal
        return final_signal

class BreakoutStrategy(BaseStrategy):
    def __init__(self, window=20):
        super().__init__()
        self.window = window
        self.previous_signal = None

    def get_signal(self, data, current_time, **kwargs):
        try:
            data_sub = data.loc[:current_time]
            if len(data_sub) < self.window:
                final_signal = "hold"
            else:
                recent_high = data_sub['high'].iloc[-self.window:].max()
                final_signal = "enter_long" if data.loc[current_time, 'close'] > recent_high else "hold"
        except Exception:
            final_signal = "hold"
        if self.previous_signal != final_signal:
            self.logger.debug(f"BreakoutStrategy signal changed to {final_signal} at {current_time}")
            self.previous_signal = final_signal
        return final_signal

class CounterTrendStrategy(BaseStrategy):
    def __init__(self):
        super().__init__()
        self.previous_signal = None

    def get_signal(self, data, current_time, **kwargs):
        try:
            row = data.loc[current_time]
        except Exception:
            return "hold"
        rsi = row.get('rsi')
        if rsi is not None:
            final_signal = "enter_long" if rsi < 30 else ("exit_all" if rsi > 70 else "hold")
        else:
            final_signal = "hold"
        if self.previous_signal != final_signal:
            self.logger.debug(f"CounterTrendStrategy signal changed to {final_signal} at {current_time} (RSI: {rsi})")
            self.previous_signal = final_signal
        return final_signal

class HighFrequencyStrategy(BaseStrategy):
    def __init__(self):
        super().__init__()
        self.previous_signal = None

    def get_signal(self, data, current_time, **kwargs):
        try:
            idx = data.index.get_loc(current_time)
            if idx == 0:
                final_signal = "hold"
            else:
                current_row = data.iloc[idx]
                prev_row = data.iloc[idx - 1]
                cp, pp = current_row.get('close'), prev_row.get('close')
                if cp is None or pp is None:
                    final_signal = "hold"
                else:
                    threshold = 0.002
                    price_change = (cp - pp) / pp
                    final_signal = "enter_long" if price_change > threshold else ("exit_all" if price_change < -threshold else "hold")
        except Exception:
            final_signal = "hold"
        if self.previous_signal != final_signal:
            self.logger.debug(f"HighFrequencyStrategy signal changed to {final_signal} at {current_time}")
            self.previous_signal = final_signal
        return final_signal

class WeeklyBreakoutStrategy(BaseStrategy):
    def __init__(self):
        super().__init__()
        self.previous_signal = None

    def get_signal(self, data_weekly, current_time, breakout_threshold=0.01, **kwargs):
        try:
            weekly_data = data_weekly.loc[data_weekly.index <= current_time]
            if len(weekly_data) < 2:
                return "hold"
            prev_week = weekly_data.iloc[-2]
            current_week = weekly_data.iloc[-1]
            # 신규: 주간 극값 신호 판단 (주간 저점 매수/고점 매도)
            price_data = {"current_price": current_week.get('close')}
            weekly_extremes = {"weekly_low": prev_week.get('low'), "weekly_high": prev_week.get('high')}
            extreme_signal = determine_weekly_extreme_signal(price_data, weekly_extremes, threshold=breakout_threshold)
            if extreme_signal:
                signal = extreme_signal
            else:
                # 기존 돌파 로직
                if current_week.get('close') >= prev_week.get('high') * (1 + breakout_threshold):
                    signal = "enter_long"
                elif current_week.get('close') <= prev_week.get('low') * (1 - breakout_threshold):
                    signal = "exit_all"
                else:
                    signal = "hold"
            if self.previous_signal != signal:
                self.logger.debug(f"WeeklyBreakoutStrategy signal changed to {signal} at {current_time}")
                self.previous_signal = signal
            return signal
        except Exception:
            return "hold"

class WeeklyMomentumStrategy(BaseStrategy):
    def __init__(self):
        super().__init__()
        self.previous_signal = None

    def get_signal(self, data_weekly, current_time, momentum_threshold=0.5, **kwargs):
        try:
            weekly_data = data_weekly.loc[data_weekly.index <= current_time]
            if weekly_data.empty:
                return "hold"
            momentum = weekly_data.iloc[-1].get('weekly_momentum')
            if momentum is None:
                return "hold"
            signal = "enter_long" if momentum >= momentum_threshold else ("exit_all" if momentum <= -momentum_threshold else "hold")
            if self.previous_signal != signal:
                self.logger.debug(f"WeeklyMomentumStrategy signal changed to {signal} at {current_time}")
                self.previous_signal = signal
            return signal
        except Exception:
            return "hold"

class TradingStrategies:
    def __init__(self):
        self.logger = setup_logger(self.__class__.__name__)
        from trading.ensemble import Ensemble
        self.ensemble = Ensemble()
        self.weekly_breakout = self.ensemble.weekly_breakout_strategy
        self.weekly_momentum = self.ensemble.weekly_momentum_strategy

    def get_final_signal(self, market_regime, liquidity_info, data, current_time, data_weekly=None, **kwargs):
        # 우선 Ensemble의 최종 신호를 획득
        ensemble_signal = self.ensemble.get_final_signal(market_regime, liquidity_info, data, current_time, data_weekly, **kwargs)
        # HMM 기반 시장 레짐에 따른 신호 override (예: bearish이면 강제 청산)
        if market_regime == "bearish":
            self.logger.debug("Market regime bearish: overriding final signal to exit_all")
            return "exit_all"
        elif market_regime == "bullish":
            self.logger.debug("Market regime bullish: ensuring signal is at least enter_long")
            return "enter_long" if ensemble_signal == "hold" else ensemble_signal
        return ensemble_signal
