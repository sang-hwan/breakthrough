[trading]
# trading/account.py
from logs.logger_config import setup_logger

logger = setup_logger(__name__)

class Account:
    def __init__(self, initial_balance, fee_rate=0.001):
        """
        초기 잔고는 모두 현물(spot) 자산으로 간주하며,
        fee_rate는 거래 시 적용되는 수수료율입니다.
        """
        self.initial_balance = initial_balance
        self.spot_balance = initial_balance
        self.stablecoin_balance = 0.0
        self.fee_rate = fee_rate
        self.positions = []  # 보유 중인 포지션 리스트

    def add_position(self, position):
        self.positions.append(position)
        logger.debug(f"포지션 추가: {position.position_id}")

    def remove_position(self, position):
        if position in self.positions:
            self.positions.remove(position)
            logger.debug(f"포지션 제거: {position.position_id}")

    def get_used_balance(self):
        """현재 포지션들로 인해 사용된 금액 계산 (수수료 포함)"""
        used = 0.0
        for pos in self.positions:
            for exec_record in pos.executions:
                if not exec_record.get("closed", False):
                    used += exec_record["entry_price"] * exec_record["size"] * (1 + self.fee_rate)
        return used

    def get_available_balance(self):
        """현물 잔고에서 사용 중 금액을 제외한 가용 현금 반환"""
        return self.spot_balance - self.get_used_balance()

    def update_after_trade(self, trade):
        """
        체결된 거래의 pnl을 반영하여 잔고를 업데이트합니다.
        (pnl이 음수면 손실, 양수면 수익으로 반영)
        """
        pnl = trade.get("pnl", 0.0)
        self.spot_balance += pnl
        logger.debug(f"거래 후 업데이트: pnl={pnl:.2f}, 현물 잔고={self.spot_balance:.2f}")

    def convert_to_stablecoin(self, amount, conversion_fee=0.001):
        """
        현물 자산 일부를 스테이블코인으로 전환합니다.
        전환 수수료를 반영하며, 가용 잔액을 초과할 경우 가능한 만큼 전환합니다.
        """
        available = self.get_available_balance()
        if amount > available:
            amount = available
        fee = amount * conversion_fee
        net_amount = amount - fee
        self.spot_balance -= amount
        self.stablecoin_balance += net_amount
        logger.debug(f"convert_to_stablecoin: 전환액={amount:.2f}, 수수료={fee:.2f}, 전환 후 현물 잔고={self.spot_balance:.2f}")
        return net_amount

    def convert_to_spot(self, amount, conversion_fee=0.001):
        """
        스테이블코인 일부를 현물 자산으로 전환합니다.
        """
        if amount > self.stablecoin_balance:
            amount = self.stablecoin_balance
        fee = amount * conversion_fee
        net_amount = amount - fee
        self.stablecoin_balance -= amount
        self.spot_balance += net_amount
        logger.debug(f"convert_to_spot: 전환액={amount:.2f}, 수수료={fee:.2f}, 전환 후 현물 잔고={self.spot_balance:.2f}")
        return net_amount

    def __str__(self):
        return (f"Account(spot_balance={self.spot_balance:.2f}, "
                f"stablecoin_balance={self.stablecoin_balance:.2f}, "
                f"available_balance={self.get_available_balance():.2f})")

---

# trading/asset_manager.py
from logs.logger_config import setup_logger
from datetime import datetime, timedelta

class AssetManager:
    def __init__(self, account, min_rebalance_threshold=0.05, min_rebalance_interval_minutes=60):
        """
        자산 배분 및 리밸런싱을 관리합니다.
        - min_rebalance_threshold: 리밸런싱 실행을 위한 최소 배분 차이 (전체 자산 대비)
        - min_rebalance_interval_minutes: 리밸런싱 최소 간격
        """
        self.account = account
        self.logger = setup_logger("asset_manager")
        self.min_rebalance_threshold = min_rebalance_threshold
        self.min_rebalance_interval = timedelta(minutes=min_rebalance_interval_minutes)
        self.last_rebalance_time = None
        self.last_account_state = None  # (spot_balance, stablecoin_balance)

    def _get_account_state(self):
        return (round(self.account.spot_balance, 4), round(self.account.stablecoin_balance, 4))

    def rebalance(self, market_regime):
        """
        시장 레짐에 따라 자산 배분을 재조정합니다.
          - bullish: 목표 배분 90% spot
          - bearish: 목표 배분 10% spot
          - sideways: 목표 배분 60% spot
        현재 배분과 목표 배분의 차이가 전체 자산 대비 최소 임계치 이상일 경우에만 전환을 실행합니다.
        """
        current_time = datetime.now()

        if self.last_rebalance_time is not None:
            elapsed = current_time - self.last_rebalance_time
            if elapsed < self.min_rebalance_interval:
                self.logger.debug(
                    f"리밸런싱 건너뜀: 마지막 리밸런싱 후 {elapsed.total_seconds()/60:.2f}분 경과 (최소 {self.min_rebalance_interval.total_seconds()/60:.2f}분 필요)."
                )
                return

        total_assets = self.account.spot_balance + self.account.stablecoin_balance
        if total_assets <= 0:
            self.logger.warning("총 자산이 0 이하입니다. 리밸런싱을 건너뜁니다.")
            return

        regime = market_regime.lower()
        if regime == "bullish":
            desired_spot = total_assets * 0.90
        elif regime == "bearish":
            desired_spot = total_assets * 0.10
        elif regime == "sideways":
            desired_spot = total_assets * 0.60
        else:
            self.logger.warning(f"알 수 없는 시장 레짐: {market_regime}. 리밸런싱 건너뜀.")
            return

        current_spot = self.account.spot_balance
        diff_ratio = abs(current_spot - desired_spot) / total_assets

        if diff_ratio < self.min_rebalance_threshold:
            self.logger.info("자산 배분 차이가 임계치 미만입니다. 리밸런싱 건너뜁니다.")
            return

        # 자산 전환 수행
        if current_spot < desired_spot:
            amount_to_convert = desired_spot - current_spot
            converted = self.account.convert_to_spot(amount_to_convert)
            self.logger.info(f"[{market_regime.capitalize()}] {converted:.2f} 만큼 스테이블코인에서 현물로 전환됨.")
        else:
            amount_to_convert = current_spot - desired_spot
            converted = self.account.convert_to_stablecoin(amount_to_convert)
            self.logger.info(f"[{market_regime.capitalize()}] {converted:.2f} 만큼 현물에서 스테이블코인으로 전환됨.")

        self.last_rebalance_time = current_time

        current_state = self._get_account_state()
        if current_state != self.last_account_state:
            self.last_account_state = current_state
            self.logger.info(f"리밸런싱 후 계좌 상태: {self.account}")
        else:
            self.logger.debug("리밸런싱 후 계좌 상태 변화 없음.")

---

# trading/ensemble_manager.py
from logs.logger_config import setup_logger
from trading.strategies import TradingStrategies
from datetime import timedelta

class EnsembleManager:
    def __init__(self):
        self.logger = setup_logger(__name__)
        # 각 전략별 가중치 (필요 시 동적 조정)
        self.strategy_weights = {
            "base": 1.0,
            "trend_following": 1.0,
            "breakout": 1.0,
            "counter_trend": 1.0,
            "high_frequency": 1.0
        }
        self.strategy_manager = TradingStrategies()
        # 최소 신호 전환 간격
        self.min_signal_interval = timedelta(minutes=60)
        self.last_signal_time = None
        self.last_final_signal = "hold"
        self.last_signals = None

    def get_final_signal(self, market_regime, liquidity_info, data, current_time):
        """
        여러 전략의 신호를 개별로 산출한 후, 가중치 기반 투표 및 추가 필터링을 통해 최종 거래 신호를 결정합니다.
        최소 신호 간격을 적용하여 잦은 신호 변경을 억제합니다.
        """
        signals = {
            "base": self.strategy_manager.select_strategy(market_regime, liquidity_info, data, current_time),
            "trend_following": self.strategy_manager.trend_following_strategy(data, current_time),
            "breakout": self.strategy_manager.breakout_strategy(data, current_time),
            "counter_trend": self.strategy_manager.counter_trend_strategy(data, current_time),
            "high_frequency": self.strategy_manager.high_frequency_strategy(data, current_time)
        }

        self.logger.debug(f"EnsembleManager 원시 신호 ({current_time}): {signals}")

        vote_enter = sum(self.strategy_weights.get(k, 1.0) for k, sig in signals.items() if sig == "enter_long")
        vote_exit  = sum(self.strategy_weights.get(k, 1.0) for k, sig in signals.items() if sig == "exit_all")
        
        if vote_exit > vote_enter:
            final_signal = "exit_all"
        elif vote_enter > vote_exit:
            final_signal = "enter_long"
        else:
            final_signal = "hold"
        
        # 최소 신호 간격 적용
        if self.last_signal_time is not None:
            elapsed = current_time - self.last_signal_time
            if elapsed < self.min_signal_interval:
                self.logger.debug(f"신호 전환 억제: 마지막 신호 후 {elapsed.total_seconds()/60:.2f}분 경과.")
                final_signal = self.last_final_signal
            else:
                self.last_signal_time = current_time
                self.last_final_signal = final_signal
        else:
            if final_signal != "hold":
                self.last_signal_time = current_time
                self.last_final_signal = final_signal

        if self.last_signals == signals:
            self.logger.debug(f"이전 신호와 동일: 최종 신호 {final_signal} 유지.")
        else:
            self.last_signals = signals.copy()
            self.logger.debug(f"신호 업데이트: {signals}")

        self.logger.info(f"EnsembleManager 최종 신호 ({current_time}): {final_signal}")
        return final_signal

    def update_strategy_weights(self, performance_metrics):
        """
        실시간 성과 지표에 따라 각 전략의 가중치를 조정합니다.
        """
        for strat, perf in performance_metrics.items():
            if perf < 0:
                self.strategy_weights[strat] *= 0.95
            else:
                self.strategy_weights[strat] *= 1.05
        self.logger.info(f"전략 가중치 업데이트: {self.strategy_weights}")

---

# trading/indicators.py
import pandas as pd
from ta.trend import SMAIndicator, MACD
from ta.momentum import RSIIndicator
from ta.volatility import BollingerBands
from logs.logger_config import setup_logger

logger = setup_logger(__name__)

def compute_sma(data: pd.DataFrame, price_column: str = 'close', period: int = 20, fillna: bool = False, output_col: str = 'sma') -> pd.DataFrame:
    try:
        sma = SMAIndicator(close=data[price_column], window=period, fillna=fillna)
        data[output_col] = sma.sma_indicator()
    except Exception as e:
        logger.error(f"compute_sma 에러: {e}")
    return data

def compute_macd(data: pd.DataFrame, price_column: str = 'close', slow_period: int = 26, fast_period: int = 12, signal_period: int = 9, fillna: bool = False, prefix: str = 'macd_') -> pd.DataFrame:
    try:
        macd = MACD(close=data[price_column],
                    window_slow=slow_period,
                    window_fast=fast_period,
                    window_sign=signal_period,
                    fillna=fillna)
        data[f'{prefix}macd'] = macd.macd()
        data[f'{prefix}signal'] = macd.macd_signal()
        data[f'{prefix}diff'] = macd.macd_diff()
    except Exception as e:
        logger.error(f"compute_macd 에러: {e}")
    return data

def compute_rsi(data: pd.DataFrame, price_column: str = 'close', period: int = 14, fillna: bool = False, output_col: str = 'rsi') -> pd.DataFrame:
    try:
        rsi = RSIIndicator(close=data[price_column], window=period, fillna=fillna)
        data[output_col] = rsi.rsi()
    except Exception as e:
        logger.error(f"compute_rsi 에러: {e}")
    return data

def compute_bollinger_bands(data: pd.DataFrame, price_column: str = 'close', period: int = 20, std_multiplier: float = 2.0, fillna: bool = False, prefix: str = 'bb_') -> pd.DataFrame:
    try:
        bb = BollingerBands(close=data[price_column], window=period, window_dev=std_multiplier, fillna=fillna)
        data[f'{prefix}mavg'] = bb.bollinger_mavg()
        data[f'{prefix}hband'] = bb.bollinger_hband()
        data[f'{prefix}lband'] = bb.bollinger_lband()
        data[f'{prefix}pband'] = bb.bollinger_pband()
        data[f'{prefix}wband'] = bb.bollinger_wband()
        data[f'{prefix}hband_ind'] = bb.bollinger_hband_indicator()
        data[f'{prefix}lband_ind'] = bb.bollinger_lband_indicator()
    except Exception as e:
        logger.error(f"compute_bollinger_bands 에러: {e}")
    return data

---

# trading/positions.py
import uuid
from logs.logger_config import setup_logger

logger = setup_logger(__name__)

class TradePosition:
    def __init__(self, side="LONG", initial_price: float = None, maximum_size: float = 0.0, total_splits: int = 1, allocation_plan: list = None):
        """
        포지션 생성:
          - side: 거래 방향 ("LONG" 또는 "SHORT")
          - initial_price: 진입가
          - maximum_size: 최대 포지션 사이즈
          - total_splits: 분할 진입 횟수
          - allocation_plan: 각 분할 진입 비율 (지정하지 않을 경우 빈 리스트)
        """
        self.position_id = str(uuid.uuid4())
        self.side = side
        self.executions = []
        self.initial_price = initial_price
        self.maximum_size = maximum_size
        self.total_splits = total_splits
        self.executed_splits = 0
        self.allocation_plan = allocation_plan if allocation_plan is not None else []
        self.highest_price = initial_price if initial_price is not None else 0.0

    def add_execution(self, entry_price: float, size: float, stop_loss: float = None, take_profit: float = None, entry_time=None, exit_targets: list = None, trade_type: str = "unknown", min_order_size: float = 1e-8):
        """
        포지션 실행 추가:
          - exit_targets: [(target_price, exit_ratio), ...]
          - min_order_size: 최소 체결 수량
        """
        if size < min_order_size:
            logger.info("체결 수량이 최소 주문 수량보다 작습니다. 체결을 건너뜁니다.")
            return
        exit_targets_flagged = []
        if exit_targets is not None:
            for target_price, exit_ratio in exit_targets:
                exit_targets_flagged.append({
                    'price': target_price,
                    'exit_ratio': exit_ratio,
                    'hit': False
                })
        self.executions.append({
            'entry_price': entry_price,
            'size': size,
            'stop_loss': stop_loss,
            'take_profit': take_profit,
            'entry_time': entry_time,
            'exit_targets': exit_targets_flagged,
            'trade_type': trade_type,
            'highest_price_since_entry': entry_price,
            'closed': False
        })
        logger.debug(f"실행 추가: {entry_price}, 수량: {size}")

    def get_total_size(self) -> float:
        return sum(exec_record['size'] for exec_record in self.executions if not exec_record.get('closed', False))

    def get_average_entry_price(self) -> float:
        total_cost = sum(exec_record['entry_price'] * exec_record['size'] for exec_record in self.executions if not exec_record.get('closed', False))
        total_qty = self.get_total_size()
        return (total_cost / total_qty) if total_qty > 0 else 0.0

    def remove_execution(self, index: int):
        if 0 <= index < len(self.executions):
            self.executions.pop(index)
            logger.debug(f"실행 제거: 인덱스 {index}")

    def is_empty(self) -> bool:
        return all(exec_record.get("closed", False) for exec_record in self.executions)

    def partial_close_execution(self, index: int, close_ratio: float, min_order_size: float = 1e-8) -> float:
        """
        부분 청산:
          - 지정된 비율만큼 포지션 청산하고, 남은 수량이 최소 주문 수량보다 작으면 해당 실행을 종료 처리합니다.
        """
        if 0 <= index < len(self.executions):
            exec_record = self.executions[index]
            qty_to_close = exec_record['size'] * close_ratio
            exec_record['size'] -= qty_to_close
            if 'exit_targets' in exec_record and exec_record['exit_targets']:
                exec_record['exit_targets'] = [t for t in exec_record['exit_targets'] if not t.get('hit', False)]
            if exec_record['size'] < min_order_size:
                exec_record['closed'] = True
            logger.debug(f"부분 청산: 인덱스 {index}, 청산 수량: {qty_to_close}")
            return qty_to_close
        return 0.0

---

# trading/risk_manager.py
from logs.logger_config import setup_logger

logger = setup_logger(__name__)

class RiskManager:
    @staticmethod
    def compute_position_size(available_balance: float, risk_percentage: float, entry_price: float, stop_loss: float, fee_rate: float = 0.001, min_order_size: float = 1e-8, volatility: float = 0.0) -> float:
        """
        포지션 사이즈 계산:
          - stop_loss가 None이면 entry_price의 2% 하락값 사용.
          - 변동성이 높으면 포지션 사이즈 축소.
        """
        if stop_loss is None:
            stop_loss = entry_price * 0.98
        price_diff = abs(entry_price - stop_loss)
        max_risk = available_balance * risk_percentage
        fee_amount = entry_price * fee_rate
        loss_per_unit = price_diff + fee_amount
        computed_size = max_risk / loss_per_unit if loss_per_unit > 0 else 0.0
        if volatility > 0:
            computed_size /= (1 + volatility)
        logger.debug(f"계산된 포지션 사이즈: {computed_size}")
        return computed_size if computed_size >= min_order_size else 0.0

    @staticmethod
    def allocate_position_splits(total_size: float, splits_count: int = 3, allocation_mode: str = 'equal', min_order_size: float = 1e-8) -> list:
        if splits_count < 1:
            raise ValueError("splits_count는 1 이상이어야 합니다.")
        if allocation_mode not in ['equal', 'pyramid_up', 'pyramid_down']:
            raise ValueError("allocation_mode는 'equal', 'pyramid_up', 'pyramid_down' 중 하나여야 합니다.")
        if total_size < min_order_size:
            return [1.0]
        if allocation_mode == 'equal':
            allocation = [1.0 / splits_count] * splits_count
        elif allocation_mode == 'pyramid_up':
            ratio_sum = splits_count * (splits_count + 1) / 2
            allocation = [i / ratio_sum for i in range(1, splits_count + 1)]
        elif allocation_mode == 'pyramid_down':
            ratio_sum = splits_count * (splits_count + 1) / 2
            allocation = [i / ratio_sum for i in range(splits_count, 0, -1)]
        logger.debug(f"포지션 분할 할당: {allocation}")
        return allocation

    @staticmethod
    def attempt_scale_in_position(position, current_price: float, scale_in_threshold: float = 0.02, slippage_rate: float = 0.0, stop_loss: float = None, take_profit: float = None, entry_time=None, trade_type: str = "scale_in", base_multiplier: float = 1.0, dynamic_volatility: float = 1.0):
        """
        스케일‑인 시도:
          - 설정된 scale_in_threshold 및 동적 변동성을 고려하여 추가 진입 시도를 진행.
        """
        if position is None or position.is_empty():
            logger.debug("스케일‑인 시도: 유효한 포지션이 없습니다.")
            return
        while position.executed_splits < position.total_splits:
            next_split = position.executed_splits
            target_price = position.initial_price * (1.0 + scale_in_threshold * (next_split + 1)) * dynamic_volatility
            if current_price < target_price:
                break
            if next_split < len(position.allocation_plan):
                portion = position.allocation_plan[next_split]
            else:
                break
            chunk_size = position.maximum_size * portion
            executed_price = current_price * (1.0 + slippage_rate)
            position.add_execution(entry_price=executed_price, size=chunk_size, stop_loss=stop_loss, take_profit=take_profit, entry_time=entry_time, trade_type=trade_type)
            position.executed_splits += 1
            logger.debug(f"스케일‑인 실행: split {next_split+1}, 체결 가격: {executed_price}, 수량: {chunk_size}")

    @staticmethod
    def compute_risk_parameters_by_regime(base_params: dict, regime: str, liquidity: str = None, bullish_risk_multiplier: float = 1.1, bullish_atr_multiplier_factor: float = 0.9, bullish_profit_ratio_multiplier: float = 1.1, bearish_risk_multiplier: float = 0.8, bearish_atr_multiplier_factor: float = 1.1, bearish_profit_ratio_multiplier: float = 0.9, high_liquidity_risk_multiplier: float = 1.0, low_liquidity_risk_multiplier: float = 0.8, high_atr_multiplier_factor: float = 1.0, low_atr_multiplier_factor: float = 1.1, high_profit_ratio_multiplier: float = 1.0, low_profit_ratio_multiplier: float = 0.9) -> dict:
        """
        시장 레짐 및 유동성 정보에 따라 리스크 파라미터를 동적으로 조정합니다.
        """
        regime = regime.lower()
        risk_params = {}

        if regime == "bullish":
            risk_params['risk_per_trade'] = base_params['risk_per_trade'] * bullish_risk_multiplier
            risk_params['atr_multiplier'] = base_params['atr_multiplier'] * bullish_atr_multiplier_factor
            risk_params['profit_ratio'] = base_params['profit_ratio'] * bullish_profit_ratio_multiplier
        elif regime == "bearish":
            risk_params['risk_per_trade'] = base_params['risk_per_trade'] * bearish_risk_multiplier
            risk_params['atr_multiplier'] = base_params['atr_multiplier'] * bearish_atr_multiplier_factor
            risk_params['profit_ratio'] = base_params['profit_ratio'] * bearish_profit_ratio_multiplier
        elif regime == "sideways":
            if liquidity is None:
                raise ValueError("횡보장(regime='sideways')에서는 'liquidity' 정보를 반드시 제공해야 합니다.")
            liquidity = liquidity.lower()
            if liquidity == "high":
                risk_params['risk_per_trade'] = base_params['risk_per_trade'] * high_liquidity_risk_multiplier
                risk_params['atr_multiplier'] = base_params['atr_multiplier'] * high_atr_multiplier_factor
                risk_params['profit_ratio'] = base_params['profit_ratio'] * high_profit_ratio_multiplier
            else:
                risk_params['risk_per_trade'] = base_params['risk_per_trade'] * low_liquidity_risk_multiplier
                risk_params['atr_multiplier'] = base_params['atr_multiplier'] * low_atr_multiplier_factor
                risk_params['profit_ratio'] = base_params['profit_ratio'] * low_profit_ratio_multiplier
        else:
            raise ValueError("유효하지 않은 시장 레짐입니다. ('bullish', 'bearish', 'sideways' 중 하나여야 합니다.)")

        current_volatility = base_params.get("current_volatility", None)
        if current_volatility is not None:
            if current_volatility > 0.05:
                risk_params['risk_per_trade'] *= 0.8
            else:
                risk_params['risk_per_trade'] *= 1.1

        logger.debug(f"조정된 리스크 파라미터: {risk_params}")
        return risk_params

---

# trading/strategies.py
from logs.logger_config import setup_logger

class TradingStrategies:
    def __init__(self):
        self.logger = setup_logger(__name__)
        self.previous_signal = None

    def _get_candle_pattern_signal(self, row):
        try:
            open_price = row.get('open')
            close_price = row.get('close')
            if open_price is None or close_price is None:
                return None
            if close_price > open_price * 1.005:
                return "bullish"
            elif close_price < open_price * 0.99:
                return "bearish"
        except Exception as e:
            self.logger.error(f"_get_candle_pattern_signal error: {e}")
        return None

    def _get_sma_rsi_signal(self, row, previous_sma):
        try:
            sma = row.get('sma')
            rsi = row.get('rsi')
            if sma is not None and previous_sma is not None and sma > previous_sma and rsi is not None and rsi < 35:
                return "enter_long"
        except Exception as e:
            self.logger.error(f"_get_sma_rsi_signal error: {e}")
        return "hold"

    def _get_bb_signal(self, row):
        try:
            bb_lband = row.get('bb_lband')
            close_price = row.get('close', 0)
            if bb_lband is not None and close_price <= bb_lband * 1.002:
                return "enter_long"
        except Exception as e:
            self.logger.error(f"_get_bb_signal error: {e}")
        return "hold"

    def select_strategy(self, market_regime: str, liquidity_info: str, data, current_time, market_type: str = "crypto") -> str:
        regime = market_regime.lower()
        signals = []

        try:
            current_row = data.loc[current_time]
        except Exception as e:
            self.logger.error(f"select_strategy: 데이터 조회 실패 for time {current_time}: {e}")
            return "hold"

        if regime == "bullish":
            candle_signal = self._get_candle_pattern_signal(current_row)
            self.logger.debug(f"_get_candle_pattern_signal: {candle_signal} at {current_time}")
            signals.append("enter_long" if candle_signal == "bullish" else "hold")
            
            try:
                previous_rows = data.loc[:current_time]
                if len(previous_rows) > 1:
                    previous_sma = previous_rows.iloc[-2].get('sma', current_row.get('sma'))
                else:
                    previous_sma = current_row.get('sma')
            except Exception as e:
                self.logger.error(f"select_strategy: 이전 데이터 조회 실패: {e}")
                previous_sma = current_row.get('sma')
                
            sma_rsi_signal = self._get_sma_rsi_signal(current_row, previous_sma)
            self.logger.debug(f"_get_sma_rsi_signal: {sma_rsi_signal} at {current_time}")
            signals.append(sma_rsi_signal)
            
            bb_signal = self._get_bb_signal(current_row)
            self.logger.debug(f"_get_bb_signal: {bb_signal} at {current_time}")
            signals.append(bb_signal)
            
            final_signal = "enter_long" if "enter_long" in signals else "hold"
        elif regime == "bearish":
            final_signal = "exit_all"
        elif regime == "sideways":
            final_signal = "range_trade" if liquidity_info.lower() == "high" else "mean_reversion"
        else:
            final_signal = "hold"

        self.logger.debug(f"select_strategy: regime={regime}, liquidity_info={liquidity_info}, signals={signals}")
        self.logger.info(f"select_strategy: 최종 신호={final_signal} at {current_time}")
        self.previous_signal = final_signal
        return final_signal

    def trend_following_strategy(self, data, current_time):
        try:
            row = data.loc[current_time]
        except Exception as e:
            self.logger.error(f"trend_following_strategy: 데이터 조회 실패 for time {current_time}: {e}")
            return "hold"
        sma = row.get('sma')
        price = row.get('close')
        if sma is not None and price is not None and price > sma:
            self.logger.debug(f"trend_following_strategy: bullish signal at {current_time}")
            return "enter_long"
        return "hold"

    def breakout_strategy(self, data, current_time, window=20):
        try:
            data_sub = data.loc[:current_time]
            if len(data_sub) < window:
                return "hold"
            recent_high = data_sub['high'].iloc[-window:].max()
            price = data.loc[current_time, 'close']
            if price > recent_high:
                self.logger.debug(f"breakout_strategy: breakout detected at {current_time}")
                return "enter_long"
        except Exception as e:
            self.logger.error(f"breakout_strategy: 데이터 조회 실패 for time {current_time}: {e}")
        return "hold"

    def counter_trend_strategy(self, data, current_time):
        try:
            row = data.loc[current_time]
        except Exception as e:
            self.logger.error(f"counter_trend_strategy: 데이터 조회 실패 for time {current_time}: {e}")
            return "hold"
        rsi = row.get('rsi')
        if rsi is not None:
            if rsi < 30:
                self.logger.debug(f"counter_trend_strategy: bullish signal at {current_time} (rsi: {rsi})")
                return "enter_long"
            elif rsi > 70:
                self.logger.debug(f"counter_trend_strategy: bearish signal at {current_time} (rsi: {rsi})")
                return "exit_all"
        return "hold"

    def high_frequency_strategy(self, data, current_time):
        try:
            current_index = data.index.get_loc(current_time)
            if current_index == 0:
                return "hold"
            prev_time = data.index[current_index - 1]
            current_row = data.loc[current_time]
            prev_row = data.loc[prev_time]
        except Exception as e:
            self.logger.error(f"high_frequency_strategy: 데이터 조회 실패 for time {current_time}: {e}")
            return "hold"
        current_price = current_row.get('close')
        prev_price = prev_row.get('close')
        if current_price is None or prev_price is None:
            return "hold"
        threshold = 0.002  # 0.2% 임계치
        price_change = (current_price - prev_price) / prev_price
        if price_change > threshold:
            self.logger.debug(f"high_frequency_strategy: bullish price change ({price_change:.4f}) at {current_time}")
            return "enter_long"
        elif price_change < -threshold:
            self.logger.debug(f"high_frequency_strategy: bearish price change ({price_change:.4f}) at {current_time}")
            return "exit_all"
        return "hold"

---

# trading/trade_manager.py
import pandas as pd
import numpy as np
import ta
from logs.logger_config import setup_logger

logger = setup_logger(__name__)

class TradeManager:
    @staticmethod
    def calculate_atr_stop_loss(
        data: pd.DataFrame,
        atr_period: int = 14,
        atr_multiplier: float = 2.0,
        dynamic_sl_adjustment: float = 1.0,
        stop_loss_col: str = 'stop_loss_price',
        entry_price_col: str = 'entry_price',
        atr_col: str = 'atr',
        high_col: str = 'high',
        low_col: str = 'low',
        close_col: str = 'close',
        entry_signal_col: str = 'long_entry'
    ) -> pd.DataFrame:
        if len(data) < atr_period:
            data[atr_col] = data[high_col] - data[low_col]
        else:
            try:
                atr_indicator = ta.volatility.AverageTrueRange(
                    high=data[high_col],
                    low=data[low_col],
                    close=data[close_col],
                    window=atr_period,
                    fillna=True
                )
                data[atr_col] = atr_indicator.average_true_range()
            except Exception as e:
                logger.error(f"ATR 계산 에러: {e}")
                data[atr_col] = data[high_col] - data[low_col]
        data['close_ma'] = data[close_col].rolling(window=atr_period, min_periods=1).mean()
        data['close_std'] = data[close_col].rolling(window=atr_period, min_periods=1).std()
        data['std_ratio'] = data['close_std'] / data['close_ma']
        data['dynamic_multiplier'] = atr_multiplier * (1 + data['std_ratio'])
        data[entry_price_col] = np.where(data.get(entry_signal_col, False), data[close_col], np.nan)
        data[entry_price_col] = data[entry_price_col].ffill()
        data[stop_loss_col] = data[entry_price_col] - (data[atr_col] * data['dynamic_multiplier'] * dynamic_sl_adjustment)
        data.drop(columns=['close_ma', 'close_std', 'std_ratio', 'dynamic_multiplier'], inplace=True)
        logger.debug("ATR 기반 스탑로스 계산 완료.")
        return data

    @staticmethod
    def adjust_trailing_stop(
        current_stop: float,
        current_price: float,
        highest_price: float,
        trailing_percentage: float,
        volatility: float = 0.0
    ) -> float:
        if current_stop is None:
            current_stop = highest_price * (1 - trailing_percentage * (1 + volatility))
        new_stop = highest_price * (1.0 - trailing_percentage * (1 + volatility))
        adjusted_stop = new_stop if new_stop > current_stop and new_stop < current_price else current_stop
        logger.debug(f"조정된 트레일링 스탑: {adjusted_stop}")
        return adjusted_stop

    @staticmethod
    def set_fixed_take_profit(
        data: pd.DataFrame,
        profit_ratio: float = 0.05,
        take_profit_col: str = 'take_profit_price',
        entry_price_col: str = 'entry_price'
    ) -> pd.DataFrame:
        data[take_profit_col] = data[entry_price_col] * (1 + profit_ratio)
        logger.debug("고정 테이크 프로핏 설정 완료.")
        return data

    @staticmethod
    def should_exit_trend(
        data: pd.DataFrame,
        current_time,
        window_length: int = 20,
        price_column: str = 'close'
    ) -> bool:
        if current_time not in data.index:
            data_sub = data.loc[:current_time]
            if len(data_sub) < window_length:
                return False
            window_data = data_sub.iloc[-window_length:]
        else:
            idx = data.index.get_loc(current_time)
            if idx < window_length:
                return False
            window_data = data.iloc[idx - window_length + 1: idx + 1]
        recent_min = window_data[price_column].min()
        current_price = data.loc[current_time, price_column] if current_time in data.index else data.iloc[-1][price_column]
        decision = current_price < recent_min
        logger.debug(f"should_exit_trend 결정: {decision} (current_price={current_price}, recent_min={recent_min})")
        return decision

    @staticmethod
    def calculate_partial_exit_targets(
        entry_price: float,
        partial_exit_ratio: float = 0.5,
        partial_profit_ratio: float = 0.03,
        final_profit_ratio: float = 0.06,
        final_exit_ratio: float = 1.0
    ):
        partial_target = entry_price * (1.0 + partial_profit_ratio)
        final_target = entry_price * (1.0 + final_profit_ratio)
        logger.debug(f"부분 청산 목표 계산: partial_target={partial_target}, final_target={final_target}")
        return [(partial_target, partial_exit_ratio), (final_target, final_exit_ratio)]

    @staticmethod
    def compute_atr(data: pd.DataFrame, period: int = 14) -> pd.DataFrame:
        try:
            atr_indicator = ta.volatility.AverageTrueRange(
                high=data['high'],
                low=data['low'],
                close=data['close'],
                window=period,
                fillna=True
            )
            data['atr'] = atr_indicator.average_true_range()
        except Exception as e:
            logger.error(f"compute_atr 에러: {e}")
            data['atr'] = data['high'] - data['low']
        logger.debug("ATR 계산 완료.")
        return data

    @staticmethod
    def calculate_dynamic_stop_and_take(
        entry_price: float,
        atr: float,
        risk_params: dict
    ):
        """
        동적 스탑로스와 테이크 프로핏 가격을 계산합니다.
        - entry_price: 진입 가격
        - atr: 현재 ATR 값
        - risk_params: 리스크 파라미터 (예: 'atr_multiplier', 'profit_ratio', 'volatility_multiplier' 등 포함)
        """
        atr_multiplier = risk_params.get("atr_multiplier", 2.0)
        profit_ratio = risk_params.get("profit_ratio", 0.05)
        volatility_multiplier = risk_params.get("volatility_multiplier", 1.0)
        stop_loss_price = entry_price - (atr * atr_multiplier * volatility_multiplier)
        take_profit_price = entry_price * (1 + profit_ratio)
        logger.debug(f"동적 스탑로스/테이크 프로핏 계산: entry_price={entry_price}, atr={atr}, stop_loss={stop_loss_price}, take_profit={take_profit_price}")
        return stop_loss_price, take_profit_price
