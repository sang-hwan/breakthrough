[tests]
# tests/conftest.py
import os
import glob
import pytest

@pytest.fixture(autouse=True, scope="session")
def clear_logs():
    """
    테스트 실행 전에 logs 디렉토리 내 모든 .log 파일을 삭제합니다.
    이 fixture는 세션 전체에 대해 한 번 실행됩니다.
    """
    log_dir = os.path.join(os.path.dirname(__file__), "..", "logs")
    log_pattern = os.path.join(log_dir, "*.log")
    log_files = glob.glob(log_pattern)
    for log_file in log_files:
        try:
            os.remove(log_file)
            print(f"Deleted log file: {log_file}")
        except Exception as e:
            print(f"Failed to delete {log_file}: {e}")

---

# tests/test_auto_optimization_trigger.py

def auto_optimization_trigger(performance):
    """
    더미 함수: 월간 ROI가 2% 미만인 달이 있으면 True를 반환합니다.
    """
    monthly_roi = performance.get("monthly_roi", {})
    for roi in monthly_roi.values():
        if roi < 2.0:
            return True
    return False

def test_auto_optimization_trigger():
    performance_trigger = {
        "monthly_roi": {
            "2023-01": 1.5,
            "2023-02": 2.5,
            "2023-03": 1.8,
        }
    }
    performance_no_trigger = {
        "monthly_roi": {
            "2023-01": 2.1,
            "2023-02": 2.5,
            "2023-03": 2.3,
        }
    }
    assert auto_optimization_trigger(performance_trigger) is True
    assert auto_optimization_trigger(performance_no_trigger) is False

---

# tests/test_logging_summary.py
import logging
import io
from logs.logging_util import LoggingUtil

def test_logging_summary_output():
    # 메모리 내 로그 스트림 설정
    log_stream = io.StringIO()
    
    # 대상 로거 생성 및 기존 핸들러 제거
    test_logger = logging.getLogger("test_logging_summary")
    test_logger.setLevel(logging.DEBUG)
    for h in test_logger.handlers[:]:
        test_logger.removeHandler(h)
    test_logger.propagate = False

    # 새 스트림 핸들러 추가
    stream_handler = logging.StreamHandler(log_stream)
    formatter = logging.Formatter('%(levelname)s:%(message)s')
    stream_handler.setFormatter(formatter)
    test_logger.addHandler(stream_handler)

    # LoggingUtil 인스턴스 생성 (테스트용 logger로 교체)
    logging_util = LoggingUtil("test_logging_summary")
    logging_util.logger = test_logger  # 테스트용 logger 주입

    # 요약 로그 임계치(예: 2000회) 전까지 이벤트 기록
    for i in range(1999):
        logging_util.log_event(f"Test event {i}", level=logging.DEBUG)

    # 2000번째 이벤트 – 이 시점에서 요약 로그(INFO 레벨)가 찍혀야 함
    logging_util.log_event("Test event 1999", level=logging.DEBUG)

    # 강제로 핸들러 flush
    stream_handler.flush()

    # 로그 출력값을 가져와서 요약 로그 메시지가 포함되었는지 확인
    output = log_stream.getvalue()
    assert "요약 로그:" in output

---

# tests/test_performance_report.py

import io
import sys
from logs.final_report import generate_final_report

def test_final_report_output():
    sample_performance = {
        "roi": 1.5,
        "pnl": -150.0,
        "trade_count": 10,
        "monthly_roi": {
            "2023-01": 1.8,
            "2023-02": 2.2,
            "2023-03": 1.0,
        }
    }
    # stdout 캡처
    captured_output = io.StringIO()
    sys.stdout = captured_output

    generate_final_report(sample_performance)

    sys.stdout = sys.__stdout__
    output = captured_output.getvalue()
    # 핵심 지표들이 출력되는지 확인 (예: ROI, 거래 횟수, 월별 데이터 등)
    assert "ROI" in output
    # 출력된 리포트에서 거래 횟수를 "거래 횟수:"로 표기하도록 변경했으므로 이를 확인합니다.
    assert "trade_count" in output or "거래 횟수" in output
    for month in sample_performance["monthly_roi"]:
        assert month in output
