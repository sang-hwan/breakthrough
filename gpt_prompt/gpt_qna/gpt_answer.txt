## 1. 초기 MVP 구축 및 모듈별 핵심 기능 구현

- **핵심 기능 우선 구현:**  
  - **데이터 모듈:** 데이터 수집, 저장, 조회 기능을 안정적으로 구축  
  - **Market Analysis:** 기본 기술적 지표(이동평균, 볼린저밴드 등)를 통해 시장 상태를 파악  
  - **Signal Calculation:** 기본 전략(상승, 횡보, 하락 등)별 신호를 개별 모듈(`signals_uptrend.py`, `signals_sideways.py`, `signals_downtrend.py`)로 구현  
  - **Trading:** 백테스트용 매수/매도 결정, 포지션 관리, 리스크 관리 로직 구축  
  - **파라미터 초기화:** 각 모듈은 자체 하드코딩 파라미터로 시작하되, 이후 민감도 분석 및 최적화를 위한 기초 데이터를 기록

---

## 2. 모듈별 단위 테스트 및 파라미터 민감도 분석

- **단위 테스트 작성:**  
  - 각 모듈별 기능(예: 기술적 지표 계산, 신호 생성, 포지션 전환 등)을 독립적으로 검증  
  - 테스트 데이터와 기대 결과를 기반으로, 모듈별 핵심 함수의 안정성을 확인

- **모듈별 파라미터 민감도 분석:**  
  - **Market Analysis 모듈:**  
    - 이동평균 기간, 볼린저밴드 설정 등 주요 지표의 파라미터를 변화시키며 성과(예: 신호 정확도, 시장 상태 분류)를 측정  
    - 민감도 분석 결과를 바탕으로 핵심 파라미터 범위를 도출  
  - **Signal Calculation 모듈:**  
    - 전략별 임계값(예: 교차 시점, 과매수/과매도 RSI 기준치 등)을 조정하며 신호 발생 빈도와 정확도를 평가  
    - 결과에 따라 각 전략별 가중치 및 우선순위를 결정  
  - **Trading 모듈:**  
    - 포지션 진입/청산 기준, 리스크 관리 파라미터(손절, 트레일링 스탑 등)에 대해 시뮬레이션을 수행  
    - 전문가 조언 및 실무 경험을 반영하여 민감도 분석 결과를 검토(전문가 피드백 수집 포함)

- **성과 지표:**  
  - 각 모듈별로 KPI(예: 신호 정확도, 백테스트 누적 수익률, 최대 낙폭, 샤프 지수 등)를 산출하여 파라미터 최적화에 활용

---

## 3. 통합 테스트 단계: 핵심 흐름 및 모듈 간 결합

- **핵심 흐름 통합:**  
  - **데이터 → Market Analysis → Signal Calculation → Trading** 의 전체 파이프라인을 하나의 시나리오로 구성  
  - 샘플 데이터셋으로 전체 백테스트를 실행하고, 누적 수익률, 포지션 변화, 거래 빈도 등을 검증

- **모듈 간 인터페이스 검증:**  
  - 각 모듈의 입출력 인터페이스가 명확히 정의되어야 하며, 데이터 전달 과정에서의 불일치나 누락이 없는지 확인  
  - 에러 핸들링 및 예외 상황(예: 데이터 누락, 지표 계산 오류 등)에 대한 대응 로직 테스트

- **앙상블 기법을 활용한 결합 (Market Analysis & Signal Calculation):**  
  - **전략별 결과 결합:**  
    - Market Analysis 모듈에서 도출된 다양한 시장 상태 판단과 Signal Calculation 모듈에서 생성한 여러 전략 신호를  
      - 가중치 조정(예: 최근 성과 기반 동적 가중치 산정)  
      - 또는 다수결, 평균 등 앙상블 방식으로 결합하여 최종 신호를 생성  
  - **통합 성과 지표:**  
    - 앙상블 기법 적용 후 백테스트 결과를 비교 분석하여 최적의 결합 방안을 도출

---

## 4. 점진적 모듈 확장 및 추가 최적화

- **추가 분석 모듈 통합:**  
  - 온체인 분석(`onchain_analysis.py`), 감성 분석(`sentiment_analysis.py`), 머신러닝 기반 분석(`ml_market_analysis.py`) 등은 핵심 파이프라인에 직접 연결하기 전에  
    - 개별 단위 테스트와 모듈별 민감도 분석을 먼저 수행  
    - 필요한 경우, 기존 Market Analysis 모듈과 결합하여 앙상블 방식(가중치 적용 등)으로 결과에 반영

- **최적화 모듈 활용:**  
  - `optimization/` 폴더 내 각 모듈별 최적화 스크립트를 통해 파라미터 조합, 성과 지표 계산, 과적합 방지(예: 교차 검증, OOS 테스트 등) 전략을 점진적으로 적용  
  - 최적화 결과를 바탕으로 파라미터 및 전략을 재조정하고, 통합 테스트를 반복

- **Trading 모듈 전문가 피드백:**  
  - Trading 모듈의 경우, 민감도 분석 결과 및 백테스트 성과에 대해 도메인 전문가(트레이더, 리스크 매니저 등)의 조언을 수렴  
  - 전문가 피드백을 반영하여 리스크 관리, 포지션 관리 등의 로직을 보완하고, 실제 시장 환경에 부합하는 전략으로 개선

---

## 5. 지속적 피드백 및 CI/CD 환경 도입

- **자동화된 테스트 및 배포:**  
  - 단위 테스트와 통합 테스트를 CI/CD 파이프라인(예: GitHub Actions, GitLab CI 등)에 통합하여 코드 변경 시 전체 시스템의 안정성을 주기적으로 검증
- **성과 모니터링:**  
  - 로그(`logs/`) 및 결과 데이터(백테스트, 최적화 결과)를 정기적으로 검토하여, 모듈별 성능 지표를 피드백 받고 최적화 작업에 반영
- **문서화 및 인터페이스 명세:**  
  - 각 모듈의 파라미터, 테스트 케이스, 최적화 결과 및 전문가 피드백을 체계적으로 문서화하여, 차후 모듈 확장 및 유지보수에 활용
