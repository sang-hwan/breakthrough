[data 모듈]
# data/collect_data.py
"""
이 모듈은 ccxt 라이브러리를 사용하여 거래소에서 OHLCV 데이터를 수집하는 기능을 제공합니다.
수집된 데이터는 pandas DataFrame으로 반환되며, lru_cache를 통해 동일 호출 시 중복 API 요청을 방지합니다.
"""

import ccxt
import pandas as pd
from datetime import datetime
import time
from functools import lru_cache
from typing import Optional
from logs.log_config import setup_logger

logger = setup_logger(__name__)

@lru_cache(maxsize=32)
def collect_historical_ohlcv_data(
    symbol: str,
    timeframe: str,
    start_date: str,
    limit_per_request: int = 1000,
    pause_sec: float = 1.0,
    exchange_id: str = 'binance',
    single_fetch: bool = False,
    time_offset_ms: int = 1,
    max_retries: int = 3,
    exchange_instance: Optional[ccxt.Exchange] = None
) -> pd.DataFrame:
    """
    거래소에서 지정 심볼과 시간 간격에 대해 시작 날짜부터의 OHLCV 데이터를 수집합니다.

    Parameters:
        symbol (str): 거래 심볼 (예: 'BTC/USDT').
        timeframe (str): 시간 간격 (예: '1d', '1h').
        start_date (str): 데이터 수집 시작일 ("YYYY-MM-DD" 혹은 "YYYY-MM-DD HH:MM:SS").
        limit_per_request (int): 한 번 호출 시 가져올 데이터 수.
        pause_sec (float): API 호출 사이의 대기 시간.
        exchange_id (str): 거래소 ID (기본 'binance').
        single_fetch (bool): 단일 호출 여부.
        time_offset_ms (int): 다음 호출 시 타임스탬프 오프셋.
        max_retries (int): 최대 재시도 횟수.
        exchange_instance (Optional[ccxt.Exchange]): 재사용할 거래소 인스턴스.

    Returns:
        pd.DataFrame: 수집된 OHLCV 데이터를 담은 DataFrame.
    """
    if exchange_instance is None:
        try:
            exchange_class = getattr(ccxt, exchange_id)
            exchange = exchange_class({'enableRateLimit': True, 'timeout': 30000})
            logger.debug(f"{exchange_id}: Loading markets...")
            exchange.load_markets()
            logger.debug(f"{exchange_id}: Markets loaded successfully.")
        except Exception as e:
            logger.error(f"Exchange '{exchange_id}' 초기화 에러: {e}", exc_info=True)
            return pd.DataFrame()
    else:
        exchange = exchange_instance

    try:
        # 날짜 형식이 YYYY-MM-DD이면 시간 정보를 추가합니다.
        if len(start_date.strip()) == 10:
            start_date += " 00:00:00"
        since = exchange.parse8601(datetime.strptime(start_date, "%Y-%m-%d %H:%M:%S").isoformat())
    except Exception as e:
        logger.error(f"start_date ({start_date}) 파싱 에러: {e}", exc_info=True)
        return pd.DataFrame()

    ohlcv_list = []
    retry_count = 0
    while True:
        try:
            ohlcvs = exchange.fetch_ohlcv(symbol, timeframe, since=since, limit=limit_per_request)
        except Exception as e:
            logger.error(f"{symbol}의 {timeframe} 데이터 수집 에러: {e}", exc_info=True)
            retry_count += 1
            if retry_count >= max_retries:
                logger.error(f"최대 재시도({max_retries}) 초과 - {symbol} {timeframe} 데이터 수집 중단")
                break
            time.sleep(pause_sec)
            continue

        if not ohlcvs:
            break

        ohlcv_list.extend(ohlcvs)
        
        if single_fetch:
            break

        last_timestamp = ohlcvs[-1][0]
        since = last_timestamp + time_offset_ms

        if last_timestamp >= exchange.milliseconds():
            break

        time.sleep(pause_sec)

    if ohlcv_list:
        try:
            df = pd.DataFrame(ohlcv_list, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            return df.copy()
        except Exception as e:
            logger.error(f"DataFrame 변환 에러: {e}", exc_info=True)
            return pd.DataFrame()
    else:
        logger.warning(f"{symbol} {timeframe}에 대한 데이터가 없습니다.")
        return pd.DataFrame()

@lru_cache(maxsize=32)
def collect_latest_ohlcv_data(
    symbol: str,
    timeframe: str,
    limit: int = 500,
    exchange_id: str = 'binance'
) -> pd.DataFrame:
    """
    거래소에서 지정 심볼과 시간 간격에 대해 최신 OHLCV 데이터를 수집합니다.

    Parameters:
        symbol (str): 거래 심볼.
        timeframe (str): 시간 간격.
        limit (int): 가져올 데이터 수 제한.
        exchange_id (str): 거래소 ID.

    Returns:
        pd.DataFrame: 최신 OHLCV 데이터를 담은 DataFrame.
    """
    try:
        exchange_class = getattr(ccxt, exchange_id)
        exchange = exchange_class({'enableRateLimit': True, 'timeout': 30000})
        exchange.load_markets()
    except Exception as e:
        logger.error(f"Exchange '{exchange_id}' 초기화 에러: {e}", exc_info=True)
        return pd.DataFrame()
    
    try:
        ohlcvs = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
    except Exception as e:
        logger.error(f"{symbol}의 {timeframe} 최신 데이터 수집 에러: {e}", exc_info=True)
        return pd.DataFrame()
    
    if ohlcvs:
        try:
            df = pd.DataFrame(ohlcvs, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            return df.copy()
        except Exception as e:
            logger.error(f"DataFrame 변환 에러: {e}", exc_info=True)
            return pd.DataFrame()
    else:
        logger.warning(f"{symbol} {timeframe}에 대한 최신 데이터가 없습니다.")
        return pd.DataFrame()

---

# data/data_utils.py
"""
데이터베이스 연결 및 공통 유틸리티 함수를 제공합니다.
"""

from sqlalchemy import create_engine
from typing import Dict, Any
from data.db_config import DATABASE

def create_db_engine(db_config: Dict[str, Any] = DATABASE) -> Any:
    """
    주어진 데이터베이스 설정으로 SQLAlchemy 엔진을 생성합니다.

    Parameters:
        db_config (dict): 데이터베이스 접속 정보

    Returns:
        SQLAlchemy Engine 객체
    """
    engine = create_engine(
        f"postgresql://{db_config['user']}:{db_config['password']}@"
        f"{db_config['host']}:{db_config['port']}/{db_config['dbname']}",
        pool_pre_ping=True
    )
    return engine

---

# data/db_config.py
"""
데이터베이스 접속 정보를 설정합니다.
"""
DATABASE: dict = {
    'user': 'postgres',
    'password': '1234',
    'host': 'localhost',
    'port': 5432,
    'dbname': 'my_trading_db'
}

---

# data/delete_data.py
"""
이 모듈은 PostgreSQL의 public 스키마 내 모든 테이블을 삭제하는 기능을 제공합니다.
테스트 환경 초기화 시, 스크립트가 아니라 별도의 호출(예: scripts 모듈에서)을 통해 실행됩니다.
"""

from sqlalchemy import text
from typing import Dict, Any
from data.db_config import DATABASE
from data.data_utils import create_db_engine
from logs.log_config import setup_logger

logger = setup_logger(__name__)

def drop_all_tables(db_config: Dict[str, Any] = DATABASE) -> None:
    """
    데이터베이스 내의 모든 테이블을 삭제합니다.
    
    Parameters:
        db_config (dict): 데이터베이스 접속 정보.
        
    Returns:
        None
    """
    try:
        engine = create_db_engine(db_config)
        with engine.begin() as conn:
            result = conn.execute(text("SELECT tablename FROM pg_tables WHERE schemaname = 'public'"))
            tables = [row[0] for row in result]
            if not tables:
                logger.debug("No tables found in the database.")
                return
            for table in tables:
                logger.debug(f"Dropping table {table}...")
                conn.execute(text(f"DROP TABLE IF EXISTS {table} CASCADE"))
            logger.info("All tables dropped successfully.")
    except Exception as e:
        logger.error(f"Error dropping tables: {e}", exc_info=True)
        raise

---

# data/fetch_data.py
"""
이 모듈은 데이터베이스에 저장된 OHLCV 데이터를 조회하는 기능을 제공합니다.
"""

import pandas as pd
from sqlalchemy import text
from typing import Dict, Any, Tuple, List
from data.db_config import DATABASE
from data.data_utils import create_db_engine
from logs.log_config import setup_logger

logger = setup_logger(__name__)

def fetch_ohlcv_records(
    table_name: str = 'ohlcv_data',
    start_date: str = None,
    end_date: str = None,
    db_config: Dict[str, Any] = None
) -> pd.DataFrame:
    """
    지정된 테이블에서 OHLCV 데이터를 조회하여 DataFrame으로 반환합니다.

    Parameters:
        table_name (str): 조회할 테이블 이름.
        start_date (str): 조회 시작 날짜 ("YYYY-MM-DD" 혹은 "YYYY-MM-DD HH:MM:SS").
        end_date (str): 조회 종료 날짜 ("YYYY-MM-DD" 혹은 "YYYY-MM-DD HH:MM:SS").
        db_config (dict): 데이터베이스 접속 정보.

    Returns:
        pd.DataFrame: 조회된 데이터. 오류 발생 시 빈 DataFrame 반환.
    """
    if db_config is None:
        db_config = DATABASE

    try:
        engine = create_db_engine(db_config)
    except Exception as e:
        logger.error(f"DB 엔진 생성 에러: {e}", exc_info=True)
        return pd.DataFrame()

    query = f"SELECT * FROM {table_name} WHERE 1=1"
    params = {}
    if start_date:
        query += " AND timestamp >= :start_date"
        params['start_date'] = start_date
    if end_date:
        query += " AND timestamp <= :end_date"
        params['end_date'] = end_date
    query += " ORDER BY timestamp"
    query = text(query)
    try:
        df = pd.read_sql(query, engine, params=params, parse_dates=['timestamp'])
        df.set_index('timestamp', inplace=True)
        return df
    except Exception as e:
        logger.error(f"데이터 로드 에러 ({table_name}): {e}", exc_info=True)
        return pd.DataFrame()


def get_unique_symbol_list(db_config: Dict[str, Any] = None) -> List[str]:
    """
    public 스키마 내 테이블 이름을 통해 고유한 OHLCV 심볼 목록을 반환합니다.

    Returns:
        List[str]: 예) ["BTC/USDT", "ETH/USDT", ...]
    """
    if db_config is None:
        db_config = DATABASE
    try:
        engine = create_db_engine(db_config)
        with engine.connect() as conn:
            result = conn.execute(text("SELECT tablename FROM pg_tables WHERE schemaname = 'public'"))
            tables = [row[0] for row in result]
    except Exception as e:
        logger.error(f"테이블 이름 조회 에러: {e}", exc_info=True)
        return []

    symbol_set = set()
    for table in tables:
        if table.startswith("ohlcv_"):
            parts = table.split("_")
            if len(parts) >= 3:
                symbol_set.add(parts[1])
    symbols = []
    for s in symbol_set:
        if s.endswith("usdt"):
            base = s[:-4].upper()
            symbols.append(f"{base}/USDT")
        else:
            symbols.append(s.upper())
    return sorted(list(symbols))

def get_date_range(table_name: str, db_config: Dict[str, Any] = None) -> Tuple[str, str]:
    """
    지정된 테이블에서 최소 및 최대 timestamp 값을 조회합니다.

    Returns:
        Tuple[str, str]: (start_date, end_date) 형식의 문자열.
                         조회 실패 시 (None, None)을 반환.
    """
    if db_config is None:
        db_config = DATABASE
    try:
        engine = create_db_engine(db_config)
    except Exception as e:
        logger.error(f"DB 엔진 생성 에러: {e}", exc_info=True)
        return None, None

    query = f"SELECT MIN(timestamp) AS start_date, MAX(timestamp) AS end_date FROM {table_name}"
    query = text(query)
    try:
        with engine.connect() as conn:
            result = conn.execute(query)
            row = result.fetchone()
            if row and row[0] and row[1]:
                start_date = row[0].strftime("%Y-%m-%d %H:%M:%S")
                end_date = row[1].strftime("%Y-%m-%d %H:%M:%S")
                return start_date, end_date
            else:
                logger.error(f"테이블 {table_name}에서 날짜 범위를 찾을 수 없습니다.")
                return None, None
    except Exception as e:
        logger.error(f"날짜 범위 조회 에러 ({table_name}): {e}", exc_info=True)
        return None, None

---

# data/store_data.py
"""
이 모듈은 수집된 OHLCV 데이터를 데이터베이스에 저장하는 기능만 제공합니다.
데이터 저장 시 중복 삽입 방지를 위해 'ON CONFLICT DO NOTHING' 전략을 사용합니다.
"""

from sqlalchemy import text
from psycopg2.extras import execute_values
import pandas as pd
from typing import Any, Iterable, Dict
from data.db_config import DATABASE
from data.data_utils import create_db_engine
from logs.log_config import setup_logger

logger = setup_logger(__name__)

def insert_on_conflict(table: Any, conn: Any, keys: list, data_iter: Iterable) -> None:
    """
    'timestamp' 컬럼에서 중복이 발생하면 아무 작업도 수행하지 않고 데이터를 삽입합니다.

    Parameters:
        table (Any): 대상 테이블 객체.
        conn (Any): SQLAlchemy 연결 객체.
        keys (list): 삽입할 컬럼 이름 리스트.
        data_iter (Iterable): 삽입할 데이터 목록.
    """
    try:
        raw_conn = conn.connection
        cur = raw_conn.cursor()
        values = list(data_iter)
        columns = ", ".join(keys)
        sql_str = f"INSERT INTO {table.name} ({columns}) VALUES %s ON CONFLICT (timestamp) DO NOTHING"
        execute_values(cur, sql_str, values)
        cur.close()
    except Exception as e:
        logger.error(f"insert_on_conflict 에러: {e}", exc_info=True)

def insert_ohlcv_records(
    df: pd.DataFrame,
    table_name: str = 'ohlcv_data',
    conflict_action: str = "DO NOTHING",
    db_config: Dict[str, Any] = None,
    chunk_size: int = 10000
) -> None:
    """
    OHLCV 데이터를 지정된 테이블에 삽입합니다.

    Parameters:
        df (pd.DataFrame): 삽입할 데이터.
        table_name (str): 대상 테이블 이름.
        conflict_action (str): 중복 처리 방식 (현재는 "DO NOTHING" 사용).
        db_config (dict): 데이터베이스 접속 정보.
        chunk_size (int): 한 번에 삽입할 행의 개수.
    """
    if db_config is None:
        db_config = DATABASE

    engine = create_db_engine(db_config)
    create_table_sql = text(f"""
        CREATE TABLE IF NOT EXISTS {table_name} (
            timestamp TIMESTAMP NOT NULL,
            open DOUBLE PRECISION,
            high DOUBLE PRECISION,
            low DOUBLE PRECISION,
            close DOUBLE PRECISION,
            volume DOUBLE PRECISION,
            PRIMARY KEY (timestamp)
        );
    """)
    try:
        with engine.begin() as conn:
            conn.execute(create_table_sql)
    except Exception as e:
        logger.error(f"테이블 생성 에러 ({table_name}): {e}", exc_info=True)
        return

    try:
        df_to_insert = df.copy()
        df_to_insert.reset_index(inplace=True)
        df_to_insert.to_sql(
            table_name,
            engine,
            if_exists='append',
            index=False,
            method=insert_on_conflict,
            chunksize=chunk_size
        )
    except Exception as e:
        logger.error(f"데이터 저장 에러 ({table_name}): {e}", exc_info=True)
