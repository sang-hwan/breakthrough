[strategies/base_strategy.py]
# strategies/base_strategy.py
# 이 파일은 모든 트레이딩 전략 클래스들이 상속할 기본 전략(BaseStrategy)을 정의합니다.
# 각 전략 클래스는 get_signal() 메서드를 구현하여 거래 신호를 생성해야 합니다.

from logs.logger_config import setup_logger  # 로깅 설정을 위한 함수 임포트

class BaseStrategy:
    def __init__(self):
        """
        기본 전략 클래스의 생성자.
        
        목적:
          - 자식 클래스에서 사용할 로거(logger) 객체를 초기화합니다.
        
        동작:
          - 클래스 이름을 이용해 로거를 설정함으로써, 로그 메시지에 전략 이름을 포함시킵니다.
        """
        self.logger = setup_logger(self.__class__.__name__)
    
    def get_signal(self, data, current_time, **kwargs):
        """
        거래 신호를 생성하기 위한 추상 메서드.
        
        Parameters:
            data (pandas.DataFrame): 거래 데이터 (예: OHLCV 데이터 등).
            current_time (datetime): 거래 신호를 생성할 기준 시점.
            **kwargs: 추가 인자들.
        
        Returns:
            str: 거래 신호 (예: "enter_long", "exit_all", "hold").
        
        주의:
            - 이 메서드는 구현되어 있지 않으므로 반드시 자식 클래스에서 오버라이딩 해야 합니다.
        """
        raise NotImplementedError("Subclasses must implement get_signal()")

[strategies/optimizer.py]
# strategies/optimizer.py
import optuna
from logs.logger_config import setup_logger  # 로거 설정 함수
from backtesting.backtester import Backtester  # 백테스트 수행 클래스
from config.config_manager import ConfigManager, TradingConfig  # 기본 파라미터 관리 및 검증을 위한 클래스
from data.db.db_manager import get_unique_symbol_list  # 데이터베이스에서 유니크 심볼 목록을 가져오는 함수

# 전역 logger 객체: 모듈 내에서 로깅에 사용
logger = setup_logger(__name__)

class DynamicParameterOptimizer:
    def __init__(self, n_trials=10, assets=None):
        """
        동적 파라미터 최적화 클래스의 생성자.
        
        목적:
          - 최적화 시도 횟수와 대상 자산 목록을 초기화합니다.
        
        Parameters:
            n_trials (int): 최적화 시도 횟수 (기본값: 10).
            assets (list, optional): 최적화에 사용할 자산 목록.
                                    주어지지 않을 경우 데이터베이스에서 유니크 심볼을 가져오거나 기본 목록 사용.
        """
        self.n_trials = n_trials  # 최적화 시도 횟수 저장
        self.study = None         # 최적화 결과를 저장할 optuna study 객체 (초기에는 None)
        self.config_manager = ConfigManager()  # 파라미터 기본값 및 유효성 검증을 위한 객체 생성
        # 자산 목록이 주어지지 않으면 데이터베이스에서 가져오거나, 없으면 기본 자산 사용
        self.assets = assets if assets is not None else (get_unique_symbol_list() or ["BTC/USDT", "ETH/USDT", "XRP/USDT"])

    def objective(self, trial):
        """
        optuna 최적화 objective 함수.
        
        목적:
          - 제안된 파라미터 조합에 대해 백테스트를 수행하고, 성능 점수를 계산합니다.
          - 점수가 낮을수록 해당 파라미터 조합이 더 우수하다는 의미입니다.
        
        Parameters:
            trial (optuna.trial.Trial): 현재 최적화 시도의 trial 객체.
        
        Returns:
            float: 계산된 성능 점수 (낮을수록 좋은 파라미터).
        """
        try:
            # 기본 파라미터 값 불러오기
            base_params = self.config_manager.get_defaults()
            
            # optuna를 사용하여 동적으로 파라미터 값을 추천받음
            suggested_params = {
                "hmm_confidence_threshold": trial.suggest_float("hmm_confidence_threshold", 0.7, 0.95),
                "liquidity_info": trial.suggest_categorical("liquidity_info", ["high", "low"]),
                "atr_multiplier": trial.suggest_float("atr_multiplier", 1.5, 3.0),
                "profit_ratio": trial.suggest_float("profit_ratio", 0.05, 0.15),
                "risk_per_trade": trial.suggest_float("risk_per_trade", 0.005, 0.02),
                "scale_in_threshold": trial.suggest_float("scale_in_threshold", 0.01, 0.03),
                "partial_exit_ratio": trial.suggest_float("partial_exit_ratio", 0.4, 0.6),
                "partial_profit_ratio": trial.suggest_float("partial_profit_ratio", 0.02, 0.04),
                "final_profit_ratio": trial.suggest_float("final_profit_ratio", 0.05, 0.1),
                "weekly_breakout_threshold": trial.suggest_float("weekly_breakout_threshold", 0.005, 0.02),
                "weekly_momentum_threshold": trial.suggest_float("weekly_momentum_threshold", 0.3, 0.7),
                "risk_reward_ratio": trial.suggest_float("risk_reward_ratio", 1.0, 5.0)
            }
            # 기본 파라미터와 추천받은 파라미터를 병합하여 최종 파라미터 집합 생성
            dynamic_params = {**base_params, **suggested_params}
            # 구성 매니저를 통해 파라미터 유효성 검사 수행
            dynamic_params = self.config_manager.validate_params(dynamic_params)

            try:
                # TradingConfig 객체를 생성해 파라미터의 추가 검증을 진행
                _ = TradingConfig(**dynamic_params)
            except Exception as e:
                logger.error("Validation error in dynamic_params: " + str(e), exc_info=True)
                return 1e6  # 유효하지 않은 경우 큰 패널티 값 반환

            # 백테스트 기간 설정 (학습, 테스트, 홀드아웃 단계로 구분)
            splits = [{
                "train_start": "2018-06-01",
                "train_end": "2020-12-31",
                "test_start": "2021-01-01",
                "test_end": "2023-12-31"
            }]
            holdout = {"holdout_start": "2024-01-01", "holdout_end": "2025-02-01"}

            total_score, num_evaluations = 0.0, 0

            # 각 기간 및 자산에 대해 백테스트를 수행하여 점수를 계산
            for split in splits:
                for asset in self.assets:
                    # 심볼 키 생성 (예: "BTC/USDT" -> "btcusdt") => 테이블 이름 생성에 사용
                    symbol_key = asset.replace("/", "").lower()
                    try:
                        # 학습 단계: 지정된 기간 동안 백테스트 실행
                        bt_train = Backtester(symbol=asset, account_size=10000)
                        bt_train.load_data(
                            short_table_format=f"ohlcv_{symbol_key}_{{timeframe}}",
                            long_table_format=f"ohlcv_{symbol_key}_{{timeframe}}",
                            short_tf="4h", long_tf="1d",
                            start_date=split["train_start"], end_date=split["train_end"]
                        )
                        trades_train, _ = bt_train.run_backtest(dynamic_params)
                        # 학습 단계 수익률(ROI) 계산
                        roi_train = sum(trade["pnl"] for trade in trades_train) / 10000 * 100

                        # 테스트 단계: 다른 기간에 대해 백테스트 실행
                        bt_test = Backtester(symbol=asset, account_size=10000)
                        bt_test.load_data(
                            short_table_format=f"ohlcv_{symbol_key}_{{timeframe}}",
                            long_table_format=f"ohlcv_{symbol_key}_{{timeframe}}",
                            short_tf="4h", long_tf="1d",
                            start_date=split["test_start"], end_date=split["test_end"]
                        )
                        trades_test, _ = bt_test.run_backtest(dynamic_params)
                        roi_test = sum(trade["pnl"] for trade in trades_test) / 10000 * 100

                        # 홀드아웃 단계: 최종 검증을 위한 별도 기간
                        bt_holdout = Backtester(symbol=asset, account_size=10000)
                        bt_holdout.load_data(
                            short_table_format=f"ohlcv_{symbol_key}_{{timeframe}}",
                            long_table_format=f"ohlcv_{symbol_key}_{{timeframe}}",
                            short_tf="4h", long_tf="1d",
                            start_date=holdout["holdout_start"], end_date=holdout["holdout_end"]
                        )
                        trades_holdout, _ = bt_holdout.run_backtest(dynamic_params)
                        roi_holdout = sum(trade["pnl"] for trade in trades_holdout) / 10000 * 100

                        # 과적합(overfit) 패널티: 학습과 테스트 단계의 수익률 차이를 절대값으로 계산
                        overfit_penalty = abs(roi_train - roi_test)
                        # 홀드아웃 패널티: 홀드아웃 수익률이 최소 2% 미만이면 부족분에 비례해 패널티 부과
                        holdout_penalty = 0 if roi_holdout >= 2.0 else (2.0 - roi_holdout) * 20
                        # 최종 점수 계산: 테스트 수익률의 음수에 패널티들을 더함 (낮을수록 우수)
                        score = -roi_test + overfit_penalty + holdout_penalty
                        total_score += score
                        num_evaluations += 1
                    except Exception as e:
                        logger.error(f"Backtest error for {asset} in split {split}: {e}", exc_info=True)
                        # 백테스트 중 오류가 발생하면 해당 평가 건너뜀
                        continue

            if num_evaluations == 0:
                return 1e6  # 평가가 하나도 진행되지 않았을 경우 큰 페널티 반환
            avg_score = total_score / num_evaluations
            # 정규화 패널티: 주요 파라미터가 기본값에서 벗어난 정도에 따른 패널티 부과
            reg_penalty = 0.1 * sum(
                (dynamic_params.get(key, base_params.get(key, 1.0)) - base_params.get(key, 1.0)) ** 2
                for key in ["atr_multiplier", "profit_ratio", "risk_per_trade", "scale_in_threshold",
                            "weekly_breakout_threshold", "weekly_momentum_threshold"]
            )
            return avg_score + reg_penalty

        except Exception as e:
            logger.error("Unexpected error in objective: " + str(e), exc_info=True)
            return 1e6

    def optimize(self):
        """
        최적화 실행 함수.
        
        목적:
          - n_trials 횟수 동안 objective 함수를 최적화하여 최적의 동적 파라미터 조합을 도출합니다.
        
        Returns:
            optuna.trial.FrozenTrial: 최적의 파라미터 조합과 해당 점수를 포함하는 trial 객체.
        """
        # TPESampler: 효율적인 파라미터 탐색을 위해 Tree-structured Parzen Estimator 사용 (시드 42로 고정)
        sampler = optuna.samplers.TPESampler(seed=42)
        # 최적화 study 생성 (방향은 최소화)
        self.study = optuna.create_study(direction="minimize", sampler=sampler)
        # n_trials 횟수 만큼 objective 함수를 최적화 수행
        self.study.optimize(self.objective, n_trials=self.n_trials)
        best_trial = self.study.best_trial
        # 최적 결과를 디버그 로그로 기록
        logger.debug(f"Best trial: {best_trial.number}, Value: {best_trial.value:.2f}")
        logger.debug(f"Best parameters: {best_trial.params}")
        return best_trial

[strategies/param_analysis.py]
# strategies/param_analysis.py
import numpy as np
from itertools import product  # 여러 파라미터 값들의 모든 조합 생성을 위해 사용
import random
from logs.logger_config import setup_logger  # 로깅 설정 함수
from backtesting.backtester import Backtester  # 백테스트 수행 클래스
from config.config_manager import ConfigManager  # 기본 파라미터 관리 클래스

# 전역 logger 객체: 모듈 내 로그 기록에 사용
logger = setup_logger(__name__)

def run_sensitivity_analysis(param_settings,
                             assets,
                             short_tf="4h", long_tf="1d",
                             start_date="2018-06-01", end_date="2020-12-31",
                             periods=None,
                             base_dynamic_params=None,
                             max_combinations=20):
    """
    다양한 파라미터 조합에 대해 민감도 분석을 수행하고, 전략 성능의 변화를 평가합니다.
    
    Parameters:
        param_settings (dict): 각 파라미터 이름과 해당 파라미터가 가질 수 있는 값들의 리스트.
        assets (list): 분석에 사용할 자산 목록.
        short_tf (str): 단기 시간 프레임 (예: "4h").
        long_tf (str): 장기 시간 프레임 (예: "1d").
        start_date (str): 분석 시작 날짜 (YYYY-MM-DD).
        end_date (str): 분석 종료 날짜 (YYYY-MM-DD).
        periods (list of tuples, optional): (시작 날짜, 종료 날짜) 쌍의 리스트.
                                             지정하지 않으면 start_date ~ end_date 전체 기간 사용.
        base_dynamic_params (dict, optional): 기본 동적 파라미터 값.
                                              지정하지 않으면 ConfigManager에서 기본값을 불러옴.
        max_combinations (int): 시도할 최대 파라미터 조합 수.
                                모든 조합이 max_combinations보다 많으면 무작위로 샘플링.
    
    Returns:
        dict: 각 파라미터 조합에 대해 집계된 성능 지표 (ROI, Sharpe ratio, 최대 낙폭 등)를 담은 결과.
    """
    # periods가 지정되지 않으면 전체 기간을 하나의 기간으로 사용
    if periods is None:
        periods = [(start_date, end_date)]
    # base_dynamic_params가 없으면 기본값을 불러옴
    if base_dynamic_params is None:
        base_dynamic_params = ConfigManager().get_defaults()

    logger.debug(f"Starting sensitivity analysis over assets: {assets}")
    results = {}
    # 분석할 파라미터 이름 추출
    param_names = list(param_settings.keys())
    # 각 파라미터의 가능한 값들로 모든 조합 생성
    combinations = list(product(*(param_settings[name] for name in param_names)))
    # 조합 수가 max_combinations보다 많으면 무작위 샘플링하여 제한
    if len(combinations) > max_combinations:
        combinations = random.sample(combinations, max_combinations)

    # 각 파라미터 조합에 대해 백테스트를 수행하고 결과를 집계
    for combo in combinations:
        dynamic_params = base_dynamic_params.copy()
        # 파라미터 이름과 값 쌍을 튜플 형태로 정렬하여 결과 딕셔너리의 키로 사용
        combo_key = tuple(sorted(zip(param_names, combo)))
        run_metrics = []  # 해당 조합의 백테스트 성능 지표를 저장할 리스트
        for asset in assets:
            # 테이블 이름 구성에 사용할 심볼 키 생성 (예: "BTC/USDT" -> "btcusdt")
            symbol_key = asset.replace("/", "").lower()
            for s_date, e_date in periods:
                try:
                    # 백테스터 인스턴스 생성 (초기 계좌 잔액: 10000)
                    bt = Backtester(symbol=asset, account_size=10000)
                    bt.load_data(
                        short_table_format=f"ohlcv_{symbol_key}_{{timeframe}}",
                        long_table_format=f"ohlcv_{symbol_key}_{{timeframe}}",
                        short_tf=short_tf, long_tf=long_tf,
                        start_date=s_date, end_date=e_date
                    )
                    # 현재 조합의 파라미터로 덮어쓰기
                    for name, val in combo_key:
                        dynamic_params[name] = val
                    # 백테스트 파이프라인 실행 (전략 적용 및 거래 결과 산출)
                    trades, _ = bt.run_backtest_pipeline(dynamic_params=dynamic_params)
                    logger.info(f"{asset} {s_date}~{e_date}: {len(trades)} trades executed.")
                    if trades:
                        # ROI(수익률) 계산: 총 pnl을 초기 계좌 잔액으로 나누고 백분율로 환산
                        roi = sum(trade.get("pnl", 0) for trade in trades) / 10000 * 100
                        logger.info(f"{asset} {s_date}~{e_date}: ROI={roi:.2f}%")
                        from backtesting.performance import compute_performance
                        # 성능 지표(Sharpe, 최대 낙폭 등) 계산
                        perf = compute_performance(trades)
                        run_metrics.append(perf)
                    else:
                        logger.warning(f"{asset} {s_date}~{e_date}: No trades executed.")
                except Exception as e:
                    logger.error(f"Error during sensitivity analysis for {asset} with combination {combo_key}: {e}", exc_info=True)
                    continue
        # 각 조합별 성능 지표 집계: 평균, 표준편차, 최소, 최대 계산
        if run_metrics:
            aggregated = {}
            for key in ["roi", "sharpe_ratio", "max_drawdown", "trade_count", "cumulative_return", "total_pnl"]:
                values = [run.get(key, 0) for run in run_metrics]
                aggregated[key] = {
                    "mean": np.mean(values),
                    "std": np.std(values),
                    "min": np.min(values),
                    "max": np.max(values)
                }
            results[combo_key] = aggregated
        else:
            results[combo_key] = None
    return results
