[tests/asset_manager/test_asset_manager.py]
# tests/asset_manager/test_asset_manager.py

# core.account 모듈에서 Account 클래스를 가져옵니다.
from core.account import Account
# trading.asset_manager 모듈에서 AssetManager 클래스를 가져옵니다.
from trading.asset_manager import AssetManager

def test_rebalance_bullish():
    """
    bullish(상승장) 상황에서 자산 리밸런싱이 정상적으로 이루어지는지 테스트합니다.
    
    - 초기 잔고를 설정하고, 현물과 스테이블코인 잔고를 임의로 할당합니다.
    - bullish 시장에서는 목표 현물 비중이 총 자산의 90%가 되도록 리밸런싱을 수행합니다.
    - 리밸런싱 후 현물 잔고가 증가해야 하므로 이를 검증합니다.
    
    Parameters:
        없음
        
    Returns:
        없음 (assertion을 통해 테스트 결과를 검증)
    """
    # 초기 잔고 10,000달러로 Account 객체 생성
    account = Account(initial_balance=10000)
    # 가상 계좌에 현물 잔고 4,000달러, 스테이블코인 잔고 6,000달러 할당
    account.spot_balance = 4000
    account.stablecoin_balance = 6000
    # AssetManager 객체 생성. 리밸런싱 최소 임계치 1% 및 간격 0분으로 설정
    am = AssetManager(account, min_rebalance_threshold=0.01, min_rebalance_interval_minutes=0)
    # bullish 시장에서는 목표로 하는 현물 비중이 높아지도록 리밸런싱 수행
    am.rebalance("bullish")
    # 리밸런싱 후 현물 잔고가 4,000달러보다 커졌는지 확인
    assert account.spot_balance > 4000

def test_rebalance_bearish():
    """
    bearish(하락장) 상황에서 자산 리밸런싱이 정상적으로 이루어지는지 테스트합니다.
    
    - 초기 잔고를 설정하고, 현물과 스테이블코인 잔고를 임의로 할당합니다.
    - bearish 시장에서는 리스크 관리를 위해 현물 보유 비중을 낮추도록 리밸런싱을 수행합니다.
    - 리밸런싱 후 현물 잔고가 감소했는지 확인합니다.
    
    Parameters:
        없음
        
    Returns:
        없음 (assertion을 통해 테스트 결과를 검증)
    """
    # 초기 잔고 10,000달러로 Account 객체 생성
    account = Account(initial_balance=10000)
    # 가상 계좌에 현물 잔고 8,000달러, 스테이블코인 잔고 2,000달러 할당
    account.spot_balance = 8000
    account.stablecoin_balance = 2000
    # AssetManager 객체 생성 (리밸런싱 최소 임계치 1%, 간격 0분)
    am = AssetManager(account, min_rebalance_threshold=0.01, min_rebalance_interval_minutes=0)
    # bearish 시장 상황에 맞게 리밸런싱 수행
    am.rebalance("bearish")
    # 리밸런싱 후 현물 잔고가 8,000달러보다 작아졌는지 확인
    assert account.spot_balance < 8000

[tests/backtesting/test_backtest_default_trade.py]
# tests/backtesting/test_backtest_default_trade.py

import pytest
# 백테스트 로직이 구현된 Backtester 클래스를 임포트
from backtesting.backtester import Backtester
# 기본 파라미터 관리를 위한 ConfigManager 클래스 임포트
from config.config_manager import ConfigManager
import numpy as np
import pandas as pd

@pytest.fixture
def sample_ohlcv_data():
    """
    간단한 테스트용 OHLCV 데이터를 생성하는 fixture.
    
    - 시작일: 2022-01-01, 기간: 60일, 빈도: 일간(D)
    - open, high, low, close 가격은 선형 보간(linear space)로 생성
    - volume은 모든 값이 1000인 리스트
    
    Returns:
        pd.DataFrame: 생성된 OHLCV 데이터 (인덱스는 날짜)
    """
    # 날짜 범위를 생성합니다.
    dates = pd.date_range(start="2022-01-01", periods=60, freq="D")
    # OHLCV 데이터를 생성 (np.linspace로 선형 분포 생성)
    df = pd.DataFrame({
        "open": np.linspace(100, 160, 60),   # 시작값 100에서 160까지 60단계 분포
        "high": np.linspace(105, 165, 60),
        "low": np.linspace(95, 155, 60),
        "close": np.linspace(100, 160, 60),
        "volume": [1000] * 60
    }, index=dates)
    return df

def test_default_config_backtest(sample_ohlcv_data, monkeypatch):
    """
    기본 파라미터를 사용하여 백테스트 파이프라인이 정상적으로 실행되고 거래가 발생하는지 검증합니다.
    
    - Backtester 인스턴스를 생성한 후, 테스트용 데이터를 각 데이터프레임에 할당합니다.
    - 외부 의존성을 제거하기 위해 HMM, 지표 적용, short 데이터 업데이트 및 시그널 결정 함수를 dummy lambda 함수로 오버라이드합니다.
    - ConfigManager를 통해 기본 파라미터를 가져와 백테스트를 실행합니다.
    - 거래(trades) 리스트에 최소 1건 이상의 거래가 발생했는지 확인합니다.
    
    Parameters:
        sample_ohlcv_data (pd.DataFrame): 위에서 생성한 테스트용 OHLCV 데이터
        monkeypatch: pytest의 monkeypatch fixture, 외부 의존성을 오버라이드하기 위해 사용
        
    Returns:
        없음 (assertion을 통해 테스트 결과를 검증)
    """
    # 테스트할 자산 심볼 설정
    asset = "BTC/USDT"
    symbol_key = asset.replace("/", "").lower()  # 예: btcusdt
    # 백테스터 객체 생성, 초기 계좌 사이즈 10,000달러
    bt = Backtester(symbol=asset, account_size=10000)
    
    # 테스트를 위해 sample_ohlcv_data를 백테스터의 각 데이터프레임에 할당
    bt.df_long = sample_ohlcv_data.copy()
    bt.df_short = sample_ohlcv_data.copy()
    bt.df_train = sample_ohlcv_data.copy()
    
    # 외부 의존성 제거: 각 메서드를 dummy 함수(lambda)로 오버라이드
    bt.apply_indicators = lambda: None
    bt.update_hmm_regime = lambda dynamic_params: pd.Series(["bullish"] * len(bt.df_long), index=bt.df_long.index)
    bt.update_short_dataframe = lambda regime_series, dynamic_params: None
    bt.ensemble_manager.get_final_signal = lambda regime, liquidity, data, current_time, data_weekly=None: "enter_long"
    
    # ConfigManager를 사용하여 기본 파라미터(defaults) 가져오기
    cm = ConfigManager()
    default_params = cm.get_defaults()
    
    # 백테스트 파이프라인 실행: dynamic_params를 기본 파라미터로 사용
    trades, trade_logs = bt.run_backtest_pipeline(dynamic_params=default_params)
    
    # trades가 리스트 타입인지 확인
    assert isinstance(trades, list)
    # 거래가 최소 1건 이상 발생했는지 확인 (테스트 환경에 따라 임계값 조정 가능)
    assert len(trades) > 0, "기본 파라미터로 실행 시 거래가 체결되어야 합니다."

[tests/backtesting/test_backtester_integration.py]
# tests/backtesting/test_backtester_integration.py

import pandas as pd
import numpy as np
import pytest
from backtesting.backtester import Backtester

@pytest.fixture
def dummy_data():
    """
    통합 테스트용 더미 데이터를 생성하는 fixture.
    
    - 30일치 long 데이터 생성 (날짜 범위: 2023-01-01 ~)
    - 생성된 long 데이터를 시간해상도로 리샘플링하여 short 데이터를 생성
     
    Returns:
        tuple: (df_long, df_short) 두 개의 DataFrame을 반환
    """
    # 30일치 long 데이터 생성
    dates = pd.date_range(start="2023-01-01", periods=30, freq="D")
    df_long = pd.DataFrame({
        "open": np.linspace(100, 130, 30),
        "high": np.linspace(105, 135, 30),
        "low": np.linspace(95, 125, 30),
        "close": np.linspace(100, 130, 30),
    }, index=dates)
    # long 데이터를 시간별(h)로 리샘플링하여 short 데이터 생성 (앞의 값 채움)
    df_short = df_long.resample('h').ffill()
    return df_long, df_short

def test_backtester_integration(dummy_data):
    """
    Backtester 클래스의 통합 테스트를 수행합니다.
    
    - dummy_data를 사용하여 백테스터의 long, short, train 데이터를 할당합니다.
    - 외부 의존성을 제거하기 위해 HMM, 지표, 위험 관리, 시그널 결정 등의 메서드를 dummy lambda 함수로 오버라이드합니다.
    - 또한 더미 AssetManager를 생성하여 rebalance 함수는 아무 작업도 하지 않도록 합니다.
    - 최종적으로 백테스트를 실행한 후, trades와 trade_logs가 리스트로 반환되는지 확인합니다.
    
    Parameters:
        dummy_data (tuple): dummy_data fixture로부터 받은 (df_long, df_short)
        
    Returns:
        없음 (assertion을 통해 테스트 결과를 검증)
    """
    df_long, df_short = dummy_data
    # 백테스터 객체 생성, 초기 계좌 사이즈 10,000달러, 심볼은 "BTC/USDT"
    backtester = Backtester(symbol="BTC/USDT", account_size=10000)
    
    # 더미 데이터를 직접 백테스터 객체의 속성에 할당
    backtester.df_long = df_long.copy()
    backtester.df_short = df_short.copy()
    backtester.df_train = df_short.copy()
    backtester.last_signal_time = None
    backtester.last_rebalance_time = None
    backtester.positions = []
    
    # 외부 의존성을 제거하기 위해 필요한 메서드들을 dummy 함수(lambda)로 오버라이드
    backtester.update_hmm_regime = lambda dynamic_params: pd.Series(["bullish"] * len(backtester.df_long), index=backtester.df_long.index)
    backtester.apply_indicators = lambda: None
    backtester.update_short_dataframe = lambda regime_series, dynamic_params: None
    backtester.risk_manager.compute_risk_parameters_by_regime = lambda base_params, regime, liquidity="high": base_params
    backtester.ensemble_manager.get_final_signal = lambda regime, liquidity, data, current_time, data_weekly=None: "hold"
    # DummyAssetManager: rebalance 메서드는 아무 작업도 수행하지 않음
    backtester.asset_manager = type("DummyAssetManager", (), {"rebalance": lambda self, regime: None})()
    # 주간 데이터를 생성: long 데이터에서 주간 마지막 값을 추출하여 df_weekly 생성
    backtester.df_weekly = df_long.resample('W').last()
    
    # 백테스트 실행: dynamic_params에 시그널 쿨다운과 리밸런싱 간격을 설정
    trades, trade_logs = backtester.run_backtest(dynamic_params={"signal_cooldown_minutes": 5, "rebalance_interval_minutes": 60})
    # trades와 trade_logs가 리스트 타입인지 확인
    assert isinstance(trades, list)
    assert isinstance(trade_logs, list)

[tests/backtesting/test_data_validation.py]
# tests/backtesting/test_data_validation.py

import pandas as pd
import pytest
# 데이터 로딩 및 검증 함수 load_data를 임포트합니다.
from backtesting.steps.data_loader import load_data

# 더미 백테스터 클래스를 정의합니다.
class DummyBacktester:
    """
    백테스트 로직에서 사용하기 위한 최소한의 속성을 가진 더미 클래스.
    
    Attributes:
        symbol (str): 거래할 자산 심볼 (예: "BTC/USDT")
        df_short (pd.DataFrame): 짧은 주기 데이터 (초기값 None)
        df_long (pd.DataFrame): 긴 주기 데이터 (초기값 None)
    """
    def __init__(self, symbol="BTC/USDT"):
        self.symbol = symbol
        self.df_short = None
        self.df_long = None

def dummy_fetch_ohlcv_records(table_name, start_date, end_date):
    """
    fetch_ohlcv_records 함수의 더미 구현.
    
    - 유효한 날짜 범위(start_date < end_date)인 경우, non-empty DataFrame 반환.
    - 그렇지 않으면 빈 DataFrame 반환.
    
    Parameters:
        table_name (str): 데이터베이스 테이블 이름 (사용되지만 실제로는 dummy 데이터 생성)
        start_date (str): 데이터 시작 날짜
        end_date (str): 데이터 종료 날짜
        
    Returns:
        pd.DataFrame: 생성된 OHLCV 데이터 또는 빈 DataFrame
    """
    if start_date and end_date and start_date < end_date:
        dates = pd.date_range(start=start_date, end=end_date, freq='D')
        df = pd.DataFrame({
            "open": [100] * len(dates),
            "high": [110] * len(dates),
            "low": [90] * len(dates),
            "close": [105] * len(dates),
            "volume": [1000] * len(dates)
        }, index=dates)
        return df
    else:
        return pd.DataFrame()

# 모든 테스트에서 fetch_ohlcv_records를 dummy_fetch_ohlcv_records로 패치합니다.
@pytest.fixture(autouse=True)
def patch_fetch_ohlcv(monkeypatch):
    """
    pytest의 monkeypatch를 사용하여 데이터 로더에서 fetch_ohlcv_records 함수를
    dummy_fetch_ohlcv_records로 교체하는 fixture.
    
    Parameters:
        monkeypatch: pytest fixture
        
    Returns:
        없음
    """
    monkeypatch.setattr("backtesting.steps.data_loader.fetch_ohlcv_records", dummy_fetch_ohlcv_records)

def test_load_data_valid():
    """
    올바른 날짜 범위를 사용하여 load_data 함수가 올바른 데이터를 로드하는지 테스트합니다.
    
    - DummyBacktester 객체를 생성하고, 테이블 포맷 및 타임프레임, 시작일, 종료일을 설정합니다.
    - load_data를 호출한 후, df_short와 df_long 속성이 None이 아니고 빈 DataFrame이 아님을 확인합니다.
    
    Parameters:
        없음
        
    Returns:
        없음 (assertion을 통해 테스트 결과를 검증)
    """
    backtester = DummyBacktester(symbol="BTC/USDT")
    short_table_format = "ohlcv_{symbol}_{timeframe}"
    long_table_format = "ohlcv_{symbol}_{timeframe}"
    short_tf = "1d"
    long_tf = "1d"
    start_date = "2023-01-01"
    end_date = "2023-01-10"
    # load_data 호출 시 정상적인 데이터가 로드되어야 함.
    load_data(backtester, short_table_format, long_table_format, short_tf, long_tf, start_date, end_date)
    assert backtester.df_short is not None and not backtester.df_short.empty
    assert backtester.df_long is not None and not backtester.df_long.empty

def test_load_data_invalid():
    """
    잘못된 날짜 범위 (시작일이 종료일보다 늦은 경우)를 사용하여 load_data 함수가 ValueError를 발생시키는지 테스트합니다.
    
    Parameters:
        없음
        
    Returns:
        없음 (ValueError 발생 여부로 검증)
    """
    backtester = DummyBacktester(symbol="BTC/USDT")
    short_table_format = "ohlcv_{symbol}_{timeframe}"
    long_table_format = "ohlcv_{symbol}_{timeframe}"
    short_tf = "1d"
    long_tf = "1d"
    # 시작일이 종료일보다 늦은 잘못된 날짜 범위 설정
    start_date = "2023-01-10"
    end_date = "2023-01-01"
    with pytest.raises(ValueError):
        load_data(backtester, short_table_format, long_table_format, short_tf, long_tf, start_date, end_date)

[tests/backtesting/test_ohlcv_aggregator.py]
# tests/backtesting/test_ohlcv_aggregator.py

import pandas as pd
import numpy as np
# 주간(weekly) 데이터로 집계하는 함수를 임포트합니다.
from data.ohlcv.ohlcv_aggregator import aggregate_to_weekly

def test_aggregate_to_weekly_includes_weekly_low_high():
    """
    주간 데이터 집계 시, weekly_low 및 weekly_high 컬럼이 포함되는지와
    최소 두 개 이상의 주간 데이터가 생성되는지 테스트합니다.
    
    - 21일치 데이터(약 3주 분량)를 생성한 후, aggregate_to_weekly 함수를 호출합니다.
    - 결과 DataFrame에 weekly_low와 weekly_high 컬럼이 포함되어 있는지 검증합니다.
    - 집계 결과로 생성된 주간 데이터가 2개 이상임을 확인합니다.
    
    Parameters:
        없음
        
    Returns:
        없음 (assertion을 통해 테스트 결과를 검증)
    """
    # 21일치 날짜 범위 생성
    dates = pd.date_range(start='2020-01-01', periods=21, freq='D')
    # OHLCV 데이터 생성 (open, high, low, close는 선형 분포, volume은 임의의 정수)
    data = pd.DataFrame({
        'open': np.linspace(100, 120, len(dates)),
        'high': np.linspace(105, 125, len(dates)),
        'low': np.linspace(95, 115, len(dates)),
        'close': np.linspace(102, 122, len(dates)),
        'volume': np.random.randint(100, 200, len(dates))
    }, index=dates)
    # 주간 데이터로 집계 (compute_indicators=True, SMA 윈도우 5)
    weekly = aggregate_to_weekly(data, compute_indicators=True, sma_window=5)
    # weekly_low, weekly_high 컬럼이 존재하는지 확인
    assert 'weekly_low' in weekly.columns
    assert 'weekly_high' in weekly.columns
    # 주간 데이터가 최소 2개 이상 생성되었는지 확인
    assert len(weekly) >= 2

[tests/backtesting/test_ohlcv_variability.py]
# tests/backtesting/test_ohlcv_variability.py

import pandas as pd
import numpy as np
import pytest
# OHLCV 데이터의 유효성을 검증하는 내부 함수 임포트
from backtesting.steps.data_loader import _validate_and_prepare_df
# 로거 설정 함수 임포트 (로그 메시지 확인에 사용)
from logs.logger_config import setup_logger

# 현재 모듈의 로거 객체를 생성합니다.
logger = setup_logger(__name__)

@pytest.fixture
def constant_ohlcv():
    """
    거의 일정한 OHLCV 데이터를 생성하는 fixture (낮은 변동성).
    
    - 10일치 데이터를 생성하며, 가격은 거의 일정하며 미세한 변동만 있음.
    
    Returns:
        pd.DataFrame: 일정한 OHLCV 데이터 (인덱스는 날짜)
    """
    dates = pd.date_range(start='2020-01-01', periods=10, freq='D')
    data = {
        'open': np.full(10, 100.0),
        'high': np.full(10, 100.01),  # 극히 미세한 변동
        'low': np.full(10, 99.99),
        'close': np.full(10, 100.0),
        'volume': np.full(10, 1000)
    }
    df = pd.DataFrame(data, index=dates)
    return df

@pytest.fixture
def volatile_ohlcv():
    """
    충분한 변동성을 가지는 OHLCV 데이터를 생성하는 fixture.
    
    - 재현성을 위해 난수 시드를 고정하고, 가격에 대한 변동성이 충분히 나타나도록 데이터를 생성합니다.
    
    Returns:
        pd.DataFrame: 변동성이 큰 OHLCV 데이터 (인덱스는 날짜)
    """
    np.random.seed(42)
    dates = pd.date_range(start='2020-01-01', periods=10, freq='D')
    open_prices = np.linspace(100, 110, 10)
    high_prices = open_prices + np.random.uniform(1, 2, 10)
    low_prices = open_prices - np.random.uniform(1, 2, 10)
    close_prices = open_prices + np.random.uniform(-1, 1, 10)
    volume = np.random.randint(1000, 2000, 10)
    df = pd.DataFrame({
        'open': open_prices,
        'high': high_prices,
        'low': low_prices,
        'close': close_prices,
        'volume': volume
    }, index=dates)
    return df

def test_low_volatility_warning(caplog, constant_ohlcv):
    """
    낮은 변동성 데이터를 사용할 때 경고 메시지가 로깅되는지 테스트합니다.
    
    - caplog을 사용하여 로깅된 경고 메시지를 캡처합니다.
    - _validate_and_prepare_df 함수를 호출 후, "low volatility" 경고 메시지가 포함되었는지 검증합니다.
    
    Parameters:
        caplog: pytest의 로그 캡처 fixture
        constant_ohlcv (pd.DataFrame): 낮은 변동성 데이터
        
    Returns:
        없음 (assertion을 통해 테스트 결과를 검증)
    """
    caplog.set_level("WARNING")
    # 실제 테이블 명칭 예시: "ohlcv_btcusdt_1d"
    table_name = "ohlcv_btcusdt_1d"
    _validate_and_prepare_df(constant_ohlcv, table_name)
    # 로깅된 메시지 중 "low volatility" 문자열이 포함되었는지 확인
    warning_found = any("low volatility" in record.message for record in caplog.records)
    assert warning_found, "낮은 변동성 데이터에 대해 경고가 발생해야 합니다."

def test_high_volatility_no_warning(caplog, volatile_ohlcv):
    """
    충분한 변동성 데이터를 사용할 때 경고 메시지가 발생하지 않는지 테스트합니다.
    
    - caplog을 사용하여 로깅된 경고 메시지를 캡처한 후, "low volatility" 메시지가 없는지 확인합니다.
    
    Parameters:
        caplog: pytest의 로그 캡처 fixture
        volatile_ohlcv (pd.DataFrame): 변동성이 큰 데이터
        
    Returns:
        없음 (assertion을 통해 테스트 결과를 검증)
    """
    caplog.set_level("WARNING")
    table_name = "ohlcv_btcusdt_1d"
    _validate_and_prepare_df(volatile_ohlcv, table_name)
    # 로깅된 메시지 중 "low volatility" 문자열이 없는지 확인
    warning_found = any("low volatility" in record.message for record in caplog.records)
    assert not warning_found, "충분한 변동성 데이터에서는 경고가 발생하면 안 됩니다."
