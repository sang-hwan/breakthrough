[tests/trading/test_calculators.py]
# tests/trading/test_calculators.py
# 이 모듈은 거래 실행 및 리스크 관리와 관련된 계산 함수들(ATR, 동적 스탑/테이크, 부분 청산 목표, 후행 스탑 조정)의 정확성을 검증합니다.

import pandas as pd  # DataFrame 조작용
import numpy as np  # 수치 계산용
import pytest  # 테스트 케이스 작성을 위한 패키지
from trading.calculators import (
    calculate_atr,
    calculate_dynamic_stop_and_take,
    calculate_partial_exit_targets,
    adjust_trailing_stop
)  # 테스트할 계산 함수들

def test_calculate_atr():
    """
    calculate_atr 함수가 ATR(평균 진폭)을 올바르게 계산하여 'atr' 컬럼을 추가하는지 테스트합니다.
    
    생성된 데이터프레임에 대해 고가, 저가, 종가 데이터를 사용하여 ATR을 계산합니다.
    """
    data = pd.DataFrame({
        "high": np.linspace(110, 120, 15),  # 고가 데이터
        "low": np.linspace(100, 110, 15),     # 저가 데이터
        "close": np.linspace(105, 115, 15)    # 종가 데이터
    })
    data = calculate_atr(data, period=14)  # ATR 계산 (기간: 14)
    assert "atr" in data.columns  # 'atr' 컬럼 존재 여부 확인

def test_dynamic_stop_and_take():
    """
    calculate_dynamic_stop_and_take 함수가 주어진 진입가, ATR 및 리스크 파라미터를 바탕으로 동적 스탑로스와 테이크프로핏을 올바르게 계산하는지 테스트합니다.
    
    검증 조건: 스탑로스는 진입가보다 낮고, 테이크프로핏은 진입가보다 높아야 합니다.
    """
    entry_price = 100
    atr = 5
    risk_params = {"atr_multiplier": 2.0, "profit_ratio": 0.05, "volatility_multiplier": 1.0}
    stop_loss, take_profit = calculate_dynamic_stop_and_take(entry_price, atr, risk_params)
    assert stop_loss < entry_price
    assert take_profit > entry_price

def test_partial_exit_targets():
    """
    calculate_partial_exit_targets 함수가 부분 청산 목표를 올바르게 계산하여 리스트 형태로 반환하는지 테스트합니다.
    
    반환된 리스트의 길이가 2인지 확인합니다.
    """
    targets = calculate_partial_exit_targets(100, partial_exit_ratio=0.5, partial_profit_ratio=0.03, final_profit_ratio=0.06)
    assert isinstance(targets, list)
    assert len(targets) == 2

def test_dynamic_stop_and_take_invalid_entry_price():
    """
    잘못된 진입가(0)가 입력될 경우, calculate_dynamic_stop_and_take 함수가 ValueError를 발생시키는지 테스트합니다.
    """
    with pytest.raises(ValueError):
        calculate_dynamic_stop_and_take(0, 5, {"atr_multiplier": 2.0, "profit_ratio": 0.05})

def test_dynamic_stop_and_take_invalid_atr():
    """
    ATR 값이 0일 때, calculate_dynamic_stop_and_take 함수가 기본 조정값을 사용하여 스탑로스와 테이크프로핏을 계산하는지 테스트합니다.
    """
    stop_loss, take_profit = calculate_dynamic_stop_and_take(100, 0, {"atr_multiplier": 2.0, "profit_ratio": 0.05})
    assert stop_loss == 98.00, f"Expected stop_loss 98.00, got {stop_loss}"
    assert take_profit == 104.00, f"Expected take_profit 104.00, got {take_profit}"

def test_adjust_trailing_stop_extreme():
    """
    극단적인 변동성 상황에서 adjust_trailing_stop 함수가 올바른 후행 스탑 값을 산출하는지 테스트합니다.
    
    검증 조건: 새로 계산된 스탑 값은 현재 가격보다 낮아야 합니다.
    """
    current_stop = 80
    current_price = 120
    highest_price = 130
    trailing_percentage = 0.05
    extreme_volatility = 10.0
    new_stop = adjust_trailing_stop(current_stop, current_price, highest_price, trailing_percentage, volatility=extreme_volatility)
    assert new_stop < current_price

def test_calculate_partial_exit_targets_invalid():
    """
    잘못된 진입가(0)가 입력될 경우, calculate_partial_exit_targets 함수가 ValueError를 발생시키는지 테스트합니다.
    """
    with pytest.raises(ValueError):
        calculate_partial_exit_targets(0, partial_exit_ratio=0.5, partial_profit_ratio=0.03, final_profit_ratio=0.06)

def test_calculate_dynamic_stop_and_take_extreme_profit_ratio():
    """
    극단적으로 높은 profit_ratio를 사용한 경우, calculate_dynamic_stop_and_take 함수가 올바른 스탑로스와 테이크프로핏을 계산하는지 테스트합니다.
    """
    entry_price = 100
    atr = 5
    stop_loss, take_profit = calculate_dynamic_stop_and_take(entry_price, atr, {"atr_multiplier": 2.0, "profit_ratio": 1.5})
    assert take_profit == pytest.approx(120, rel=1e-3)
    assert stop_loss == pytest.approx(90, rel=1e-3)

[tests/trading/test_risk_manager.py]
# tests/trading/test_risk_manager.py
# 이 모듈은 RiskManager 클래스의 포지션 사이즈 계산, 포지션 분할 할당, 리스크 파라미터 계산 기능을 검증하는 테스트 케이스들을 포함합니다.

import pytest  # 테스트 프레임워크용
from trading.risk_manager import RiskManager  # 테스트할 RiskManager 클래스

def test_compute_position_size():
    """
    RiskManager의 compute_position_size 메서드가 사용 가능한 자본, 리스크 비율, 진입가, 스탑로스를 기반으로
    올바른 포지션 사이즈(음수가 아닌 값)를 계산하는지 테스트합니다.
    """
    rm = RiskManager()  # RiskManager 인스턴스 생성
    size = rm.compute_position_size(
        available_balance=10000,  # 총 자본
        risk_percentage=0.01,     # 거래당 리스크 1%
        entry_price=100,          # 진입 가격
        stop_loss=90,             # 스탑로스 가격
        fee_rate=0.001            # 거래 수수료율
    )
    assert size >= 0

def test_allocate_position_splits():
    """
    RiskManager의 allocate_position_splits 메서드가 총 포지션을 지정한 분할 수로 균등하게 분할하고,
    합계가 1(100%)이 되는지 테스트합니다.
    """
    rm = RiskManager()  # RiskManager 인스턴스 생성
    allocation = rm.allocate_position_splits(total_size=1.0, splits_count=3, allocation_mode="equal")
    assert len(allocation) == 3  # 분할 수가 3개인지 확인
    assert abs(sum(allocation) - 1.0) < 1e-6  # 분할 합계가 1에 근접하는지 검증

def test_compute_position_size_invalid_entry():
    """
    진입 가격이 0인 경우, compute_position_size 메서드가 올바르게 0.0의 포지션 사이즈를 반환하는지 테스트합니다.
    """
    rm = RiskManager()
    size = rm.compute_position_size(
        available_balance=10000,
        risk_percentage=0.01,
        entry_price=0,  # 잘못된 진입 가격
        stop_loss=90,
        fee_rate=0.001
    )
    assert size == 0.0

def test_compute_position_size_invalid_stop_loss():
    """
    스탑로스 가격이 0인 경우, compute_position_size 메서드가 포지션 사이즈로 0.0을 반환하는지 테스트합니다.
    """
    rm = RiskManager()
    size = rm.compute_position_size(
        available_balance=10000,
        risk_percentage=0.01,
        entry_price=100,
        stop_loss=0,  # 잘못된 스탑로스 가격
        fee_rate=0.001
    )
    assert size == 0.0

def test_compute_position_size_extreme_volatility():
    """
    극단적인 변동성 조건에서 compute_position_size 메서드가 포지션 사이즈를 크게 축소하는지 테스트합니다.
    """
    rm = RiskManager()
    size = rm.compute_position_size(
        available_balance=10000,
        risk_percentage=0.02,
        entry_price=100,
        stop_loss=90,
        fee_rate=0.001,
        volatility=100  # 매우 높은 변동성
    )
    assert size < 0.01

def test_compute_risk_parameters_invalid_regime():
    """
    존재하지 않는 시장 상태(regime)가 입력될 경우, compute_risk_parameters_by_regime 메서드가 ValueError를 발생시키는지 테스트합니다.
    """
    rm = RiskManager()
    with pytest.raises(ValueError):
        rm.compute_risk_parameters_by_regime(
            base_params={"risk_per_trade": 0.01, "atr_multiplier": 2.0, "profit_ratio": 0.05},
            regime="invalid"  # 잘못된 시장 상태
        )

def test_compute_risk_parameters_missing_liquidity():
    """
    'sideways'와 같이 유동성 정보가 필요한 시장 상태에서, 필요한 파라미터가 없을 경우 ValueError가 발생하는지 테스트합니다.
    """
    rm = RiskManager()
    with pytest.raises(ValueError):
        rm.compute_risk_parameters_by_regime(
            base_params={"risk_per_trade": 0.01, "atr_multiplier": 2.0, "profit_ratio": 0.05},
            regime="sideways"  # 유동성 데이터가 필요하지만 제공되지 않음
        )

[tests/trading/test_trade_executor.py]
# tests/trading/test_trade_executor.py
# 이 모듈은 TradeExecutor 클래스의 기능(ATR 계산, 동적 스탑/테이크 계산, 후행 스탑 조정, 부분 청산 목표 계산)을 검증하는 테스트 케이스들을 포함합니다.

import pandas as pd  # 데이터 조작용
import pytest  # 테스트 프레임워크용
from trading.trade_executor import TradeExecutor  # 테스트할 TradeExecutor 클래스

def test_compute_atr_via_trade_executor():
    """
    TradeExecutor.compute_atr 메서드가 ATR 값을 계산하여 DataFrame에 'atr' 컬럼을 추가하는지 테스트합니다.
    """
    df = pd.DataFrame({
        "high": [110, 115, 120],
        "low": [100, 105, 110],
        "close": [105, 110, 115]
    })
    df_atr = TradeExecutor.compute_atr(df, period=2)
    assert "atr" in df_atr.columns

def test_calculate_partial_exit_targets():
    """
    TradeExecutor.calculate_partial_exit_targets 메서드가 부분 청산 목표를 계산하여 리스트 형태로 반환하는지 테스트합니다.
    """
    targets = TradeExecutor.calculate_partial_exit_targets(100, partial_exit_ratio=0.5, partial_profit_ratio=0.03, final_profit_ratio=0.06)
    assert isinstance(targets, list)
    assert len(targets) == 2

def test_trade_executor_dynamic_stop_invalid_entry():
    """
    진입 가격이 0인 경우, TradeExecutor.calculate_dynamic_stop_and_take 메서드가 ValueError를 발생시키는지 테스트합니다.
    """
    with pytest.raises(ValueError):
        TradeExecutor.calculate_dynamic_stop_and_take(0, 5, {"atr_multiplier": 2.0, "profit_ratio": 0.05})

def test_trade_executor_dynamic_stop_invalid_atr():
    """
    ATR 값이 0인 경우에도 TradeExecutor.calculate_dynamic_stop_and_take 메서드가 기본 조정값을 사용하여 스탑로스와 테이크프로핏을 계산하는지 테스트합니다.
    """
    stop_loss, take_profit = TradeExecutor.calculate_dynamic_stop_and_take(100, 0, {"atr_multiplier": 2.0, "profit_ratio": 0.05})
    assert stop_loss == 98.00, f"Expected stop_loss 98.00, got {stop_loss}"
    assert take_profit == 104.00, f"Expected take_profit 104.00, got {take_profit}"

def test_trade_executor_adjust_trailing_stop_extreme():
    """
    TradeExecutor.adjust_trailing_stop 메서드가 극단적인 상황에서 올바른 후행 스탑 값을 계산하는지 테스트합니다.
    
    검증 조건: 계산된 후행 스탑 값은 현재 가격보다 낮아야 합니다.
    """
    current_stop = 80
    current_price = 120
    highest_price = 130
    trailing_percentage = 0.05
    new_stop = TradeExecutor.adjust_trailing_stop(current_stop, current_price, highest_price, trailing_percentage)
    assert new_stop < current_price

def test_trade_executor_partial_exit_targets_invalid():
    """
    잘못된 진입가(0)가 입력될 경우, TradeExecutor.calculate_partial_exit_targets 메서드가 ValueError를 발생시키는지 테스트합니다.
    """
    with pytest.raises(ValueError):
        TradeExecutor.calculate_partial_exit_targets(0, partial_exit_ratio=0.5, partial_profit_ratio=0.03, final_profit_ratio=0.06)

[tests/conftest.py]
# tests/conftest.py
# 이 모듈은 테스트 실행 전후에 로깅 환경을 관리하는 설정들을 포함합니다.
# 기존 로그 파일을 삭제하고 루트 로거를 초기화한 후, 테스트 종료 시 로깅을 종료합니다.

import os  # 파일 및 경로 관련 작업을 위한 모듈
import glob  # 파일 패턴 검색용 모듈
import logging  # 로깅 기능 제공
import pytest  # 테스트 프레임워크용
from logs.logger_config import initialize_root_logger, shutdown_logging  # 로거 초기화 및 종료 함수

@pytest.fixture(autouse=True, scope="session")
def manage_logs():
    """
    테스트 세션 전반에 걸쳐 로깅을 관리하는 fixture입니다.
    
    테스트 실행 전에 로그 디렉토리 내의 모든 로그 파일을 삭제하고, 루트 로거를 초기화합니다.
    테스트 종료 후에는 로깅 시스템을 종료합니다.
    
    Yields:
        None: 이 fixture는 부수 효과(로깅 관리)를 위해 사용됩니다.
    """
    # 현재 파일 기준 상위 logs 디렉토리 경로 설정
    log_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", "logs")
    log_pattern = os.path.join(log_dir, "*.log")  # 로그 파일 패턴 지정
    log_files = glob.glob(log_pattern)  # 로그 파일 목록 검색
    # 각 로그 파일 삭제 시도
    for log_file in log_files:
        try:
            os.remove(log_file)
            print(f"Deleted log file: {log_file}")
        except Exception as e:
            print(f"Failed to delete {log_file}: {e}")
    
    logging.shutdown()  # 기존 로깅 시스템 종료
    initialize_root_logger()  # 새로운 로깅 설정 초기화
    
    yield  # 테스트 실행 대기
    
    shutdown_logging()  # 테스트 종료 후 로깅 종료
