[trading/asset_manager.py]
# trading/asset_manager.py

# 모듈 및 라이브러리 임포트:
# - setup_logger: 로깅 설정을 위한 함수
# - timedelta: 시간 간격 계산을 위한 datetime 모듈의 클래스
# - pandas: 데이터 처리 및 시간 관련 기능 제공
# - LoggingUtil: 추가 로깅 유틸리티
from logs.logger_config import setup_logger
from datetime import timedelta
import pandas as pd
from logs.logging_util import LoggingUtil

# AssetManager 클래스는 계좌의 자산 배분(스팟 vs. 스테이블코인)을 재조정(리밸런싱)하는 역할을 합니다.
class AssetManager:
    # _instances: 특정 파라미터 조합에 대해 단일 인스턴스를 유지하기 위한 클래스 변수 (싱글톤 패턴)
    _instances = {}

    def __new__(cls, account, min_rebalance_threshold=0.05, min_rebalance_interval_minutes=60):
        """
        객체 생성 시, account와 재조정 임계치, 최소 재조정 간격에 따라 고유한 인스턴스를 반환합니다.
        
        Parameters:
            account (object): 자산 정보를 포함한 계좌 객체.
            min_rebalance_threshold (float): 재조정을 위한 최소 비율 차이.
            min_rebalance_interval_minutes (int): 재조정 간 최소 시간 간격(분).
        
        Returns:
            AssetManager 인스턴스 (싱글톤 패턴 적용).
        """
        # 계좌의 고유 id와 임계치, 간격을 기준으로 고유 키 생성
        key = (id(account), min_rebalance_threshold, min_rebalance_interval_minutes)
        if key not in cls._instances:
            # 아직 인스턴스가 없으면 새로 생성 후 저장
            instance = super(AssetManager, cls).__new__(cls)
            cls._instances[key] = instance
        return cls._instances[key]

    def __init__(self, account, min_rebalance_threshold=0.05, min_rebalance_interval_minutes=60):
        """
        AssetManager 인스턴스를 초기화합니다.
        
        Parameters:
            account (object): 거래 계좌 객체로, 스팟 및 스테이블코인 잔고와 변환 메소드를 포함.
            min_rebalance_threshold (float): 리밸런싱을 실행하기 위한 최소 잔고 차이 비율.
            min_rebalance_interval_minutes (int): 연속 리밸런싱 간 최소 시간 간격(분).
        
        Returns:
            None
        """
        # 이미 초기화된 인스턴스는 재초기화를 방지 (싱글톤 패턴)
        if hasattr(self, '_initialized') and self._initialized:
            return

        # 계좌 객체가 None이면 에러 발생
        if account is None:
            raise ValueError("Account must not be None.")
        self.account = account
        # 모듈 전반에 걸쳐 로깅을 사용하기 위한 로거 설정
        self.logger = setup_logger(__name__)
        # 추가적인 로깅 유틸리티 객체 생성
        self.log_util = LoggingUtil(__name__)
        # 재조정 임계치와 최소 재조정 간격 설정
        self.min_rebalance_threshold = min_rebalance_threshold
        self.min_rebalance_interval = timedelta(minutes=min_rebalance_interval_minutes)
        # 마지막 재조정 시간과 마지막 계좌 상태를 추적하기 위한 변수 초기화
        self.last_rebalance_time = None
        self.last_account_state = None
        # 초기화 정보 디버그 로그 기록
        self.logger.debug(
            f"AssetManager initialized with threshold {min_rebalance_threshold} and interval {min_rebalance_interval_minutes} min"
        )
        self._initialized = True

    def _get_account_state(self):
        """
        현재 계좌의 상태(스팟 잔고와 스테이블코인 잔고)를 소수점 4자리로 반올림하여 반환합니다.
        
        Returns:
            tuple: (spot_balance, stablecoin_balance)
        """
        return (round(self.account.spot_balance, 4), round(self.account.stablecoin_balance, 4))

    def rebalance(self, market_regime):
        """
        계좌의 자산 배분을 현재 시장 상황(market_regime)에 따라 재조정합니다.
        
        1. 최근 재조정 시간과 최소 재조정 간격을 비교하여 재조정 실행 여부를 결정.
        2. 총 자산(스팟+스테이블코인)과 현재 스팟 비중을 기준으로 목표 스팟 비중(desired_spot)을 산정.
        3. 목표와 실제 간의 차이가 임계치(min_rebalance_threshold)를 초과하면 자산 변환 실행.
           - 스팟 잔고가 부족하면 스테이블코인을 스팟으로 변환.
           - 과다하면 스팟을 스테이블코인으로 변환.
        4. 변환 후 계좌 상태를 업데이트하고 이벤트 로그를 남깁니다.
        
        Parameters:
            market_regime (str or numeric): 현재 시장 상태를 나타내며 "bullish", "bearish", "sideways" 중 하나를 기대.
        
        Returns:
            None
        """
        # 현재 시간을 타임스탬프로 기록
        current_time = pd.Timestamp.now()
        # 마지막 재조정 시간과의 간격이 최소 재조정 간격보다 짧으면 재조정 스킵
        if self.last_rebalance_time and (current_time - self.last_rebalance_time < self.min_rebalance_interval):
            self.logger.debug("Rebalance skipped due to interval constraint.")
            return

        # 총 자산 계산: 스팟 잔고와 스테이블코인 잔고의 합
        total_assets = self.account.spot_balance + self.account.stablecoin_balance
        if total_assets <= 0:
            self.logger.warning("Total assets <= 0. Skipping rebalance.")
            return

        # market_regime이 문자열이 아닌 경우, 숫자를 문자열로 매핑 (예: 0.0 -> "bullish")
        if not isinstance(market_regime, str):
            try:
                market_regime = {0.0: "bullish", 1.0: "bearish", 2.0: "sideways"}.get(float(market_regime), "unknown")
            except Exception:
                market_regime = "unknown"
        regime = market_regime.lower()
        if regime not in ["bullish", "bearish", "sideways"]:
            self.logger.warning(f"Market regime '{market_regime}' is unknown; treating as 'sideways'.")
            regime = "sideways"

        # 시장 상태에 따라 목표 스팟 비중 계산:
        # - bullish (또는 enter_long): 스팟 비중 90% 또는 100%
        # - bearish (또는 exit_all): 스팟 비중 10% 또는 0%
        # - sideways: 스팟 비중 60%
        if regime in ["bullish", "enter_long"]:
            desired_spot = total_assets * (1.0 if regime == "enter_long" else 0.90)
        elif regime in ["bearish", "exit_all"]:
            desired_spot = total_assets * (0.0 if regime == "exit_all" else 0.10)
        elif regime == "sideways":
            desired_spot = total_assets * 0.60

        # 현재 스팟 잔고와 목표 스팟 잔고의 차이를 계산
        current_spot = self.account.spot_balance
        diff_ratio = abs(current_spot - desired_spot) / total_assets
        # 차이가 임계치보다 작으면 재조정 불필요
        if diff_ratio < self.min_rebalance_threshold:
            self.logger.debug("No significant imbalance detected; skipping rebalance.")
            return

        try:
            if current_spot < desired_spot:
                # 스팟 잔고 부족 시: 스테이블코인을 스팟으로 변환할 금액 산정 후 변환 실행
                amount_to_convert = desired_spot - current_spot
                converted = self.account.convert_to_spot(amount_to_convert)
                self.logger.debug(f"Rebalance ({regime.capitalize()}): Converted {converted:.2f} from stablecoin to spot.")
            else:
                # 과잉 시: 스팟 잔고 일부를 스테이블코인으로 변환
                amount_to_convert = current_spot - desired_spot
                converted = self.account.convert_to_stablecoin(amount_to_convert)
                self.logger.debug(f"Rebalance ({regime.capitalize()}): Converted {converted:.2f} from spot to stablecoin.")
        except Exception as e:
            # 변환 중 예외 발생 시 에러 로그 기록
            self.logger.error(f"Rebalance conversion failed: {e}", exc_info=True)
            return

        # 재조정 완료 후 마지막 재조정 시간 업데이트
        self.last_rebalance_time = current_time
        # 계좌 상태 업데이트 후, 이전 상태와 다르면 이벤트 로그 기록
        new_state = self._get_account_state()
        if new_state != self.last_account_state:
            self.last_account_state = new_state
            self.log_util.log_event("Rebalance complete", state_key="asset_state")

[trading/calculators.py]
# trading/calculators.py

# pandas: 데이터 처리 및 통계 관련 기능 제공
# ta: 기술적 분석(Technical Analysis) 라이브러리, ATR(평균 실제 범위) 계산 등 사용
import pandas as pd
import ta
from logs.logger_config import setup_logger

# 모듈 전반에 걸쳐 디버그 및 에러 로깅을 위한 로거 객체 생성
logger = setup_logger(__name__)

class InvalidEntryPriceError(ValueError):
    """
    거래 진입 가격이 유효하지 않을 경우 발생시키는 사용자 정의 예외.
    예) 음수 혹은 0인 경우.
    """
    pass

def calculate_atr(data: pd.DataFrame, period: int = 14, min_atr: float = None) -> pd.DataFrame:
    """
    주어진 시장 데이터로부터 ATR(Average True Range)을 계산합니다.
    
    데이터 전처리 및 이상치 제거를 포함하여, TA 라이브러리의 AverageTrueRange를 활용해 ATR을 산출합니다.
    또한, ATR 값이 특정 최소치(min_atr) 이하로 떨어지지 않도록 보정합니다.
    
    Parameters:
        data (pd.DataFrame): 'high', 'low', 'close' 컬럼을 포함하는 시장 데이터.
        period (int): ATR 계산을 위한 이동 윈도우 기간 (기본값: 14).
        min_atr (float): 최소 ATR 값; 제공되지 않으면 평균 종가의 1%로 설정.
    
    Returns:
        pd.DataFrame: 원본 데이터프레임에 'atr' 컬럼이 추가된 결과.
    """
    # 필수 컬럼들이 데이터에 포함되어 있는지 확인
    required_cols = ['high', 'low', 'close']
    for col in required_cols:
        if col not in data.columns:
            raise ValueError(f"Missing required column: {col}")
    
    # 'high'가 'low'보다 작은 행은 제외하여 데이터의 신뢰성을 확보
    data = data[data['high'] >= data['low']].copy()
    
    # 'close' 값이 'low'보다 낮으면 'low'로, 'high'보다 높으면 'high'로 조정
    data.loc[data['close'] < data['low'], 'close'] = data['low']
    data.loc[data['close'] > data['high'], 'close'] = data['high']
    
    # 각 행의 가격 범위 계산 및 중앙값(typical range) 산출
    range_series = data['high'] - data['low']
    typical_range = range_series.median()
    if typical_range > 0:
        # 범위가 중앙값의 3배를 넘는 이상치 제거
        data = data[range_series <= (3 * typical_range)]
    else:
        logger.debug("Typical range is zero; skipping outlier filtering.")
    
    # 데이터 길이에 따라 효과적인 period 설정
    effective_period = period if len(data) >= period else len(data)
    
    try:
        if effective_period < 1:
            data['atr'] = 0
        elif len(data) < effective_period:
            # 데이터 포인트가 충분하지 않은 경우 단순히 (high - low) 값을 ATR로 사용
            data['atr'] = data['high'] - data['low']
        else:
            # ta 라이브러리를 사용해 Average True Range 계산
            atr_indicator = ta.volatility.AverageTrueRange(
                high=data['high'],
                low=data['low'],
                close=data['close'],
                window=effective_period,
                fillna=True
            )
            data['atr'] = atr_indicator.average_true_range()
    except Exception as e:
        # 계산 중 오류 발생 시 에러 로그 기록 후, fallback으로 (high - low) 사용
        logger.error("calculate_atr error: " + str(e), exc_info=True)
        data['atr'] = data['high'] - data['low']
    
    # 평균 종가를 기반으로 최소 ATR 값 결정 (기본: 평균 종가의 1%)
    avg_close = data['close'].mean()
    if min_atr is None:
        min_atr = avg_close * 0.01

    # 각 ATR 값이 min_atr 이상이 되도록 보정
    data['atr'] = data['atr'].apply(lambda x: max(x, min_atr))
    
    return data

def calculate_dynamic_stop_and_take(entry_price: float, atr: float, risk_params: dict):
    """
    동적 스톱로스와 테이크프로핏 가격을 계산합니다.
    
    주어진 entry_price와 ATR 값을 기반으로, risk_params에 명시된 매개변수를 활용하여
    스톱로스와 테이크프로핏 수준을 동적으로 산출합니다.
    
    Parameters:
        entry_price (float): 거래 진입 가격.
        atr (float): 시장 변동성을 나타내는 ATR 값.
        risk_params (dict): 리스크 파라미터 사전, 포함 항목:
            - "atr_multiplier": ATR에 적용되는 곱셈 인자.
            - "volatility_multiplier": 변동성 조정을 위한 추가 인자.
            - "risk_reward_ratio": 스톱로스 대비 테이크프로핏의 비율.
            - "fallback_atr": ATR 값이 유효하지 않을 때 사용할 대체 ATR.
    
    Returns:
        tuple: (stop_loss_price, take_profit_price)
    """
    # 유효한 진입 가격 확인: 0 이하이면 예외 발생
    if entry_price <= 0:
        logger.error(f"Invalid entry_price: {entry_price}. Must be positive.", exc_info=True)
        raise InvalidEntryPriceError(f"Invalid entry_price: {entry_price}. Must be positive.")
    # ATR 값이 0 이하일 경우 risk_params에 있는 fallback ATR 사용 또는 기본값 할당
    if atr <= 0:
        logger.error(f"ATR value is non-positive ({atr}). Using fallback ATR value from risk_params if available.", exc_info=True)
        fallback_atr = risk_params.get("fallback_atr", entry_price * 0.01)
        if fallback_atr <= 0:
            fallback_atr = entry_price * 0.01
        atr = fallback_atr
    try:
        # risk_params에서 각 인자들을 가져오되, 기본값 사용
        atr_multiplier = risk_params.get("atr_multiplier", 2.0)
        volatility_multiplier = risk_params.get("volatility_multiplier", 1.0)
        risk_reward_ratio = risk_params.get("risk_reward_ratio", 2.0)
        
        # 인자들의 값을 1.0~5.0 범위로 제한
        atr_multiplier = max(1.0, min(atr_multiplier, 5.0))
        risk_reward_ratio = max(1.0, min(risk_reward_ratio, 5.0))
        
        # 스톱로스 가격 계산: entry_price에서 ATR, atr_multiplier, volatility_multiplier의 곱만큼 차감
        stop_loss_price = entry_price - (atr * atr_multiplier * volatility_multiplier)
        if stop_loss_price <= 0:
            logger.error("Computed stop_loss_price is non-positive; adjusting to at least 50% of entry_price.", exc_info=True)
            stop_loss_price = entry_price * 0.5
        
        # 테이크프로핏 가격 계산: 스톱로스와의 차이를 risk_reward_ratio로 확장
        take_profit_price = entry_price + (entry_price - stop_loss_price) * risk_reward_ratio
        
        logger.debug(f"Calculated stop_loss={stop_loss_price:.2f}, take_profit={take_profit_price:.2f} "
                     f"(entry_price={entry_price}, atr={atr}, atr_multiplier={atr_multiplier}, "
                     f"volatility_multiplier={volatility_multiplier}, risk_reward_ratio={risk_reward_ratio})")
        return stop_loss_price, take_profit_price
    except Exception as e:
        logger.error("calculate_dynamic_stop_and_take error: " + str(e), exc_info=True)
        raise

def calculate_partial_exit_targets(entry_price: float, partial_exit_ratio: float = 0.5,
                                     partial_profit_ratio: float = 0.03, final_profit_ratio: float = 0.06,
                                     final_exit_ratio: float = 1.0, use_weekly_target: bool = False,
                                     weekly_momentum: float = None, weekly_adjustment_factor: float = 0.5):
    """
    부분 청산 타겟 가격들을 계산합니다.
    
    거래 진입 가격을 기반으로 부분 청산과 최종 청산 목표 가격을 산출하며,
    옵션으로 주간 모멘텀(weekly momentum)을 활용해 목표 수익률을 조정할 수 있습니다.
    
    Parameters:
        entry_price (float): 거래 진입 가격.
        partial_exit_ratio (float): 부분 청산 시 청산할 포지션 비율.
        partial_profit_ratio (float): 부분 청산 목표 수익률.
        final_profit_ratio (float): 최종 청산 목표 수익률.
        final_exit_ratio (float): 최종 청산 시 청산할 포지션 비율.
        use_weekly_target (bool): 주간 모멘텀을 적용할지 여부.
        weekly_momentum (float, optional): 주간 모멘텀 값.
        weekly_adjustment_factor (float): 주간 모멘텀에 따른 조정 인자.
    
    Returns:
        list: [(partial_target, partial_exit_ratio), (final_target, final_exit_ratio)]
              각 튜플은 목표 가격과 해당 가격에서 청산할 비율을 의미.
    """
    # 유효한 entry_price 확인
    if entry_price <= 0:
        logger.error(f"Invalid entry_price: {entry_price}. Must be positive.", exc_info=True)
        raise InvalidEntryPriceError(f"Invalid entry_price: {entry_price}. Must be positive.")
    try:
        # 주간 모멘텀이 적용되는 경우, 목표 수익률 조정
        if use_weekly_target and weekly_momentum is not None:
            adjusted_partial = partial_profit_ratio + weekly_adjustment_factor * weekly_momentum
            adjusted_final = final_profit_ratio + weekly_adjustment_factor * weekly_momentum
        else:
            adjusted_partial = partial_profit_ratio
            adjusted_final = final_profit_ratio
        # 목표 가격 계산: entry_price에 (1 + 목표 수익률)을 곱함
        partial_target = entry_price * (1 + adjusted_partial)
        final_target = entry_price * (1 + adjusted_final)
        logger.debug(f"Partial targets: partial={partial_target:.2f}, final={final_target:.2f} "
                     f"(entry_price={entry_price}, adjusted_partial={adjusted_partial}, adjusted_final={adjusted_final})")
        return [(partial_target, partial_exit_ratio), (final_target, final_exit_ratio)]
    except Exception as e:
        logger.error("calculate_partial_exit_targets error: " + str(e), exc_info=True)
        raise

def adjust_trailing_stop(current_stop: float, current_price: float, highest_price: float, trailing_percentage: float,
                           volatility: float = 0.0, weekly_high: float = None, weekly_volatility: float = None) -> float:
    """
    현재 가격 및 변동성을 고려하여 트레일링 스톱을 조정합니다.
    
    인트라데이와 주간 데이터를 모두 활용해, 현재까지의 최고 가격을 기준으로
    새로운 후보 스톱 가격을 산출하고, 이 후보가 기존 스톱보다 개선된 경우에만 업데이트합니다.
    
    Parameters:
        current_stop (float): 현재 설정된 트레일링 스톱 가격.
        current_price (float): 현재 시장 가격.
        highest_price (float): 거래 진입 이후 도달한 최고 가격.
        trailing_percentage (float): 트레일링 스톱 계산에 사용되는 기본 비율.
        volatility (float): 인트라데이 변동성 (기본값: 0.0).
        weekly_high (float, optional): 주간 최고 가격.
        weekly_volatility (float, optional): 주간 변동성.
    
    Returns:
        float: 조정된 트레일링 스톱 가격.
    """
    # current_price와 highest_price가 양수인지 확인
    if current_price <= 0 or highest_price <= 0:
        logger.error(f"Invalid current_price ({current_price}) or highest_price ({highest_price}).", exc_info=True)
        raise ValueError("current_price and highest_price must be positive.")
    # trailing_percentage가 음수이면 에러 발생
    if trailing_percentage < 0:
        logger.error(f"Invalid trailing_percentage ({trailing_percentage}). Must be non-negative.", exc_info=True)
        raise ValueError("trailing_percentage must be non-negative.")
    try:
        # current_stop이 설정되지 않았거나 음수일 경우, 최고가를 기준으로 초기화
        if current_stop is None or current_stop <= 0:
            current_stop = highest_price * (1 - trailing_percentage * (1 + volatility))
        # 인트라데이 기반 후보 스톱 계산
        new_stop_intraday = highest_price * (1 - trailing_percentage * (1 + volatility))
        if weekly_high is not None:
            # 주간 데이터가 제공되면, 주간 후보 스톱 계산 및 두 후보 중 높은 값을 선택
            w_vol = weekly_volatility if weekly_volatility is not None else 0.0
            new_stop_weekly = weekly_high * (1 - trailing_percentage * (1 + w_vol))
            candidate_stop = max(new_stop_intraday, new_stop_weekly)
        else:
            candidate_stop = new_stop_intraday
        # 후보 스톱이 개선되고 현재 가격 이하일 때만 업데이트
        adjusted_stop = candidate_stop if candidate_stop > current_stop and candidate_stop < current_price else current_stop
        logger.debug(f"Adjusted trailing stop: {adjusted_stop:.2f} (current_stop={current_stop}, candidate_stop={candidate_stop}, current_price={current_price})")
        return adjusted_stop
    except Exception as e:
        logger.error("adjust_trailing_stop error: " + str(e), exc_info=True)
        raise

[trading/ensemble.py]
# trading/ensemble.py

# 로깅 설정
from logs.logger_config import setup_logger
# 다양한 트레이딩 전략 임포트:
# SelectStrategy, TrendFollowingStrategy, BreakoutStrategy, CounterTrendStrategy,
# HighFrequencyStrategy, WeeklyBreakoutStrategy, WeeklyMomentumStrategy
from strategies.trading_strategies import (
    SelectStrategy, TrendFollowingStrategy, BreakoutStrategy,
    CounterTrendStrategy, HighFrequencyStrategy, WeeklyBreakoutStrategy, WeeklyMomentumStrategy
)
# 설정 관리: 동적 파라미터를 가져오기 위해 사용
from config.config_manager import ConfigManager

def compute_dynamic_weights(market_volatility: float, liquidity_info: str, volume: float = None):
    """
    시장 변동성, 유동성 정보 및 거래량을 고려하여 단기 전략과 주간 전략에 적용할 동적 가중치를 계산합니다.
    
    Parameters:
        market_volatility (float): 현재 시장 변동성 (없을 경우 기본값 사용).
        liquidity_info (str): 유동성 정보, "high"일 경우 높은 유동성으로 간주.
        volume (float, optional): 거래량; 낮은 경우 추가 조정.
    
    Returns:
        tuple: (short_weight, weekly_weight)
            - short_weight: 단기 전략에 적용할 가중치.
            - weekly_weight: 주간 전략에 적용할 가중치.
    """
    # market_volatility가 None이면 기본값 설정
    if market_volatility is None:
        market_volatility = 0.02

    # 설정 관리자를 통해 동적 파라미터를 불러옴
    config = ConfigManager().get_dynamic_params()
    # 유동성이 높은 경우와 그렇지 않은 경우에 따라 기본 가중치 할당
    if liquidity_info.lower() == "high":
        short_weight = config.get("liquidity_weight_high", 0.8)
        weekly_weight = 1 - short_weight
    else:
        short_weight = config.get("liquidity_weight_low", 0.6)
        weekly_weight = 1 - short_weight

    # 시장 변동성이 특정 임계값을 넘으면 가중치 조정
    vol_threshold = config.get("weight_vol_threshold", 0.05)
    if market_volatility > vol_threshold:
        factor = config.get("vol_weight_factor", 0.9)
        short_weight *= factor
        weekly_weight = 1 - short_weight

    # 거래량(volume)이 주어지고 낮은 경우 추가 가중치 조정
    if volume is not None and volume < 1000:
        short_weight *= 0.8
        weekly_weight = 1 - short_weight

    return short_weight, weekly_weight

class Ensemble:
    def __init__(self):
        """
        다양한 트레이딩 전략들을 집계(ensemble)하여 최종 거래 신호를 도출하기 위한 Ensemble 객체를 초기화합니다.
        
        각 하위 전략(Select, TrendFollowing, Breakout, CounterTrend, HighFrequency, WeeklyBreakout, WeeklyMomentum)
        인스턴스를 생성하고, 로깅을 위한 로거 객체를 설정합니다.
        """
        self.logger = setup_logger(__name__)
        self.select_strategy = SelectStrategy()
        self.trend_following_strategy = TrendFollowingStrategy()
        self.breakout_strategy = BreakoutStrategy()
        self.counter_trend_strategy = CounterTrendStrategy()
        self.high_frequency_strategy = HighFrequencyStrategy()
        self.weekly_breakout_strategy = WeeklyBreakoutStrategy()
        self.weekly_momentum_strategy = WeeklyMomentumStrategy()
        # 마지막 최종 신호를 저장하여 변경 시 로깅에 활용
        self.last_final_signal = None

    def get_final_signal(self, market_regime, liquidity_info, data, current_time, data_weekly=None, 
                         market_volatility: float = None, volume: float = None):
        """
        여러 하위 전략들로부터 개별 거래 신호를 수집한 후, 동적 가중치 기반 투표 방식을 통해 최종 거래 신호를 결정합니다.
        
        1. 동적 가중치(short_weight, weekly_weight)를 계산.
        2. 단기 전략(Select, Trend, Breakout, Counter, HF) 및 (옵션) 주간 전략에서 신호를 수집.
        3. 각 신호에 대해 가중치 합산을 통해 'enter_long'와 'exit_all' 중 우세한 신호를 결정.
        4. 투표 결과에 따라 최종 신호("enter_long", "exit_all", 또는 "hold")를 반환.
        
        Parameters:
            market_regime (str): 현재 시장 상황(직접 사용되지는 않음).
            liquidity_info (str): 시장 유동성 정보 (예: "high").
            data: 단기 전략에 필요한 시장 데이터.
            current_time: 신호 산출 시점의 타임스탬프.
            data_weekly: 주간 전략에 사용할 주간 시장 데이터 (옵션).
            market_volatility (float, optional): 시장 변동성 수치.
            volume (float, optional): 거래량 수치.
        
        Returns:
            str: 최종 거래 신호 ("enter_long", "exit_all", 또는 "hold").
        """
        # 동적 가중치 계산: 단기와 주간 전략의 영향력 비율 결정
        short_weight, weekly_weight = compute_dynamic_weights(market_volatility, liquidity_info, volume)

        # 각 하위 전략에서 신호 수집 (단기 데이터 기반)
        signals = {
            "select": self.select_strategy.get_signal(data, current_time),
            "trend": self.trend_following_strategy.get_signal(data, current_time),
            "breakout": self.breakout_strategy.get_signal(data, current_time),
            "counter": self.counter_trend_strategy.get_signal(data, current_time),
            "hf": self.high_frequency_strategy.get_signal(data, current_time)
        }
        # 주간 데이터가 제공되면 주간 전략 신호 추가
        if data_weekly is not None:
            signals["weekly_breakout"] = self.weekly_breakout_strategy.get_signal(data_weekly, current_time)
            signals["weekly_momentum"] = self.weekly_momentum_strategy.get_signal(data_weekly, current_time)

        # 단기 전략 신호에 대해 'enter_long'와 'exit_all' 가중치 합산
        vote_enter = sum(short_weight for key in ["select", "trend", "breakout", "counter", "hf"] if signals.get(key) == "enter_long")
        vote_exit = sum(short_weight for key in ["select", "trend", "breakout", "counter", "hf"] if signals.get(key) == "exit_all")
        # 주간 전략 신호가 있으면 해당 가중치도 포함
        if data_weekly is not None:
            vote_enter += sum(weekly_weight for key in ["weekly_breakout", "weekly_momentum"] if signals.get(key) == "enter_long")
            vote_exit += sum(weekly_weight for key in ["weekly_breakout", "weekly_momentum"] if signals.get(key) == "exit_all")

        # 가중치 투표 결과에 따라 최종 신호 결정:
        # - exit_all이 더 많은 경우: "exit_all"
        # - enter_long이 더 많은 경우: "enter_long"
        # - 동점이면 "hold"
        final_signal = "exit_all" if vote_exit > vote_enter else ("enter_long" if vote_enter > vote_exit else "hold")
        # 최종 신호가 변경되었으면 디버그 로그 기록
        if self.last_final_signal != final_signal:
            self.logger.debug(
                f"Ensemble final signal changed to {final_signal} at {current_time} "
                f"with dynamic weights: short={short_weight}, weekly={weekly_weight}, "
                f"signals: {signals}"
            )
            self.last_final_signal = final_signal
        return final_signal
