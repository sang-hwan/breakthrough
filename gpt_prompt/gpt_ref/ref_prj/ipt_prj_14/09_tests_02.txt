[tests/config/test_config_manager.py]
# tests/config/test_config_manager.py

# ConfigManager 클래스를 임포트합니다.
from config.config_manager import ConfigManager

def test_get_defaults():
    """
    ConfigManager의 get_defaults 메서드가 기본 파라미터를 올바르게 반환하는지 테스트합니다.
    
    - 반환된 기본 파라미터(defaults) 내에 'sma_period', 'atr_period', 'risk_per_trade' 키가 포함되어 있는지 확인합니다.
    
    Parameters:
        없음
        
    Returns:
        없음 (assertion을 통해 테스트 결과를 검증)
    """
    cm = ConfigManager()
    defaults = cm.get_defaults()
    # 주요 파라미터 키들이 defaults에 포함되어 있는지 확인
    for key in ["sma_period", "atr_period", "risk_per_trade"]:
        assert key in defaults

def test_update_with_market_data():
    """
    ConfigManager의 update_with_market_data 메서드가 시장 데이터에 따라 파라미터를 업데이트하는지 테스트합니다.
    
    - 기본 파라미터와 비교하여, atr_multiplier와 risk_per_trade가 변경되었음을 검증합니다.
    
    Parameters:
        없음
        
    Returns:
        없음 (assertion을 통해 테스트 결과를 검증)
    """
    cm = ConfigManager()
    base_defaults = cm.get_defaults()
    # 시장 데이터를 모의한 딕셔너리 생성
    market_data = {
        "volatility": 0.08,
        "trend": "bullish",
        "trend_strength": 0.1,
        "volume": 800,
        "weekly_volatility": 0.09
    }
    updated = cm.update_with_market_data(market_data)
    # atr_multiplier와 risk_per_trade 값이 기본값과 다르게 업데이트 되었는지 확인
    assert updated["atr_multiplier"] != base_defaults["atr_multiplier"]
    assert updated["risk_per_trade"] != base_defaults["risk_per_trade"]

def test_merge_optimized():
    """
    ConfigManager의 merge_optimized 메서드가 최적화된 파라미터와 기본 파라미터를 올바르게 병합하는지 테스트합니다.
    
    - profit_ratio는 두 값의 평균으로 계산되며, 새로운 파라미터(new_param)는 최적화 값이 그대로 적용되어야 합니다.
    
    Parameters:
        없음
        
    Returns:
        없음 (assertion을 통해 테스트 결과를 검증)
    """
    cm = ConfigManager()
    defaults = cm.get_defaults()
    # 최적화 값으로 profit_ratio를 1.1배, 그리고 새로운 파라미터 추가
    optimized = {"profit_ratio": defaults["profit_ratio"] * 1.1, "new_param": 123}
    merged = cm.merge_optimized(optimized)
    # profit_ratio는 기본값과 최적화 값의 평균값이어야 함
    assert merged["profit_ratio"] == (defaults["profit_ratio"] + defaults["profit_ratio"] * 1.1) / 2
    # 새로운 파라미터는 최적화 값 그대로 반영되어야 함
    assert merged["new_param"] == 123

[tests/core/test_core_account.py]
# tests/core/test_core_account.py

# Account 클래스와 Position 클래스를 임포트합니다.
from core.account import Account
from core.position import Position

def test_account_balance_after_trade():
    """
    거래 후 계좌 잔고가 올바르게 업데이트되는지 테스트합니다.
    
    - 초기 계좌 잔고와 수수료율을 설정한 후, 거래(PnL +500)를 반영하여 잔고가 증가했는지 확인합니다.
    
    Parameters:
        없음
        
    Returns:
        없음 (assertion을 통해 테스트 결과를 검증)
    """
    # 초기 잔고 10,000달러, 수수료율 0.1%로 Account 객체 생성
    account = Account(initial_balance=10000, fee_rate=0.001)
    initial_balance = account.spot_balance
    # 거래 정보: pnl(이익) +500
    trade = {"pnl": 500}
    # 거래 후 계좌 잔고 업데이트
    account.update_after_trade(trade)
    # 업데이트된 현물 잔고가 초기 잔고에 +500 되어야 함
    assert account.spot_balance == initial_balance + 500

def test_position_add_and_remove():
    """
    포지션(Position)을 계좌에 추가하고 제거하는 기능을 테스트합니다.
    
    - Position 객체를 생성하여 계좌에 추가한 후 포함 여부를 확인하고,
      이후 제거한 후 삭제되었음을 확인합니다.
      
    Parameters:
        없음
        
    Returns:
        없음 (assertion을 통해 테스트 결과를 검증)
    """
    account = Account(initial_balance=10000)
    # 포지션 객체 생성 (롱 포지션, 진입 가격 100, 최대 사이즈 1.0 등)
    pos = Position(side="LONG", initial_price=100, maximum_size=1.0, total_splits=1, allocation_plan=[1.0])
    account.add_position(pos)
    # 추가된 포지션이 account.positions에 존재하는지 확인
    assert pos in account.positions
    # 포지션 제거 후 존재하지 않는지 확인
    account.remove_position(pos)
    assert pos not in account.positions

def test_conversion_functions():
    """
    Account 객체의 자산 전환 함수 (convert_to_stablecoin, convert_to_spot)의 동작을 테스트합니다.
    
    - 일정 금액을 스테이블코인으로 전환한 후, 다시 현물로 전환하여
      수수료 등으로 인해 약간 손실이 발생하는지 확인합니다.
    
    Parameters:
        없음
        
    Returns:
        없음 (assertion을 통해 테스트 결과를 검증)
    """
    account = Account(initial_balance=10000)
    # 1000달러를 스테이블코인으로 전환
    converted = account.convert_to_stablecoin(1000)
    # 스테이블코인 잔고가 전환된 값과 일치해야 함
    assert account.stablecoin_balance == converted
    # 스테이블코인을 다시 현물로 전환 (수수료로 인해 손실 발생 가능)
    new_spot = account.convert_to_spot(converted)
    # 전환 후 현물 금액이 원래 스테이블코인 금액보다 작아야 함
    assert new_spot < converted

[tests/core/test_core_position.py]
# tests/core/test_core_position.py

import pytest
# Position 클래스를 임포트합니다.
from core.position import Position

def test_add_execution_and_totals():
    """
    포지션에 거래 실행(execution)을 추가하고, 총 거래 수량 및 평균 진입 가격이 올바르게 계산되는지 테스트합니다.
    
    - 포지션 객체를 생성한 후, 거래 실행을 추가합니다.
    - 전체 거래 수량과 평균 진입 가격이 예상값(1.0, 100)이 맞는지 확인합니다.
    
    Parameters:
        없음
        
    Returns:
        없음 (assertion을 통해 테스트 결과를 검증)
    """
    pos = Position(side="LONG", initial_price=100, maximum_size=1.0, total_splits=1, allocation_plan=[1.0])
    # entry_price=100, size=1.0, entry_time="2023-01-01"로 거래 실행 추가
    pos.add_execution(entry_price=100, size=1.0, entry_time="2023-01-01")
    # 총 수량이 1.0이어야 함
    assert pos.get_total_size() == 1.0
    # 평균 진입 가격이 100이어야 함
    avg_price = pos.get_average_entry_price()
    assert avg_price == 100

def test_partial_close_execution():
    """
    포지션에서 부분 청산(partial close)이 올바르게 이루어지는지 테스트합니다.
    
    - 먼저 포지션에 거래 실행을 추가한 후, 일부 수량(0.5)만 청산합니다.
    - 청산된 수량과 남은 수량이 예상대로 반영되는지 확인합니다.
    
    Parameters:
        없음
        
    Returns:
        없음 (assertion을 통해 테스트 결과를 검증)
    """
    pos = Position(side="LONG", initial_price=100, maximum_size=1.0, total_splits=1, allocation_plan=[1.0])
    # 거래 실행 추가
    pos.add_execution(entry_price=100, size=1.0, entry_time="2023-01-01")
    # 포지션의 0번 거래 실행에서 0.5 수량만 청산하도록 호출
    closed_qty = pos.partial_close_execution(0, 0.5)
    # 청산된 수량이 0.5인지 확인
    assert closed_qty == 0.5
    # 남은 수량은 0.5여야 함 (소수점 오차 고려하여 비교)
    remaining = pos.get_total_size()
    assert pytest.approx(remaining, rel=1e-3) == 0.5

[tests/ensemble/test_ensemble.py]
# tests/ensemble/test_ensemble.py
# 이 파일은 Ensemble 모듈의 get_final_signal 메서드 기능을 테스트하기 위한 테스트 케이스들을 포함합니다.
# Ensemble 객체는 여러 트레이딩 시그널을 조합하여 최종 트레이딩 신호를 결정하는 역할을 합니다.

import pytest
import pandas as pd
from trading.ensemble import Ensemble

# 전역 객체 및 데이터셋 준비: 최소한의 컬럼을 가진 테스트용 데이터프레임 생성
@pytest.fixture
def dummy_data():
    """
    Dummy 데이터프레임 생성 함수

    목적:
      - 테스트를 위해 시가(open), 종가(close), 최고가(high), 최저가(low),
        단순 이동 평균(sma), RSI, 볼린저 밴드 하단(bb_lband) 등 기본 컬럼을 갖는 데이터프레임 생성.
    
    Parameters:
      없음

    Returns:
      pd.DataFrame: 시간 인덱스를 가진 10행의 간단한 가격 데이터
    """
    # 2023-01-01부터 시작하여 10시간 간격의 타임스탬프 생성
    dates = pd.date_range("2023-01-01", periods=10, freq="h")
    df = pd.DataFrame({
        "open": [100] * 10,       # 시가: 모든 값이 100
        "close": [101] * 10,      # 종가: 모든 값이 101
        "high": [102] * 10,       # 최고가: 모든 값이 102
        "low": [99] * 10,         # 최저가: 모든 값이 99
        "sma": [100.5] * 10,      # 단순 이동 평균: 모든 값이 100.5
        "rsi": [30] * 10,         # RSI: 모든 값이 30 (과매도 영역을 의미할 수 있음)
        "bb_lband": [99] * 10     # 볼린저 밴드 하단: 모든 값이 99
    }, index=dates)
    return df

# 주간 데이터 준비: 주간 단위의 추가 지표를 포함하는 데이터프레임 생성
@pytest.fixture
def dummy_weekly_data():
    """
    Dummy 주간 데이터프레임 생성 함수

    목적:
      - 주간 데이터 테스트를 위해 종가(close), 최고가(high), 최저가(low),
        그리고 주간 모멘텀(weekly_momentum) 컬럼을 가진 데이터프레임 생성.
    
    Parameters:
      없음

    Returns:
      pd.DataFrame: 주 단위의 데이터(2행)를 포함하는 데이터프레임
    """
    # 2023-01-01부터 시작하여 주간(월요일) 단위의 타임스탬프 생성 (총 2주)
    dates = pd.date_range("2023-01-01", periods=2, freq="W-MON")
    df = pd.DataFrame({
        "close": [101, 103],
        "high": [102, 104],
        "low": [99, 100],
        "weekly_momentum": [0.6, 0.6]  # 주간 모멘텀 지표 (예시 값)
    }, index=dates)
    return df

def test_get_final_signal(dummy_data, dummy_weekly_data):
    """
    Ensemble 모듈의 get_final_signal 메서드 동작 테스트

    목적:
      - 주어진 시장 상황(market_regime)과 유동성 정보(liquidity_info), 
        그리고 테스트 데이터를 이용해 최종 트레이딩 신호가 올바르게 반환되는지 검증.

    Parameters:
      dummy_data (pd.DataFrame): 시세 관련 데이터 (시간 단위)
      dummy_weekly_data (pd.DataFrame): 주간 단위의 추가 데이터

    Returns:
      없음 (assert 구문을 통해 테스트 통과 여부 확인)
    """
    # Ensemble 인스턴스 생성
    ens = Ensemble()
    # 현재 시간을 dummy_data의 마지막 인덱스로 설정
    current_time = dummy_data.index[-1]
    # get_final_signal 메서드 호출: 'bullish' 시장, 'high' 유동성을 가정
    final_signal = ens.get_final_signal(
        market_regime="bullish", 
        liquidity_info="high", 
        data=dummy_data, 
        current_time=current_time, 
        data_weekly=dummy_weekly_data
    )
    # 최종 신호가 "enter_long", "exit_all", "hold" 중 하나임을 검증
    assert final_signal in ["enter_long", "exit_all", "hold"]
