[backtesting/steps/data_loader.py]
# backtesting/steps/data_loader.py

# 모듈별 로깅 설정 및 데이터 관련 모듈 임포트
from logs.logger_config import setup_logger                   # 로깅 설정 함수
from data.db.db_manager import fetch_ohlcv_records              # OHLCV 데이터베이스 조회 함수
from data.ohlcv.ohlcv_aggregator import aggregate_to_weekly       # 주간 데이터 집계 함수
from trading.indicators import compute_bollinger_bands          # 볼린저 밴드 계산 함수
import threading                                                # 멀티스레드 동기화를 위한 모듈
import pandas as pd                                             # 데이터 프레임 처리를 위한 pandas
from logs.logging_util import LoggingUtil                       # 추가 로깅 유틸리티

# --- 전역 변수 및 객체 정의 ---
# 모듈 단위 로깅 인스턴스 설정: 로그를 남길 때 모듈명(__name__)을 이용
logger = setup_logger(__name__)
log_util = LoggingUtil(__name__)

# 멀티스레드 환경에서의 데이터 캐싱을 위한 전역 변수
_cache_lock = threading.Lock()    # 캐시 접근시 동기화를 위한 Lock 객체
_data_cache = {}                  # OHLCV 데이터 프레임을 메모리에 캐싱하기 위한 딕셔너리

# --- 내부 캐시 함수 정의 ---
def _get_cached_ohlcv(table_name, start_date, end_date):
    """
    캐시에서 특정 테이블과 날짜 범위에 해당하는 OHLCV 데이터를 조회합니다.
    
    Parameters:
        table_name (str): OHLCV 데이터가 저장된 테이블의 이름.
        start_date (str 또는 datetime): 데이터 조회의 시작 날짜.
        end_date (str 또는 datetime): 데이터 조회의 종료 날짜.
    
    Returns:
        pandas.DataFrame 또는 None: 캐시에 존재하는 경우 해당 DataFrame, 없으면 None.
    """
    # 캐시 키는 테이블 이름과 날짜 범위를 튜플로 결합하여 생성합니다.
    key = (table_name, start_date, end_date)
    # 멀티스레드 환경에서 동시 접근을 방지하기 위해 락을 사용합니다.
    with _cache_lock:
        return _data_cache.get(key)

def _set_cached_ohlcv(table_name, start_date, end_date, df):
    """
    주어진 OHLCV 데이터 프레임을 캐시에 저장합니다.
    
    Parameters:
        table_name (str): 데이터가 속한 테이블 이름.
        start_date (str 또는 datetime): 데이터 조회의 시작 날짜.
        end_date (str 또는 datetime): 데이터 조회의 종료 날짜.
        df (pandas.DataFrame): 저장할 OHLCV 데이터 프레임.
    
    Returns:
        None
    """
    # 캐시 키 생성
    key = (table_name, start_date, end_date)
    # 동기화를 위해 락 사용 후 캐시에 저장
    with _cache_lock:
        _data_cache[key] = df

def _validate_and_prepare_df(df, table_name):
    """
    불러온 OHLCV 데이터 프레임의 유효성을 검사하고, 필요한 전처리(시간 인덱스 변환, 정렬, 중복 제거 등)를 수행합니다.
    
    Parameters:
        df (pandas.DataFrame): 검증 및 전처리할 데이터 프레임.
        table_name (str): 데이터 프레임이 속한 테이블 이름(로그 메시지 용도).
    
    Returns:
        pandas.DataFrame: 전처리가 완료된 데이터 프레임.
    """
    # 데이터 프레임이 비어있는지 확인 후 에러 로그 출력
    if df.empty:
        logger.error(f"DataFrame for {table_name} is empty.", exc_info=True)
        return df

    # 인덱스가 datetime 형식인지 확인하고, 아니라면 변환 시도
    if not pd.api.types.is_datetime64_any_dtype(df.index):
        try:
            df.index = pd.to_datetime(df.index, errors='coerce')
            # 변환 후 NaT (Not a Time)가 포함된 경우 해당 행 제거
            if df.index.isnull().any():
                logger.warning(f"Some index values in {table_name} could not be converted to datetime and will be dropped.")
                df = df[~df.index.isnull()]
        except Exception as e:
            logger.error(f"Error converting index to datetime for {table_name}: {e}", exc_info=True)
            raise

    # 인덱스를 오름차순으로 정렬 (시간 순 정렬)
    df.sort_index(inplace=True)

    # 중복된 인덱스가 존재하면 경고 로그 출력 후 중복 제거
    if df.index.duplicated().any():
        logger.warning(f"Duplicate datetime indices found in {table_name}; removing duplicates.")
        df = df[~df.index.duplicated(keep='first')]

    # 데이터 열이 존재할 경우, 고가(high), 저가(low), 종가(close)를 활용하여 평균 변동폭 계산
    if 'high' in df.columns and 'low' in df.columns and 'close' in df.columns:
        avg_range = (df['high'] - df['low']).mean()
        avg_close = df['close'].mean()
        # 변동성이 비정상적으로 낮은 경우 경고 로그 출력 (정상 데이터 여부 점검)
        if avg_range < avg_close * 0.001:
            logger.warning(f"Data for {table_name} shows low volatility: avg_range={avg_range:.6f}, avg_close={avg_close:.6f}.")
    return df

def load_data(backtester, short_table_format, long_table_format, short_tf, long_tf, 
              start_date=None, end_date=None, extra_tf=None, use_weekly=False):
    """
    백테스터(backtester) 객체에 필요한 OHLCV 데이터와 인디케이터 데이터를 로드 및 전처리합니다.
    
    주요 기능:
      - 단기(short) 및 장기(long) 데이터 테이블 이름 생성 후 캐시에서 검색
      - 캐시에 없으면 데이터베이스에서 조회하고 캐시에 저장
      - 데이터 프레임의 유효성을 검사하고 전처리 수행
      - 추가 시간 프레임(extra_tf)이 제공되면 볼린저 밴드를 계산하여 추가 데이터 구성
      - use_weekly가 True면 단기 데이터를 주간 데이터로 집계하여 저장
    
    Parameters:
        backtester (object): 백테스트 실행 객체로, 로드된 데이터를 저장할 속성을 포함.
        short_table_format (str): 단기 데이터 테이블 이름 형식 (문자열 포맷).
        long_table_format (str): 장기 데이터 테이블 이름 형식 (문자열 포맷).
        short_tf (str): 단기 데이터의 시간 프레임 (예: '1m', '5m').
        long_tf (str): 장기 데이터의 시간 프레임 (예: '1h', '1d').
        start_date (str 또는 datetime, optional): 데이터 조회 시작 날짜.
        end_date (str 또는 datetime, optional): 데이터 조회 종료 날짜.
        extra_tf (str, optional): 추가 데이터 시간 프레임 (예: '15m'); 기본값은 None.
        use_weekly (bool, optional): 주간 데이터 집계를 사용할지 여부.
    
    Returns:
        None
    """
    try:
        # 심볼(symbol)을 포맷에 맞게 소문자 및 '/' 제거 처리
        symbol_for_table = backtester.symbol.replace('/', '').lower()
        # 단기 및 장기 테이블 이름 생성 (문자열 포맷 사용)
        short_table = short_table_format.format(symbol=symbol_for_table, timeframe=short_tf)
        long_table = long_table_format.format(symbol=symbol_for_table, timeframe=long_tf)
        
        # 단기 데이터 로드: 캐시에서 검색 후 없으면 DB에서 조회
        df_short = _get_cached_ohlcv(short_table, start_date, end_date)
        if df_short is None:
            df_short = fetch_ohlcv_records(short_table, start_date, end_date)
            _set_cached_ohlcv(short_table, start_date, end_date, df_short)
        # 데이터 프레임 유효성 검사 및 전처리 수행
        df_short = _validate_and_prepare_df(df_short, short_table)
        
        # 장기 데이터 로드: 캐시 검색 후 없으면 DB에서 조회
        df_long = _get_cached_ohlcv(long_table, start_date, end_date)
        if df_long is None:
            df_long = fetch_ohlcv_records(long_table, start_date, end_date)
            _set_cached_ohlcv(long_table, start_date, end_date, df_long)
        df_long = _validate_and_prepare_df(df_long, long_table)
        
        # 백테스터 객체에 로드된 데이터를 할당 (후속 전략 로직에서 사용)
        backtester.df_short = df_short
        backtester.df_long = df_long
        
        # 단기 또는 장기 데이터가 비어있으면 에러 로그 출력 후 예외 발생
        if backtester.df_short.empty or backtester.df_long.empty:
            logger.error("데이터 로드 실패: short 또는 long 데이터가 비어있습니다.", exc_info=True)
            raise ValueError("No data loaded")
        
        # 데이터 로드 성공 이벤트 로깅
        log_util.log_event("Data loaded successfully", state_key="data_load")
    except Exception as e:
        logger.error(f"데이터 로드 중 에러 발생: {e}", exc_info=True)
        raise

    # 추가 시간 프레임(extra_tf)이 지정된 경우 추가 데이터 로드 및 볼린저 밴드 계산 수행
    if extra_tf:
        try:
            extra_table = short_table_format.format(symbol=symbol_for_table, timeframe=extra_tf)
            df_extra = _get_cached_ohlcv(extra_table, start_date, end_date)
            if df_extra is None:
                df_extra = fetch_ohlcv_records(extra_table, start_date, end_date)
                _set_cached_ohlcv(extra_table, start_date, end_date, df_extra)
            df_extra = _validate_and_prepare_df(df_extra, extra_table)
            backtester.df_extra = df_extra
            if not backtester.df_extra.empty:
                # 볼린저 밴드를 계산하여 보조 지표 추가 (가격 열은 'close')
                backtester.df_extra = compute_bollinger_bands(
                    backtester.df_extra,
                    price_column='close',
                    period=20,
                    std_multiplier=2.0,
                    fillna=True
                )
                log_util.log_event("Extra data loaded", state_key="extra_load")
        except Exception as e:
            logger.error(f"Extra 데이터 로드 에러: {e}", exc_info=True)
    # 주간 데이터 집계 옵션이 True인 경우, 단기 데이터를 주간 단위로 집계하여 백테스터에 추가
    if use_weekly:
        try:
            backtester.df_weekly = aggregate_to_weekly(backtester.df_short, compute_indicators=True)
            if backtester.df_weekly.empty:
                logger.warning("주간 데이터 집계 결과가 비어있습니다.")
            else:
                log_util.log_event("Weekly data aggregated", state_key="weekly_load")
        except Exception as e:
            logger.error(f"주간 데이터 집계 에러: {e}", exc_info=True)

[backtesting/steps/hmm_manager.py]
# backtesting/steps/hmm_manager.py

from logs.logger_config import setup_logger

# 모듈 로깅 인스턴스 설정
logger = setup_logger(__name__)

def update_hmm(backtester, dynamic_params):
    """
    백테스터 객체의 HMM(은닉 마르코프 모델) 상태를 업데이트하고, 업데이트된 regime(시장 체제)의 분포를 로그로 출력합니다.
    
    Parameters:
        backtester (object): HMM 업데이트 메서드를 가진 백테스터 객체.
        dynamic_params (dict): 동적 파라미터(예: 시장 환경, 유동성 정보 등)를 포함하는 딕셔너리.
    
    Returns:
        pandas.Series: 업데이트된 HMM regime 시리즈.
    """
    # 백테스터 내부의 HMM 업데이트 함수 호출 (예: 시장 체제 분류 업데이트)
    regime_series = backtester.update_hmm_regime(dynamic_params)
    try:
        # 각 regime 값의 빈도수를 계산하여 딕셔너리 형태로 변환 후 디버그 로그 출력
        counts = regime_series.value_counts().to_dict()
        logger.debug(f"HMM 업데이트 완료: 총 {len(regime_series)} 샘플, regime 분포: {counts}")
    except Exception:
        logger.error("HMM 업데이트 완료: regime 분포 정보 산출 실패")
    return regime_series

[backtesting/steps/indicator_applier.py]
# backtesting/steps/indicator_applier.py

from logs.logger_config import setup_logger
from trading.indicators import compute_sma, compute_rsi, compute_macd

# 모듈 로깅 인스턴스 설정
logger = setup_logger(__name__)

def apply_indicators(backtester):
    """
    백테스터 객체의 장기 데이터(df_long)에 SMA, RSI, MACD 등 다양한 트레이딩 인디케이터를 적용합니다.
    
    주요 동작:
      - 단순 이동평균(SMA) 계산 후 'sma' 열에 저장
      - 상대 강도 지수(RSI) 계산 후 'rsi' 열에 저장
      - MACD 및 시그널, 차이값 계산 후 'macd_' 접두사로 열 추가
      - 적용된 인디케이터 값들의 최소/최대 범위를 로그에 출력
    
    Parameters:
        backtester (object): 인디케이터를 적용할 데이터 프레임(df_long)을 포함하는 백테스터 객체.
    
    Returns:
        None
    """
    # SMA 계산: 종가('close') 기준, 200 기간, 결측값 채움 옵션 활성화, 결과는 'sma' 열에 저장
    backtester.df_long = compute_sma(backtester.df_long, price_column='close', period=200, fillna=True, output_col='sma')
    # RSI 계산: 종가('close') 기준, 14 기간, 결측값 채움, 결과는 'rsi' 열에 저장
    backtester.df_long = compute_rsi(backtester.df_long, price_column='close', period=14, fillna=True, output_col='rsi')
    # MACD 계산: 종가('close') 기준, 느린 기간=26, 빠른 기간=12, 시그널 기간=9, 결측값 채움, 결과 열은 'macd_' 접두사를 사용
    backtester.df_long = compute_macd(backtester.df_long, price_column='close', slow_period=26, fast_period=12, signal_period=9, fillna=True, prefix='macd_')
    
    # 인디케이터가 적용된 데이터의 값 범위를 계산하여 로그에 출력 (모든 값의 최소 및 최대값)
    sma_min = backtester.df_long['sma'].min()
    sma_max = backtester.df_long['sma'].max()
    rsi_min = backtester.df_long['rsi'].min()
    rsi_max = backtester.df_long['rsi'].max()
    macd_diff_min = backtester.df_long['macd_diff'].min()
    macd_diff_max = backtester.df_long['macd_diff'].max()
    
    logger.debug(
        f"인디케이터 적용 완료: SMA 범위=({sma_min:.2f}, {sma_max:.2f}), "
        f"RSI 범위=({rsi_min:.2f}, {rsi_max:.2f}), MACD diff 범위=({macd_diff_min:.2f}, {macd_diff_max:.2f})"
    )

[backtesting/steps/order_manager.py]
# backtesting/steps/order_manager.py

from logs.logger_config import setup_logger
from logs.logging_util import LoggingUtil  # 동적 상태 변화 로깅 유틸리티

# 모듈 로깅 인스턴스 및 추가 로깅 유틸리티 설정
logger = setup_logger(__name__)
log_util = LoggingUtil(__name__)

def get_signal_with_weekly_override(backtester, row, current_time, dynamic_params):
    """
    주간 데이터(weekly data)가 존재할 경우, 주간 저점/고점 근접 여부에 따라 주문 신호(enter_long 또는 exit_all)를 우선 적용합니다.
    만약 주간 데이터 조건이 충족되지 않으면, ensemble_manager를 이용해 최종 신호를 반환합니다.
    
    Parameters:
        backtester (object): 주문 신호 생성을 위한 백테스터 객체.
        row (pandas.Series): 현재 시점의 데이터 행 (OHLCV 및 기타 지표 포함).
        current_time (datetime): 현재 시점의 시간.
        dynamic_params (dict): 동적 파라미터 (예: 유동성 정보 등).
    
    Returns:
        str: 주문 신호 (예: "enter_long", "exit_all", 또는 ensemble_manager의 반환 값).
    """
    try:
        # 주간 데이터가 존재하며, 비어있지 않은 경우
        if hasattr(backtester, 'df_weekly') and backtester.df_weekly is not None and not backtester.df_weekly.empty:
            # 현재 시간보다 작거나 같은 주간 데이터 중 가장 최근 데이터(주간 바)를 선택
            weekly_bar = backtester.df_weekly.loc[backtester.df_weekly.index <= current_time].iloc[-1]
            # 주간 데이터에 'weekly_low' 및 'weekly_high' 값이 존재하는지 확인
            if "weekly_low" in weekly_bar and "weekly_high" in weekly_bar:
                tolerance = 0.002  # 주간 저점/고점에 대한 허용 오차 비율
                # 현재 종가가 주간 저점에 근접하면 'enter_long' 신호 반환
                if abs(row["close"] - weekly_bar["weekly_low"]) / weekly_bar["weekly_low"] <= tolerance:
                    log_util.log_event("Weekly override: enter_long", state_key="order_signal")
                    return "enter_long"
                # 현재 종가가 주간 고점에 근접하면 'exit_all' 신호 반환
                elif abs(row["close"] - weekly_bar["weekly_high"]) / weekly_bar["weekly_high"] <= tolerance:
                    log_util.log_event("Weekly override: exit_all", state_key="order_signal")
                    return "exit_all"
            else:
                # 주간 데이터에 필요한 키가 없으면 경고 로그 출력
                backtester.logger.warning("Weekly override skipped: weekly_bar missing 'weekly_low' or 'weekly_high' keys.")
        # 주간 override 조건이 충족되지 않으면 ensemble_manager를 통해 최종 신호 계산
        return backtester.ensemble_manager.get_final_signal(
            row.get('market_regime', 'unknown'),
            dynamic_params.get('liquidity_info', 'high'),
            backtester.df_short,
            current_time,
            data_weekly=getattr(backtester, 'df_weekly', None)
        )
    except Exception as e:
        # 오류 발생 시 에러 로그 기록 후 ensemble_manager의 최종 신호 반환
        backtester.logger.error(f"Error in weekly override signal generation: {e}", exc_info=True)
        return backtester.ensemble_manager.get_final_signal(
            row.get('market_regime', 'unknown'),
            dynamic_params.get('liquidity_info', 'high'),
            backtester.df_short,
            current_time,
            data_weekly=getattr(backtester, 'df_weekly', None)
        )

def process_training_orders(backtester, dynamic_params, signal_cooldown, rebalance_interval):
    """
    학습 데이터(df_train)를 순회하며 각 시점에 대해 주문 신호를 생성하고 주문을 실행합니다.
    또한, 주간 종료, walk-forward window, 포지션 업데이트 및 자산 리밸런싱 등을 처리합니다.
    
    Parameters:
        backtester (object): 주문 처리 로직을 포함하는 백테스터 객체.
        dynamic_params (dict): 주문 실행 시 필요한 동적 파라미터들.
        signal_cooldown (timedelta): 신호 간 최소 시간 간격.
        rebalance_interval (timedelta): 리밸런싱 간 최소 시간 간격.
    
    Returns:
        None
    """
    # 학습 데이터의 각 시간별 행을 순회하며 주문 처리 수행
    for current_time, row in backtester.df_train.iterrows():
        try:
            # 주간 종료 처리: 매주 금요일(weekday()==4)이며, 이전에 처리되지 않은 날짜이면 주간 종료 처리 실행
            try:
                if current_time.weekday() == 4 and (
                    backtester.last_weekly_close_date is None or 
                    backtester.last_weekly_close_date != current_time.date()
                ):
                    try:
                        backtester.handle_weekly_end(current_time, row)
                    except Exception as e:
                        logger.error(f"Weekly end handling error {e}", exc_info=True)
                    backtester.last_weekly_close_date = current_time.date()
                    continue  # 주간 종료 후 나머지 주문 로직 생략
            except Exception as e:
                logger.error(f"Error during weekly end check {e}", exc_info=True)
            
            # walk-forward window 처리: 정해진 기간이 경과하면 walk-forward 처리를 실행
            try:
                if backtester.walk_forward_days is not None and (current_time - backtester.window_start) >= backtester.walk_forward_td:
                    try:
                        backtester.handle_walk_forward_window(current_time, row)
                    except Exception as e:
                        logger.error(f"Walk-forward window handling error {e}", exc_info=True)
                    backtester.window_start = current_time
            except Exception as e:
                logger.error(f"Error during walk-forward window check {e}", exc_info=True)
            
            # 신호 쿨다운을 고려하여 일정 시간 간격 이후에만 신호 생성 (즉, 너무 짧은 간격은 무시)
            if backtester.last_signal_time is None or (current_time - backtester.last_signal_time) >= signal_cooldown:
                action = get_signal_with_weekly_override(backtester, row, current_time, dynamic_params)
            else:
                action = "hold"
                
            # 기본 위험 파라미터 설정 (거래당 위험, ATR 곱수, 수익 비율, 현재 변동성)
            base_risk_params = {
                "risk_per_trade": dynamic_params.get("risk_per_trade", 0.01),
                "atr_multiplier": dynamic_params.get("atr_multiplier", 2.0),
                "profit_ratio": dynamic_params.get("profit_ratio", 0.05),
                "current_volatility": row.get("volatility", 0)
            }
            risk_params = base_risk_params
            try:
                # 시장 체제 및 유동성 정보에 따른 위험 파라미터 보정
                risk_params = backtester.risk_manager.compute_risk_parameters_by_regime(
                    base_risk_params,
                    row.get('market_regime', 'unknown'),
                    dynamic_params.get('liquidity_info', 'high')
                )
            except Exception as e:
                logger.error(f"Risk parameter computation error {e}", exc_info=True)
                risk_params = base_risk_params
            try:
                # 주문 실행: 신호(action)에 따라 bullish entry, bearish exit 또는 sideways trade 처리
                if action == "enter_long":
                    backtester.process_bullish_entry(current_time, row, risk_params, dynamic_params)
                    log_util.log_event("Order executed: enter_long", state_key="order_execution")
                elif action == "exit_all":
                    backtester.process_bearish_exit(current_time, row)
                    log_util.log_event("Order executed: exit_all", state_key="order_execution")
                elif row.get('market_regime', 'unknown') == "sideways":
                    backtester.process_sideways_trade(current_time, row, risk_params, dynamic_params)
                    log_util.log_event("Order executed: sideways", state_key="order_execution")
            except Exception as e:
                logger.error(f"Error processing order with action '{action}': {e}", exc_info=True)
            # 마지막 신호 발생 시각 갱신
            backtester.last_signal_time = current_time

            # 포지션 업데이트: 각 시점에서 보유 포지션의 상태 갱신
            try:
                backtester.update_positions(current_time, row)
            except Exception as e:
                logger.error(f"Error updating positions {e}", exc_info=True)

            # 리밸런싱 처리: 정해진 간격이 경과하면 자산 리밸런싱 실행
            try:
                if backtester.last_rebalance_time is None or (current_time - backtester.last_rebalance_time) >= rebalance_interval:
                    try:
                        backtester.asset_manager.rebalance(row.get('market_regime', 'unknown'))
                    except Exception as e:
                        logger.error(f"Error during rebalance {e}", exc_info=True)
                    backtester.last_rebalance_time = current_time
                log_util.log_event("Rebalance executed", state_key="rebalance")
            except Exception as e:
                logger.error(f"Error in rebalance check {e}", exc_info=True)

        except Exception as e:
            logger.error(f"Unexpected error during processing training orders {e}", exc_info=True)
            continue

def process_extra_orders(backtester, dynamic_params):
    """
    추가 데이터(df_extra)가 있을 경우, 각 시점에 대해 주문 신호를 생성하고 주문을 실행합니다.
    단, 시장 체제(realm)를 재조회하여 위험 파라미터를 재계산하고, 주문 모니터링도 수행합니다.
    
    Parameters:
        backtester (object): 주문 처리 로직을 포함하는 백테스터 객체.
        dynamic_params (dict): 주문 실행 시 필요한 동적 파라미터들.
    
    Returns:
        None
    """
    if backtester.df_extra is not None and not backtester.df_extra.empty:
        for current_time, row in backtester.df_extra.iterrows():
            try:
                # 주간 override 신호를 포함한 주문 신호 생성
                hf_signal = get_signal_with_weekly_override(backtester, row, current_time, dynamic_params)
                # 현재 시장 체제 정보를 가져오기 위해 장기 데이터(df_long)에서 최신 값을 조회
                regime = "sideways"
                try:
                    regime = backtester.df_long.loc[backtester.df_long.index <= current_time].iloc[-1].get('market_regime', 'sideways')
                except Exception as e:
                    logger.error(f"Retrieving regime failed {e}", exc_info=True)
                    regime = "sideways"
                # 기본 위험 파라미터 설정
                base_risk_params = {
                    "risk_per_trade": dynamic_params.get("risk_per_trade", 0.01),
                    "atr_multiplier": dynamic_params.get("atr_multiplier", 2.0),
                    "profit_ratio": dynamic_params.get("profit_ratio", 0.05),
                    "current_volatility": row.get("volatility", 0)
                }
                risk_params = base_risk_params
                try:
                    # 위험 파라미터를 시장 체제와 유동성 정보에 따라 조정
                    risk_params = backtester.risk_manager.compute_risk_parameters_by_regime(
                        base_risk_params,
                        regime,
                        dynamic_params.get('liquidity_info', 'high')
                    )
                except Exception as e:
                    logger.error(f"Risk params error (extra data) {e}", exc_info=True)
                    risk_params = base_risk_params
                try:
                    # 주문 실행: 신호에 따라 bullish entry 또는 bearish exit 처리
                    if hf_signal == "enter_long":
                        backtester.process_bullish_entry(current_time, row, risk_params, dynamic_params)
                        log_util.log_event("Extra: Order executed: enter_long", state_key="order_execution")
                    elif hf_signal == "exit_all":
                        backtester.process_bearish_exit(current_time, row)
                        log_util.log_event("Extra: Order executed: exit_all", state_key="order_execution")
                except Exception as e:
                    logger.error(f"Error processing extra order with hf_signal '{hf_signal}': {e}", exc_info=True)
                # 주문 모니터링: 주문 상태 및 포지션 관리
                try:
                    backtester.monitor_orders(current_time, row)
                except Exception as e:
                    logger.error(f"Error monitoring orders {e}", exc_info=True)
            except Exception as e:
                logger.error(f"Unexpected error in process_extra_orders {e}", exc_info=True)
                continue

def process_holdout_orders(backtester, dynamic_params, df_holdout):
    """
    보류(holdout) 데이터(df_holdout)에 대해 각 시점마다 주문 신호를 생성하고 주문을 실행합니다.
    위험 파라미터 재계산, 포지션 업데이트 등 일반 주문 처리 로직과 유사하게 진행합니다.
    
    Parameters:
        backtester (object): 주문 처리 로직을 포함하는 백테스터 객체.
        dynamic_params (dict): 주문 실행 시 필요한 동적 파라미터들.
        df_holdout (pandas.DataFrame): 보류 데이터 (테스트 또는 검증용 데이터).
    
    Returns:
        None
    """
    if df_holdout is not None:
        for current_time, row in df_holdout.iterrows():
            try:
                # 주간 override를 고려한 주문 신호 생성
                action = get_signal_with_weekly_override(backtester, row, current_time, dynamic_params)
                # 기본 위험 파라미터 설정
                base_risk_params = {
                    "risk_per_trade": dynamic_params.get("risk_per_trade", 0.01),
                    "atr_multiplier": dynamic_params.get("atr_multiplier", 2.0),
                    "profit_ratio": dynamic_params.get("profit_ratio", 0.05),
                    "current_volatility": row.get("volatility", 0)
                }
                risk_params = base_risk_params
                try:
                    # 위험 파라미터 보정: 시장 체제 및 유동성 정보에 기반
                    risk_params = backtester.risk_manager.compute_risk_parameters_by_regime(
                        base_risk_params,
                        row.get('market_regime', 'unknown'),
                        dynamic_params.get('liquidity_info', 'high')
                    )
                except Exception as e:
                    logger.error(f"Risk params error (holdout) {e}", exc_info=True)
                    risk_params = base_risk_params
                try:
                    # 주문 실행: 신호에 따라 bullish entry, bearish exit, 또는 sideways trade 처리
                    if action == "enter_long":
                        backtester.process_bullish_entry(current_time, row, risk_params, dynamic_params)
                        log_util.log_event("Holdout: Order executed: enter_long", state_key="order_execution")
                    elif action == "exit_all":
                        backtester.process_bearish_exit(current_time, row)
                        log_util.log_event("Holdout: Order executed: exit_all", state_key="order_execution")
                    elif row.get('market_regime', 'unknown') == "sideways":
                        backtester.process_sideways_trade(current_time, row, risk_params, dynamic_params)
                        log_util.log_event("Holdout: Order executed: sideways", state_key="order_execution")
                except Exception as e:
                    logger.error(f"Error processing holdout order with action '{action}': {e}", exc_info=True)
                try:
                    # 보류 데이터에 대해 포지션 상태 업데이트 실행
                    backtester.update_positions(current_time, row)
                except Exception as e:
                    logger.error(f"Error updating positions in holdout {e}", exc_info=True)
            except Exception as e:
                logger.error(f"Unexpected error in process_holdout_orders {e}", exc_info=True)
                continue

def finalize_orders(backtester):
    """
    백테스터 객체 내에서 모든 포지션을 마감(finalize) 처리합니다.
    
    Parameters:
        backtester (object): 최종 포지션 마감을 실행할 백테스터 객체.
    
    Returns:
        None
    """
    try:
        backtester.finalize_all_positions()
    except Exception as e:
        logger.error(f"Error finalizing orders: {e}", exc_info=True)
        raise
