project_root/
├── asset_position/              # [자산 및 포지션 관리]
│   ├── account.py               # 거래 계좌 관리
│   ├── asset_manager.py         # 자산 리밸런싱 및 자산 전환 관리
│   └── position.py              # 포지션 및 실행 기록 관리
│
├── data/                        # [데이터]
│   ├── db/                      # DB 접속 및 데이터 저장/조회 관련: db_config, db_manager
│   └── ohlcv/                   # 거래 데이터 수집 및 집계: ohlcv_fetcher, ohlcv_aggregator, ohlcv_pipeline
│
├── logging/                     # [로깅]
│   ├── logger_config.py         # 로깅 인프라 설정 (파일/콘솔/큐 핸들러, 회전 핸들러 등)
│   ├── logging_util.py          # 추가 로깅 유틸리티 및 동적 로그 트래킹
│   ├── aggregating_handler.py   # 로그 이벤트 집계 핸들러
│   └── state_change_manager.py  # 상태 변화 관리
│
├── market_analysis/             # [시장 분석]
│   ├── regime_filter.py         # 가격 기반 시장 상태 판단 함수
│   └── regime_model.py          # HMM 기반 시장 상태 예측 모델
│
├── parameter_management/        # [파라미터 관리/최적화/과적합 방지]
│   ├── config_manager.py        # 기본 파라미터 정의 및 동적 업데이트/검증
│   ├── optimizer.py             # 동적 파라미터 최적화
│   └── param_analysis.py        # 민감도 분석 기능
│
├── reports/                     # [성과 보고]
│   ├── final_report.py          # 최종 성과 보고서 생성 함수
│   └── performance.py           # 거래 성과 계산 함수
│
├── scripts/                     # [실행 스크립트]
│   ├── run_drop_db_tables.py
│   ├── run_update_ohlcv_data.py
│   ├── run_parameter_analysis.py
│   └── run_strategy_performance.py
│
├── signal_calculation/          # [신호 계산]
│   ├── strategies/              # 다양한 전략 클래스 및 앙상블: base_strategy, trading_strategies
│   ├── ensemble.py              # 전략 신호 결합(앙상블) 로직
│   └── indicators.py            # 기술적 인디케이터 계산 함수
│
├── tests/                       # 테스트 케이스 전체
│
└── trading/                     # [거래]
    ├── backtesting/             # 백테스트 전체 파이프라인
    │   ├── steps/               # data_loader.py, hmm_manager.py, indicator_applier.py, order_manager.py
    │   └── backtester.py
    ├── calculators.py       
    ├── risk_manager.py          # 리스크 관리 및 포지션 사이즈 계산, trailing stop 등
    └── trade_executor.py        # 실제 거래 실행 로직 (계산 함수 호출 포함)
