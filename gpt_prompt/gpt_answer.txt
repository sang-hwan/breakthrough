**[backtesting]**  
- **backtester.py**  
  - 백테스트 실행의 전반적인 로직(데이터 로드, 인디케이터 적용, HMM 기반 레짐 업데이트, 포지션 관리, 전략 실행, 리밸런싱, 최종 청산 등)을 구현합니다.
- **optimizer.py**  
  - Optuna를 활용해 동적 파라미터 최적화를 수행하며, 여러 자산과 스플릿(Train/Test/Holdout) 환경에서 백테스트를 실행하고 평가 점수를 산출합니다.
- **performance.py**  
  - 월별 및 전체 백테스트 성과(ROI, 누적 수익, 연간 수익률, 샤프 지수, 최대 낙폭 등)를 계산하는 기능을 제공합니다.

**[dynamic_parameters]**  
- **dynamic_param_manager.py**  
  - 기본 동적 파라미터를 정의하고, 시장 데이터에 따라 파라미터를 업데이트하거나 최적화 결과와 병합하는 기능을 수행하는 싱글턴 클래스입니다.

**[data_collection]**  
- **db_config.py**  
  - 데이터베이스 접속 정보를 환경 변수(.env)를 통해 설정합니다.
- **db_manager.py**  
  - SQLAlchemy와 psycopg2를 사용하여 OHLCV 데이터를 데이터베이스에 저장하거나 불러오는 기능을 구현합니다.
- **ohlcv_fetcher.py**  
  - ccxt 라이브러리를 활용해 암호화폐 거래소에서 역사적 및 최신 OHLCV 데이터를 수집합니다.
- **ohlcv_pipeline.py**  
  - 지정한 심볼과 타임프레임에 대해 OHLCV 데이터를 수집한 후 데이터베이스에 저장하는 전체 파이프라인을 구성합니다.

**[logs]**  
- **aggregating_handler.py**  
  - 고빈도 로그들을 (logger, 파일, 함수 기준) 집계하여 임계치 도달 시 요약 로그를 출력하는 커스텀 로깅 핸들러를 구현합니다.
- **final_report.py**  
  - 백테스트 성과 데이터를 바탕으로 최종 성과 리포트를 생성하는 기능을 제공합니다.
- **logger_config.py**  
  - 로깅 설정(파일/콘솔 핸들러, 회전 로깅, AggregatingHandler 포함)을 초기화하고 각 모듈별 로거를 설정합니다.
- **logging_util.py**  
  - 이벤트 로깅을 위한 유틸리티 클래스를 제공하며, AggregatingHandler와 함께 로그 집계를 지원합니다. (EventLogger가 LoggingUtil이라는 이름으로 alias 처리되어 있습니다.)

**[markets_analysis]**  
- **hmm_model.py**  
  - GaussianHMM을 사용해 시장 레짐(예: bullish, bearish, sideways)을 학습 및 예측하는 HMM 모델의 학습, 예측, 업데이트 로직을 구현합니다.
- **regime_filter.py**  
  - 단순한 가격 변화 기반의 레짐 결정 및 필터링 로직을 제공합니다.

**[project root]**  
- **.env**  
  - 데이터베이스 접속 정보 및 로깅 관련 환경 변수를 설정합니다.
- **requirements.txt**  
  - 프로젝트에서 사용하는 모든 Python 패키지 목록을 명시합니다.
- **run_strategy_performance.py**  
  - 전체 백테스트, 파라미터 최적화, 각 자산별 백테스트 실행 및 최종 성과 리포트 생성을 순차적으로 실행하는 메인 스크립트입니다.

**[tests]**  
- **conftest.py**  
  - 테스트 실행 전 logs 디렉토리 내의 로그 파일들을 삭제하는 Pytest fixture를 정의합니다.
- **test_auto_optimization_trigger.py**  
  - 월간 ROI가 2% 미만인 경우 최적화 트리거를 발생시키는지 확인하는 더미 함수를 테스트합니다.
- **test_logging_summary.py**  
  - AggregatingHandler를 통한 로그 요약 기능이 올바르게 동작하는지 확인하는 테스트입니다.
- **test_performance_report.py**  
  - 최종 성과 리포트가 핵심 지표(ROI, 거래 횟수, 월별 데이터 등)를 포함하는지 확인하는 테스트입니다.

**[trading]**  
- **account.py**  
  - 거래 계좌의 초기화, 포지션 관리, 잔고 계산, 거래 후 잔고 업데이트, 자산 간 전환 등의 기능을 제공합니다.
- **asset_manager.py**  
  - 시장 레짐에 따라 계좌 내 현물과 스테이블코인 간 자산 배분(리밸런싱)을 수행하는 로직을 구현합니다.
- **ensemble_manager.py**  
  - 여러 거래 전략(기본, 트렌드 팔로잉, 돌파, 역추세, 고빈도)을 집계해 최종 거래 신호를 산출하고, 신호 변경 시 로그를 남기는 역할을 합니다.
- **indicators.py**  
  - SMA, MACD, RSI, Bollinger Bands 등 기술적 인디케이터를 계산하는 함수를 제공합니다.  
  *(하나의 파일로 두 번 입력된 것으로 보이며 동일한 내용입니다.)*
- **positions.py**  
  - 개별 포지션(진입, 실행, 부분 청산, 전체 청산 등)과 관련된 데이터를 관리하고 업데이트하는 클래스(TradePosition)를 구현합니다.
- **risk_manager.py**  
  - 포지션 사이즈 계산, 포지션 분할 할당, 스케일인(scale-in) 실행, 리스크 파라미터(시장 레짐, 유동성, 변동성 반영)를 산출하는 기능을 제공합니다.  
  *(역시 파일이 두 번 입력된 것으로 보이며 내용은 동일합니다.)*
- **strategies.py**  
  - 여러 거래 전략(캔들 패턴, SMA/RSI, Bollinger Bands, 트렌드 팔로잉, 돌파, 역추세, 고빈도)을 각각 구현하고, 신호 변경을 감지하여 최종 거래 신호를 산출하는 로직을 포함합니다.
- **trade_manager.py**  
  - ATR 기반 스탑로스 및 테이크 프로핏 계산, 트레일링 스탑 조정, 부분 청산 목표 설정 등 거래 실행 관련 여러 계산 및 의사결정 로직을 제공합니다.
