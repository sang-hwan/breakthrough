[명령 프롬프트 예시]
1. **요약 로그(중앙 관리) 기능 추가**  
   - logs 폴더 내(또는 logger_config.py, logging_util.py 등 기존 로거 설정 파일)에서, 별도의 “summary” 로거를 생성해 주세요.  
   - 요약 로그를 기록할 전용 함수를 만들고, 각 모듈(ensemble_manager.py, trade_manager.py 등)에서 이 함수를 호출하도록 해 주세요.

2. **모듈별 요약 로그 제거**  
   - ensemble_manager.py, trade_manager.py, risk_manager.py, backtester.py, optimizer.py 등에서 “직접 INFO 로그”로 집계 요약을 기록하는 코드를 모두 제거(또는 주석 처리)해 주세요.  
   - 대신, 중앙 로그 함수(예: log_summary_event)만 호출하도록 수정해 주세요.

3. **INFO vs. DEBUG 로그 재분류**  
   - 프로젝트 전반에 걸쳐, 핵심 이벤트나 최종 성과 지표(집계 신호, 백테스트 요약, 최적화 결과 등)는 INFO 레벨로 유지해 주세요.  
   - 반복적인 계산 과정이나 거래 상세 로그 등은 DEBUG 레벨로 변경해, 최종 보고 시 핵심 로그만 INFO로 남도록 해 주세요.

4. **최종 보고서와 요약 로그 연동**  
   - run_strategy_performance.py나 final_report.py 등에서, 중앙 요약 로거가 기록하는 핵심 이벤트들을 참고해 최종 보고서를 생성할 수 있도록 해 주세요.  
   - 만약 별도의 요약 로그 파일을 사용한다면, 해당 파일에 기록된 요약 정보만 추출해 보고서에 포함해 주세요.

위 지침을 종합적으로 반영하여, **중앙에서 요약 로그를 관리**하고, **INFO/DEBUG 레벨을 분리**하는 작업을 완수해 주세요.  
모든 수정이 끝난 뒤, **예시 코드는 제시하지 말고** 최종 코드만 공유해 주시면 됩니다.



[명령 프롬프트 예시]
1. **리스크 파라미터 동적 보정 로직 추가**  
   - `risk_manager.py`에서 기존에 “고정된 값”으로 사용 중인 `risk_per_trade`, `atr_multiplier` 등을  
     **시장 변동성, 최근 ATR 변화, 각종 지표 등**에 따라 동적으로 조정할 수 있도록 해 주세요.  
   - Optimizer가 산출한 “병합된 파라미터”를 그대로 사용하는 대신,  
     **보정 함수를 통해** 매 거래 시점 또는 일정 주기마다 다시 점검·조정하도록 구현해 주세요.

2. **거래 진입 조건 완화 로직 적용**  
   - `trade_manager.py` 내 진입 조건 검사 부분에서,  
     “지표가 임계치를 정확히 넘지 않아도, 일정 범위(BUFFER)를 허용”하는 방식으로 수정해 주세요.  
   - 이를 통해 **거래 기회를 늘리고**, 월간 ROI 2% 이상 달성 가능성을 높여주세요.

3. **INFO vs. DEBUG 로그 재정비**  
   - **리스크 파라미터 조정 결과나 진입/청산 등 핵심 이벤트**는 INFO 레벨로 남기고,  
   - **세부 계산 과정, 각 거래별 상세 정보 등**은 DEBUG 레벨로 전환해 주세요.  
   - 중앙 요약 로거가 있다면, 핵심 이벤트만 그쪽으로 보내서 로그를 간소화해 주세요.



[명령 프롬프트 예시]

1. **월간 ROI 2% 미달 시 페널티 부여**  
   - Optimizer의 Objective 함수(또는 Trial 평가 함수)에서 백테스트 결과를 받아들일 때,  
     월간 ROI가 2% 미만인 경우 **해당 차이만큼 최종 점수를 감점** 또는 **가중치로 조정**하도록 로직을 추가해 주세요.
   - 이는 “ROI 2% 미달인 파라미터 조합”이 지나치게 우선순위가 높아지지 않게 하기 위함입니다.

2. **ROI 통합 방식**  
   - 여러 심볼(BTC/USDT, ETH/USDT, XRP/USDT 등)에 대해 각각 월간 ROI를 산출한다면,  
     이를 종합하여(평균, 최소, 특정 가중치 등) 2% 미달 여부를 판단해 주세요.
   - 어떤 심볼이라도 2% 미달이거나, 혹은 전체 ROI가 2% 미만이면 페널티를 적용하도록 해 주세요.

3. **최종 점수 산출**  
   - 기존에 계산하던 “기본 점수(base_score)”를 기반으로,  
     ROI 목표(2%) 미달 시 추가 페널티를 부과하여 **final_score**를 산출해 주세요.
   - 페널티 강도(예: penalty_factor)는 프로젝트 환경에 맞춰 적절히 설정해 주시기 바랍니다.
