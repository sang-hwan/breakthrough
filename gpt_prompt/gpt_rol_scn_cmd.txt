[시스템/역할]
당신은 "기술적 트레이딩 봇 개발자 (소프트웨어 엔지니어 + 퀀트 트레이딩 전문가)"입니다.

[지시사항]
1) 프로젝트 코드를 나누어 전달하겠습니다.  
2) 제가 "모두 입력하였습니다." 라고 말하기 전까지는, 전달받은 프로젝트 코드를 모두 기억하고 **"기억했습니다. 다음 코드를 입력해주세요."** 라고만 답변해주세요.  
3) 이후, 제가 "모두 입력하였습니다." 라고 명령하면, 그때부터 아래 항목들에 대해 해석 및 답변을 해주세요.  
4) 최종적으로 **월간 ROI 2% 이상**을 달성할 수 있는 전략을 구축하는 것을 목표로, 코드를 개선해주세요.

[분할하여 전체 프로젝트 코드 전달]

"모두 입력하였습니다. 지시사항을 전달하기 전까지는 '지시사항을 기다리고 있겠습니다.'라고 답변해주시고, 기다려주세요."

1. **스윙/단타 위주의 하이빈도 전략 적용**  
   - 중장기 하락 추세에서도 단기 변동(반등, 스윙)을 포착해 짧은 구간에서 수익을 누적하는 전략을 검토해주세요.  
   - 15분봉, 1시간봉 등 단기 차트를 활용하여 미세한 파동을 노리며, 거래 비용, 스프레드, 슬리피지 관리가 필수적입니다.  
   - 자동매매 환경 세팅 여부를 체크하고, 주기적인 체결 및 주문 모니터링 로직도 코드에 반영해주세요.

2. **자산배분(Stablecoin) & 현물 혼합 전략**  
   - 시장이 불안하거나 추세가 뚜렷하지 않을 때는 현물 비중을 줄이고, 스테이블코인에 대기(이자·스테이킹 활용 가능)하는 로직을 추가해주세요.  
   - 상승 추세가 확인되거나 돌파 시그널이 발생하면, 현물 비중을 다시 늘려 수익 기회를 노립니다.  
   - 하락장 진입 시에도 무조건 보유하기보다는, 스테이블코인으로 전환해 낙폭을 최소화하는 분할 매수·매도 방식도 검토해주세요.

3. **시장 레짐(시황) 전략과 앙상블 전략 병행**  
   - (1) 시장 레짐 필터(상승·하락·횡보 등)를 1차적으로 적용해 각 전략(추세 추종, 돌파, 역추세 등)의 가중치를 조절하는 로직을 코드에 구현해주세요.
   - (2) 프로젝트에서 없는 전략(추세 추종, 돌파, 역추세 등)은 추가해주세요.
   - (3) 동시에 단기 수익률, MDD(최대낙폭) 등 성과 지표를 주기적으로 평가해, 부진한 전략의 비중을 줄이고 우수한 전략의 비중을 높이는 앙상블 방식을 적용해주세요.  
   - 특정 시장 레짐에서도 여러 전략이 동시에 켜져 있도록 하고, 각 전략의 실시간 성과에 따라 동적으로 가중치가 조정되도록 설계해주세요.

4. **더욱 엄격한 데이터 분할과 검증**  
   - (1) **HMM 기반 시장 레짐 분석**  
     - 상승장(상태 0), 하락장(상태 1), 횡보장(상태 2) 등으로 구분된 레짐 정보를 바탕으로, 구간별로 시작·끝 지점(날짜)을 식별하고 목록화해주세요.  
     - 이렇게 확인된 레짐별 구간이 전체 데이터(2018-06-01 ~ 2025-02-01)에 고르게 분포하도록 분할을 고려합니다.  
   - (2) **워크-포워드 검증(시계열 교차검증) 적용**  
     - 2018-06-01부터 2023-12-31까지를 여러 소구간(윈도우)으로 나누고, 각 구간마다 학습→검증 단계를 순차적으로 반복해주세요.  
     - HMM으로 구분된 레짐 정보를 토대로, 상승·하락·횡보가 적절히 섞이도록 구간을 분배하거나, 레짐 전환이 잦은 구간에서는 윈도우 크기나 이동 폭을 다르게 설정해볼 수 있습니다.  
   - (3) **홀드아웃 세트 분리**  
     - 2024-01-01 ~ 2025-02-01 구간은 전혀 사용하지 않고 남겨두었다가, 최종 검증만 진행하는 홀드아웃 구간으로 설정해주세요.  
     - 이전 모든 학습·검증(워크-포워드) 과정을 거쳐 결정된 파라미터와 전략을 이 구간에 적용하여, 실제 시장에서의 성능을 추정합니다.  
   - (4) **성과 측정 및 리스크 관리 지표**  
     - 레짐별 및 전체 기간에 대해 ROI, 최대 낙폭(MDD), 분산, 샤프 지수 등을 측정하여, 전략이 다양한 시장 상황에서 일관된 성과를 내는지 평가하세요.  
     - 특히, HMM 상태별로 성능을 분리 분석하여, 특정 레짐에서만 과도하게 좋은 성과가 나오는 과적합이 없는지 확인해주세요.  
   - (5) **과적합 방지**  
     - 최종적으로 사용된 파라미터나 모델은 (2)번의 워크-포워드 검증에서 일관된 성과를 보여야 하며, (3)의 홀드아웃 구간에서도 일정 수준 이상의 지표를 달성해야 합니다.  
     - HMM 상태분류 로직 자체가 과적합되지 않도록, 정규화나 최소 상태 지속 기간(sojourn time) 등의 제약도 고려해주세요.

5. **파라미터 최적화 시 복잡도 제한 및 정규화**  
   - 파라미터 수를 최소화해, 핵심 변수(예: ATR multiplier, profit ratio, risk per trade 등) 위주로만 튜닝해주세요.  
   - 최적화 목적 함수에 페널티나 정규화 항을 적용해, 지나치게 세밀한 파라미터 조합이 선택되지 않도록 주의해주세요.  
   - 파라미터 민감도 분석(이 변수값이 조금 변해도 성과에 큰 영향이 없는지)을 통해, 민감도가 지나치게 높은 변수는 제외하거나 범위를 제한해주세요.

6. **리얼타임 모니터링과 피드백 루프 강화**  
   - 백테스트 시, 슬리피지·거래 비용·시장 충격 등을 무작위로 시뮬레이션하는 Monte Carlo 방식의 모의 시나리오 테스트를 추가해주세요.  
   - 이를 통해 전략이 예기치 못한 시장 상황에서도 어느 정도 견고한지를 평가하고, 필요 시 코드를 보완해주세요.  
   - 성과가 급격히 악화되는 구간이 있다면, 해당 구간의 로그·체결 이력을 상세 분석해 리스크 관리 로직(손절, 포지션 축소 등)이 제대로 작동하는지 점검해주세요.

---

제 DB에는 2018-06-01부터 2025-02-01까지 'BTC/USDT, ETH/USDT, XRP/USDT'의 1d, 4h, 1h, 15m OHLCV 데이터가 있습니다.  
위 항목들을 바탕으로 프로젝트 코드 내 전략 로직과 백테스트 프로세스를 업그레이드해주세요.  
함수를 추가할 때는 기존 프로젝트의 적합한 모듈을 우선 검토하고, 없다면 모듈을 추가해주세요.
모듈 역시 기존 구조에 맞추되, 필요하다면 새 디렉토리를 생성해 추가하거나 클래스화를 진행해주세요.
수정 시 다른 코드와 호환이 되도록 수시로 점검해주세요.

1. trading/ensemble_manager.py
앙상블 전략 관련 모듈에서 전략 신호 호출 시 기존 함수 호출 방식 대신, TradingStrategies 클래스의 인스턴스를 활용하도록 점검합니다.
위 내용을 검토해주세요.
TradingStrategies 의 인스턴스를 활용한다면 해당 파일은 없애면 되는가요?
2. run_high_frequency_trading 이건 strategies 에서 high_frequency_strategy 가 대체하는게 아니었나요? 그러면 run_high_frequency_trading 이건 없어도 되는거 아닌가요?
